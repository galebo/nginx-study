<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node COLOR="#338800" CREATED="1388815008672" MODIFIED="1390387317352" TEXT="nginx">
<node CREATED="1389275126222" FOLDED="true" MODIFIED="1389275131039" POSITION="right" TEXT="&#x6587;&#x7ae0;">
<node CREATED="1389275135399" FOLDED="true" LINK="http://www.php100.com/html/itnews/PHPxinwen/2012/0103/9606.html" MODIFIED="1389599367258" TEXT="&#x5173;&#x4e8e;Apache&#x4e0e;Nginx&#x7684;&#x4f18;&#x52bf;&#x6bd4;&#x8f83;">
<node CREATED="1389275146855" MODIFIED="1389599279158">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19981;&#26029;&#26377;&#20154;&#36319;&#25105;&#35828;Nginx&#27604;Apache&#22909;&#12289;&#27604;Apache&#24555;&#20043;&#31867;&#12290;Nginx&#26356;&#20027;&#35201;&#26159;&#20316;&#20026;&#21453;&#21521;&#20195;&#29702;&#65292;&#32780;&#38750;Web&#26381;&#21153;&#22120;&#20351;&#29992;&#12290;&#25105;&#32763;&#35793;&#36807;&#19968;&#26412;&#20851;&#20110;&#21453;&#21521;&#20195;&#29702;&#30340;&#25216;&#26415;&#20070;&#31821;&#65292;&#21516;&#26102;&#31934;&#36890;Apache API&#24320;&#21457;&#65292;&#23545;Nginx&#21644;Apache&#30340;&#24037;&#20316;&#21407;&#29702;&#37117;&#30053;&#26377;&#20102;&#35299;&#65292;&#31895;&#35848;&#19968;&#19979;&#30475;&#27861;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#12288;&#12288; &#19981;&#31649;&#26159;Nginx&#36824;&#26159;Squid&#36825;&#31181;&#21453;&#21521;&#20195;&#29702;&#65292;&#20854;&#32593;&#32476;&#27169;&#24335;&#37117;&#26159;&#20107;&#20214;&#39537;&#21160;&#12290;&#20107;&#20214;&#39537;&#21160;&#20854;&#23454;&#26159;&#24456;&#32769;&#30340;&#25216;&#26415;&#65292;&#26089;&#26399;&#30340;select&#12289;poll&#37117;&#26159;&#22914;&#27492;&#12290;&#21518;&#26469;&#22522;&#20110;&#20869;&#26680;&#36890;&#30693;&#30340;&#26356;&#39640;&#32423;&#20107;&#20214;&#26426;&#21046;&#20986;&#29616;&#65292;&#22914;libevent&#37324;&#30340;epoll&#65292;&#20351;&#20107;&#20214;&#39537;&#21160;&#24615;&#33021;&#24471;&#20197;&#25552;&#39640;&#12290;&#20107;&#20214;&#39537;&#21160;&#30340;&#26412;&#36136;&#36824;&#26159;IO&#20107;&#20214;&#65292;&#24212;&#29992;&#31243;&#24207;&#22312;&#22810;&#20010;IO&#21477;&#26564;&#38388;&#24555;&#36895;&#20999;&#25442;&#65292;&#23454;&#29616;&#25152;&#35859;&#30340;&#24322;&#27493;IO&#12290;&#20107;&#20214;&#39537;&#21160;&#26381;&#21153;&#22120;&#65292;&#26368;&#36866;&#21512;&#20570;&#30340;&#23601;&#26159;&#36825;&#31181;IO&#23494;&#38598;&#22411;&#24037;&#20316;&#65292;&#22914;&#21453;&#21521;&#20195;&#29702;&#65292;&#23427;&#22312;&#23458;&#25143;&#31471;&#19982;WEB&#26381;&#21153;&#22120;&#20043;&#38388;&#36215;&#19968;&#20010;&#25968;&#25454;&#20013;&#36716;&#20316;&#29992;&#65292;&#32431;&#31929;&#26159;IO&#25805;&#20316;&#65292;&#33258;&#36523;&#24182;&#19981;&#28041;&#21450;&#21040;&#22797;&#26434;&#35745;&#31639;&#12290;&#21453;&#21521;&#20195;&#29702;&#29992;&#20107;&#20214;&#39537;&#21160;&#26469;&#20570;&#65292;&#26174;&#28982;&#26356;&#22909;&#65292;&#19968;&#20010;&#24037;&#20316;&#36827;&#31243;&#23601;&#21487;&#20197;run&#20102;&#65292;&#27809;&#26377;&#36827;&#31243;&#12289;&#32447;&#31243;&#31649;&#29702;&#30340;&#24320;&#38144;&#65292;CPU&#12289;&#20869;&#23384;&#28040;&#32791;&#37117;&#23567;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#12288;&#12288;&#25152;&#20197;Nginx&#12289;Squid&#37117;&#26159;&#36825;&#26679;&#20570;&#30340;&#12290;&#24403;&#28982;&#65292;Nginx&#20063;&#21487;&#20197;&#26159;&#22810;&#36827;&#31243; + &#20107;&#20214;&#39537;&#21160;&#30340;&#27169;&#24335;&#65292;&#20960;&#20010;&#36827;&#31243;&#36305;libevent&#65292;&#19981;&#38656;&#35201;Apache&#37027;&#26679;&#21160;&#36740;&#25968;&#30334;&#30340;&#36827;&#31243;&#25968;&#12290;Nginx&#22788;&#29702;&#38745;&#24577;&#25991;&#20214;&#25928;&#26524;&#20063;&#24456;&#22909;&#65292;&#37027;&#26159;&#22240;&#20026;&#38745;&#24577;&#25991;&#20214;&#26412;&#36523;&#20063;&#26159;&#30913;&#30424;IO&#25805;&#20316;&#65292;&#22788;&#29702;&#36807;&#31243;&#19968;&#26679;&#12290;&#33267;&#20110;&#35828;&#22810;&#23569;&#19975;&#30340;&#24182;&#21457;&#36830;&#25509;&#65292;&#36825;&#20010;&#27627;&#26080;&#24847;&#20041;&#12290;&#25105;&#38543;&#25163;&#20889;&#20010;&#32593;&#32476;&#31243;&#24207;&#37117;&#33021;&#22788;&#29702;&#20960;&#19975;&#30340;&#24182;&#21457;&#65292;&#20294;&#22914;&#26524;&#22823;&#37096;&#20998;&#23458;&#25143;&#31471;&#38459;&#22622;&#22312;&#37027;&#37324;&#65292;&#23601;&#27809;&#20160;&#20040;&#20215;&#20540;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#12288;&#12288; &#20877;&#30475;&#30475;Apache&#25110;&#32773;Resin&#36825;&#31867;&#24212;&#29992;&#26381;&#21153;&#22120;&#65292;&#20043;&#25152;&#20197;&#31216;&#20182;&#20204;&#20026;&#24212;&#29992;&#26381;&#21153;&#22120;&#65292;&#26159;&#22240;&#20026;&#20182;&#20204;&#30495;&#30340;&#35201;&#36305;&#20855;&#20307;&#30340;&#19994;&#21153;&#24212;&#29992;&#65292;&#22914;&#31185;&#23398;&#35745;&#31639;&#12289;&#22270;&#24418;&#22270;&#20687;&#12289;&#25968;&#25454;&#24211;&#35835;&#20889;&#31561;&#12290;&#23427;&#20204;&#24456;&#21487;&#33021;&#26159;CPU&#23494;&#38598;&#22411;&#30340;&#26381;&#21153;&#65292;&#20107;&#20214;&#39537;&#21160;&#24182;&#19981;&#21512;&#36866;&#12290;&#20363;&#22914;&#19968;&#20010;&#35745;&#31639;&#32791;&#26102;2&#31186;&#65292;&#37027;&#20040;&#36825;2&#31186;&#23601;&#26159;&#23436;&#20840;&#38459;&#22622;&#30340;&#65292;&#20160;&#20040;event&#37117;&#27809;&#29992;&#12290;&#24819;&#24819;MySQL&#22914;&#26524;&#25913;&#25104;&#20107;&#20214;&#39537;&#21160;&#20250;&#24590;&#20040;&#26679;&#65292;&#19968;&#20010;&#22823;&#22411;&#30340;join&#25110;sort&#23601;&#20250;&#38459;&#22622;&#20303;&#25152;&#26377;&#23458;&#25143;&#31471;&#12290;&#36825;&#20010;&#26102;&#20505;&#22810;&#36827;&#31243;&#25110;&#32447;&#31243;&#23601;&#20307;&#29616;&#20986;&#20248;&#21183;&#65292;&#27599;&#20010;&#36827;&#31243;&#21508;&#24178;&#21508;&#30340;&#20107;&#65292;&#20114;&#19981;&#38459;&#22622;&#21644;&#24178;&#25200;&#12290;&#24403;&#28982;&#65292;&#29616;&#20195;CPU&#36234;&#26469;&#36234;&#24555;&#65292;&#21333;&#20010;&#35745;&#31639;&#38459;&#22622;&#30340;&#26102;&#38388;&#21487;&#33021;&#24456;&#23567;&#65292;&#20294;&#21482;&#35201;&#26377;&#38459;&#22622;&#65292;&#20107;&#20214;&#32534;&#31243;&#23601;&#27627;&#26080;&#20248;&#21183;&#12290;&#25152;&#20197;&#36827;&#31243;&#12289;&#32447;&#31243;&#36825;&#31867;&#25216;&#26415;&#65292;&#24182;&#19981;&#20250;&#28040;&#22833;&#65292;&#32780;&#26159;&#19982;&#20107;&#20214;&#26426;&#21046;&#30456;&#36741;&#30456;&#25104;&#65292;&#38271;&#26399;&#23384;&#22312;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#12288;&#12288; &#24635;&#32467;&#20043;&#65292;&#20107;&#20214;&#39537;&#21160;&#36866;&#21512;&#20110;IO&#23494;&#38598;&#22411;&#26381;&#21153;&#65292;&#22810;&#36827;&#31243;&#25110;&#32447;&#31243;&#36866;&#21512;&#20110;CPU&#23494;&#38598;&#22411;&#26381;&#21153;&#65292;&#23427;&#20204;&#21508;&#26377;&#21508;&#30340;&#20248;&#21183;&#65292;&#24182;&#19981;&#23384;&#22312;&#35841;&#21462;&#20195;&#35841;&#30340;&#20542;&#21521;&#12290;&#20877;&#30450;&#30446;&#30340;&#35328;&#20043;Nginx&#21487;&#20197;&#21462;&#20195;Apache&#30340;&#65292;&#35813;&#22909;&#22909;&#21453;&#24605;&#20102;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389275135399" FOLDED="true" LINK="http://www.linuxidc.com/Linux/2012-09/71243.htm" MODIFIED="1389275190124" TEXT="Nginx&#x6e90;&#x7801;&#x5206;&#x6790;&#x4e4b;&#x8bbe;&#x8ba1;&#x4e4b;&#x7f8e;">
<node CREATED="1389275146855" MODIFIED="1389275156936">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22312;&#36825;&#37324;&#21521;nginx&#30340;&#20316;&#32773;Igor Sysoev&#33268;&#25964;&#65292;&#20182;&#24320;&#21457;&#20102;&#19968;&#20010;&#22914;&#27492;&#20255;&#22823;&#30340;&#20316;&#21697;&#12290; &#27627;&#19981;&#22840;&#24352;&#30340;&#35828;&#65292;nginx&#24050;&#32463;&#23637;&#29616;&#20102;&#19968;&#20010;&#25104;&#21151;&#30340;&#39033;&#30446;&#20195;&#30721;&#26159;&#24212;&#35813;&#22914;&#20309;&#26550;&#26500;&#30340;&#20102;&#12290; &#26412;&#25991;&#23558;&#35797;&#22270;&#19982;&#35835;&#32773;&#20998;&#20139;&#36825;&#37324;&#38754;&#30340;&#35774;&#35745;&#20043;&#32654;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#22823;&#21315;&#19990;&#30028;&#65292;&#20219;&#20309;&#19996;&#35199;&#37117;&#26377;&#20849;&#36890;&#20043;&#22788;&#12290;&#24403;&#25105;&#20204;&#35752;&#35770;&#19968;&#20010;&#19996;&#35199;&#26102;&#65292;&#39318;&#20808;&#35201;&#32473;&#23427;&#23450;&#20041;&#20010;&#36793;&#30028;&#65292; &#22312;&#36825;&#36793;&#30028;&#37324;&#26377;&#20004;&#20010;&#19996;&#35199;&#65306;&#20869;&#26680;&#65288;Kernel&#65289;&#21644;&#29992;&#25143;&#65288;User&#65289;&#12290;nginx&#20316;&#20026;http&#26381;&#21153;&#22120;&#65288;&#20854;&#23454;&#36828;&#19981;&#27490;&#65289;&#65292;&#25105;&#20204;&#32473;&#23427;&#23450;&#20041;&#36793;&#30028;&#65306;&#23454;&#29616;http&#26381;&#21153;&#22120;&#25552;&#20379;&#26381;&#21153;&#21151;&#33021;&#12290;&#39033;&#30446;&#21517;&#31216;&#20026;nginx&#65292;&#20195;&#21495;&#65288;&#25110;&#31616;&#31216;&#65289;&#20026;ngx&#65292;&#21069;&#32512;&#20026;ngx_&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#19968;&#12289;&#19968;&#20999;&#20174;&#21629;&#21517;&#35848;&#36215;
    </p>
    <p>
      &#22914;&#26524;&#26377;&#20154;&#35748;&#20026;&#19981;&#20855;&#21487;&#35835;&#24615;&#30340;&#20195;&#30721;&#26159;&#21487;&#25509;&#21463;&#30340;&#65292;&#37027;&#20182;&#23601;&#26159;&#20010;'&#22825;&#25165;'&#12290;
    </p>
    <p>
      &#21018;&#25552;&#21040;&#20219;&#20309;&#19996;&#35199;&#22312;&#25105;&#20204;&#35752;&#35770;&#30340;&#36793;&#30028;&#37324;&#65292;&#37117;&#26377;&#20004;&#20010;&#19996;&#35199;&#65306;&#20869;&#26680;(Kernel)&#21644;&#29992;&#25143;(User)&#12290; Kernel&#20316;&#20026;&#22522;&#30784;&#35774;&#26045;&#23384;&#22312;&#65292;&#22825;&#29983;&#23384;&#22312;&#65292;User&#21017;&#26159;&#30721;&#20892;&#33258;&#23450;&#20041;&#24182;&#21019;&#36896;&#20986;&#26469;&#30340;&#12290; &#27604;&#22914;&#20989;&#25968; printf&#65292;&#36825;&#20010;&#26159;Kernel&#30340;&#19968;&#37096;&#20998;&#12290;ngx_write_console&#26159;nginx&#37324;&#33258;&#23450;&#20041;&#30340;&#19968;&#20010;&#20989;&#25968;&#12290; Kernel&#21644;User&#30340;&#19996;&#35199;&#19968;&#23450;&#35201;&#21306;&#20998;&#65292;&#36825;&#38750;&#24120;&#26377;&#21033;&#20110;&#25552;&#39640;&#20195;&#30721;&#30340;&#21487;&#35835;&#24615;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#22914;&#20309;&#21306;&#20998;&#21602;&#65311; &#23601;&#26159;&#32473;User&#30340;&#19996;&#35199;&#21152;&#19978;&#39033;&#30446;&#30340;&#21069;&#32512;ngx_&#12290;&#20026;&#20160;&#20040;&#36825;&#26679;&#35774;&#35745;&#21602;&#65311;&#27604;&#22914;log_error&#65292;&#36825;&#20989;&#25968;&#33021;&#30830;&#35748;&#26159;C&#25552;&#20379;&#30340;&#65292;&#36824;&#26159;&#33258;&#24049;&#33258;&#23450;&#20041;&#30340;&#21602;&#65311;&#20294;&#26159;&#65292;&#25442;&#25104; ngx_log_error&#65292;&#19968;&#30446;&#20102;&#28982;&#65292;&#32943;&#23450;&#26159;nginx&#28304;&#30721;&#37324;&#30340;&#19968;&#20010;&#33258;&#23450;&#20041;&#30340;&#20989;&#25968;&#12290;
    </p>
    <p>
      &#25152;&#26377;&#30340;&#25509;&#21475;&#65288;&#20840;&#23616;&#21644;&#38745;&#24577;&#20989;&#25968;&#65292;&#20840;&#23616;&#21644;&#38745;&#24577;&#21464;&#37327;&#65292;&#33258;&#23450;&#20041;&#31867;&#22411;&#65289;&#24212;&#35813;&#36981;&#23432;&#36825;&#19968;&#21407;&#21017;&#12290;&#22312;nginx&#37324;&#65292;&#33258;&#23450;&#20041;&#32467;&#26500;&#20307;&#30475;&#36215;&#26469;&#38750;&#24120;&#33298;&#26381;&#65292;&#27604;&#22914; ngx_command_t&#65292;t&#26159;typedef&#30340;&#20195;&#21495;&#12290;struct: command vs struct: ngx_command_t&#65292;&#24744;&#35273;&#24471;&#21602;&#65311;&#22909;&#30340;&#21629;&#21517;&#24212;&#35813;&#26159;&#22312;&#22836;&#33041;&#37324;&#19981;&#20551;&#24605;&#32034;&#30340;&#23601;&#30452;&#21462;&#20854;&#24847;&#65292;&#32780;&#19981;&#29992;&#20877;&#32463;&#36807;&#19968;&#27425;&#26234;&#21830;&#36816;&#31639;&#65292;&#22836;&#33041;&#39118;&#26292;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#20108;&#12289;&#27169;&#22359;&#21270;&#24605;&#24819;
    </p>
    <p>
      nginx&#30340;&#25972;&#20010;&#20195;&#30721;&#20687;&#27969;&#27700;&#32447;&#19968;&#26679;&#24037;&#20316;&#30528;&#65292;&#36825;&#27969;&#27700;&#32447;&#19978;&#24067;&#28385;&#30528;&#21508;&#31181;&#27169;&#22359;&#65292;&#20182;&#20204;&#21327;&#21516;&#24037;&#20316;&#65292;&#20849;&#21516;&#23436;&#25104;&#25552;&#20379;&#26381;&#21153;&#12290;&#27604;&#22914; ngx_core_module, ngx_epoll_module, ngx_http_core_module, ngx_http_static_module&#31561;&#65292;ngx_string.h(c), ngx_times.h(c)&#65292;&#22312;C&#19990;&#30028;&#37324;&#65292;&#25991;&#20214;&#21363;&#27169;&#22359;&#65292;&#20320;&#21487;&#20197;&#24403;&#23427;&#26159;&#22522;&#30784;&#35774;&#26045;&#65292;&#25110;&#24037;&#20855;&#65292;&#21482;&#26159;&#26377;&#30340;&#25991;&#20214;&#26377;&#21464;&#37327;&#65292;&#30456;&#24403;&#20110;&#25991;&#20214;&#35775;&#38382;&#20837;&#21475;&#65292;&#27604;&#22914; ngx_http_core_module.h(c)&#37324;&#30340;ngx_http_core_module&#20840;&#23616;&#21464;&#37327;&#12290;
    </p>
    <p>
      &#27809;&#26377;&#20219;&#20309;&#29420;&#31435;&#23384;&#22312;&#65292;&#19981;&#36319;&#20219;&#20309;&#20154;&#25171;&#20132;&#36947;&#30340;&#27169;&#22359;&#65292;&#22240;&#20026;&#37027;&#26679;&#65292;&#23427;&#23601;&#27809;&#26377;&#23384;&#22312;&#30340;&#24847;&#20041;&#65292;&#25152;&#20197;&#27169;&#22359;&#26159;&#26377;&#20381;&#36182;&#20851;&#31995;&#30340;&#12290; &#27604;&#22914;ngx_event.h(c)&#20381;&#36182;&#20110; ngx_string.h&#65292;&#35841;&#32500;&#25252;&#30528;&#36825;&#20123;&#20851;&#31995;&#21602;&#65292;Makefile&#12290;&#25152;&#20197;&#33021;&#25484;&#25569;&#19968;&#20010;&#39033;&#30446;&#30340;&#20154;&#65292;&#32943;&#23450;&#33021;&#25163;&#20889;Makefile&#25991;&#20214;&#12290;&#27599;&#20010;&#27169;&#22359;&#26377;&#20986;&#22330;&#39034;&#24207;&#30340;&#65292;&#30452;&#21040;main&#20989;&#25968;return&#12290;nginx&#20316;&#32773;&#32473;&#27169;&#22359;&#35774;&#35745;&#20102;&#19968;&#20010;&#31867;&#22411;&#25104;&#21592;&#65292;&#21487;&#20197;&#26159;core, event, http&#30340;&#19968;&#31181;&#65292;&#24456;&#26126;&#26174;&#30340;&#20250;&#26159;&#36825;&#26159; core(&#26680;&#24515;&#27169;&#22359;) -&gt; event(&#20107;&#20214;&#26426;&#21046;) -&gt; http(http&#19994;&#21153;&#22788;&#29702;) &#36825;&#20040;&#19968;&#20010;&#27969;&#31243;&#12290;&#21518;&#38754;&#30340;&#20381;&#36182;&#21069;&#38754;&#30340;&#65292;&#38750;&#24120;&#26126;&#20102;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#19977;&#12289;OO&#38754;&#21521;&#23545;&#35937;
    </p>
    <p>
      &#38754;&#21521;&#23545;&#35937;&#21644;&#38754;&#21521;&#36807;&#31243;&#20043;&#20105;&#20174;&#26469;&#27809;&#20572;&#36807;&#12290;&#25105;&#19968;&#21521;&#35748;&#20026;&#26377;&#20105;&#35758;&#30340;&#35774;&#35745;&#19981;&#24212;&#35813;&#34701;&#20837;&#35821;&#35328;&#37324;&#65292;&#35821;&#35328;&#24212;&#35813;&#20551;&#35774;&#31243;&#24207;&#21592;&#33021;&#20570;&#26368;&#27491;&#30830;&#30340;&#20107;&#65292;&#32780;&#19981;&#24212;&#35813;&#21435;&#32422;&#26463;&#31243;&#24207;&#21592;&#22914;&#20309;&#29359;&#38169;&#35823;&#12290;&#27604;&#22914;goto&#26159;&#21542;&#24212;&#35813;&#23384;&#22312;&#65292;&#20840;&#23616;&#21464;&#37327;&#24212;&#35813;&#24590;&#20040;&#26679;&#12290;C&#20197;&#26368;&#31616;&#27905;&#30340;&#35821;&#27861;&#25552;&#20379;&#20102;&#31243;&#24207;&#21592;&#33021;&#31168;&#30340;&#24179;&#21488;&#12290;&#24223;&#35805;&#28857;&#21040;&#21363;&#27490;&#12290;
    </p>
    <p>
      nginx&#37324;&#26377;&#38750;&#24120;&#22810;&#30340;&#32467;&#26500;&#20307;&#65292;&#19981;&#30693;&#26576;&#22823;&#24072;&#26366;&#35828;&#31243;&#24207;&#23601;&#26159;&#31639;&#27861;+&#25968;&#25454;&#32467;&#26500;&#65292;&#36825;&#37324;&#30340;&#25968;&#25454;&#32467;&#26500;&#19981;&#20165;&#26159;&#26159;&#25968;&#32452;&#65292;&#21015;&#34920;&#65292;&#38431;&#21015;&#36825;&#20123;&#32463;&#20856;&#30340;&#65292;&#36824;&#21253;&#25324;&#29992;&#25143;&#33258;&#23450;&#20041;&#30340;&#65292;&#25110;&#23553;&#35013;&#30340;&#65292;&#25105;&#20204;&#26366;&#23427;&#20026;&#25277;&#35937;&#26159;&#19981;&#26159;&#26356;&#22909;&#21602;&#12290;&#32467;&#26500;&#20307;&#35753;&#26576;&#19994;&#21153;&#27010;&#24565;&#26356;&#20855;&#34880;&#32905;&#65292;&#27604;&#22914; ngx_listening_t, ngx_connection_t, ngx_event_t&#65292;&#38750;&#24120;&#39640;&#26126;&#30340;&#23553;&#35013;&#21644;&#21629;&#21517;&#12290;&#35835;&#36807;DDD&#20070;&#30340;&#65292;&#22914;&#26524;&#32467;&#21512;nginx&#28304;&#30721;&#21435;&#30475;&#65292;&#20250;&#21457;&#29616;OO&#26368;&#24378;&#28872;&#30340;&#34920;&#36798;&#23601;&#26159;&#25277;&#35937;&#65288;&#23553;&#35013;&#65311;&#22810;&#24577;&#65311;&#32487;&#25215;&#65311;&#65289;&#12290;
    </p>
    <p>
      &#19968;&#20010;&#32467;&#26500;&#20307;&#25110;&#31867;&#24212;&#35813;&#34920;&#36798;&#26576;&#20010;&#20027;&#39064;&#65292;&#27604;&#22914;ngx_connection_t&#25277;&#35937;&#20102;&#36830;&#25509;&#36825;&#20010;&#19994;&#21153;&#65292;&#37324;&#38754;&#30340;&#25104;&#21592;&#24212;&#35813;&#34920;&#36798;&#20004;&#31181;&#23646;&#24615;&#65306;&#26174;&#24615;&#21644;&#38544;&#24615;&#12290;&#24456;&#22810;&#20154;&#24573;&#30053;&#20102;&#38544;&#24615;&#30340;&#23646;&#24615;&#65292;&#20197; ngx_url_t &#20026;&#20363;&#65292;url&#37324;&#26377; addr, port &#36825;&#31181;&#26174;&#32780;&#26131;&#35265;&#30340;&#25104;&#21592;&#65292;&#22823;&#23478;&#37117;&#20250;&#12290;&#20294;&#26159;&#24212;&#35813;&#36824;&#21253;&#25324; err&#65292;&#36825;&#20010;&#34920;&#31034;&#65292;&#19968;&#20010;url&#35299;&#26512;&#21518;&#30340;&#32467;&#26524;&#65292;&#26159;&#19981;&#26159;&#26377;&#28857;&#20687;&#20887;&#20313;&#23383;&#27573;&#65292;&#26159;&#30340;&#65292;&#36825;&#23601;&#26159;&#38544;&#24615;&#30340;&#23646;&#24615;&#65292;&#20250;&#35753;&#25972;&#20010;&#32467;&#26500;&#20307;&#26356;&#20855;&#34920;&#36798;&#21147;&#12290;&#35835;nginx&#28304;&#30721;&#65292;&#20174;&#32467;&#26500;&#20307;&#20986;&#29616;&#30340;&#39034;&#24207;&#21435;&#29702;&#28165;&#26159;&#20010;&#22909;&#30340;&#26041;&#21521;&#12290;&#20316;&#32773;&#22312;&#35774;&#35745;&#26102;&#26497;&#20855;&#21151;&#21147;&#21644;&#32454;&#33147;&#65292;&#27604;&#22914; ngx_http_rewrite_module&#37324;&#23545;rewrite&#30340;&#22788;&#29702;&#65292;ngx_http_upstream&#37324;&#23545;upstream&#30340;&#22788;&#29702;&#12290;
    </p>
    <p>
      &#32467;&#26500;&#20307;&#20195;&#34920;&#20102;&#19994;&#21153;&#27010;&#24565;&#30340;&#19968;&#20010;&#26041;&#21521;&#65292;nginx&#22312;&#34892;&#20026;&#34920;&#29616;&#26041;&#21521;&#20063;&#35774;&#35745;&#30340;&#24456;&#31934;&#33268;&#65292;&#21487;&#20197;&#32454;&#30475;&#19979;&#26085;&#24535;&#26159;&#22914;&#20309;&#22788;&#29702;&#30340;&#65292;&#20854;&#20013;ngx_log_t&#30340;handler&#21644;ctx&#20004;&#20010;&#25104;&#21592;&#30340;&#35774;&#35745;&#12290;&#36824;&#26377;&#24456;&#26126;&#26174;&#30340;&#36131;&#20219;&#38142;&#27169;&#24335;&#65292;&#35753;&#20154;&#30524;&#21069;&#19968;&#20142;&#65292;&#21442;&#32771;ngx_http_core_run_phases
    </p>
    <p>
      
    </p>
    <p>
      &#22235;&#12289;&#29983;&#21629;&#21608;&#26399;&#37324;&#31192;&#23494;
    </p>
    <p>
      &#26377;&#20004;&#20010;&#19996;&#35199;&#26159;&#19968;&#30452;&#22312;&#25972;&#20010;&#39033;&#30446;&#20195;&#30721;&#37324;&#28216;&#33633;&#30340;&#65292;&#26085;&#24535;&#21644;&#20869;&#23384;&#27744;&#12290;&#31616;&#21333;&#30340;&#35762;&#65292;&#26377;3&#20010;&#37325;&#35201;&#27010;&#24565;&#65306;
    </p>
    <p>
      cycle&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: &#20195;&#34920;&#20102;&#25972;&#20010;&#29983;&#21629;&#21608;&#26399;&#65292;&#21482;&#35201;&#36827;&#31243;&#36824;&#22312;&#65292;&#23427;&#23601;&#19968;&#30452;&#23384;&#27963;&#12290;
    </p>
    <p>
      connection&#160;&#160;&#160;&#160;&#160;: &#20195;&#34920;&#36830;&#25509;&#30340;&#29983;&#21629;&#21608;&#26399;&#65292;&#19968;&#20010;&#23458;&#25143;&#36830;&#25509;&#36807;&#26469;&#65292;&#23427;&#23601;&#24320;&#22987;&#35806;&#29983;&#65292;&#36830;&#25509;&#32467;&#26463;&#65292;&#23427;&#23601;&#36319;&#30528;&#32456;&#32467;&#12290;
    </p>
    <p>
      request&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: &#20195;&#34920;&#35831;&#27714;&#65292;&#35831;&#27714;&#19968;&#21457;&#36807;&#26469;&#65292;&#23427;&#24320;&#22987;&#35806;&#29983;&#65292;&#35831;&#27714;&#32467;&#26463;&#65292;&#23427;&#20063;&#23601;&#28040;&#20129;&#12290;
    </p>
    <p>
      &#21487;&#33021;&#20320;&#35748;&#20026;connection&#21644;request&#24456;&#20687;&#65292;connection&#27604;request&#29983;&#21629;&#21608;&#26399;&#26356;&#38271;&#65292;request&#25346;&#20102;&#65292;connection&#19981;&#19968;&#23450;&#20250;&#25346;&#12290;keepalive&#23601;&#26159;&#26368;&#22909;&#30340;&#35777;&#26126;&#65292;&#26377;&#20102;keepalive&#65292;&#23458;&#25143;&#31471;&#21047;&#26032;&#26102;&#65292;connection&#30340;fd&#36824;&#19968;&#30452;&#20445;&#25345;&#29992;&#30528;&#65292;&#26381;&#21153;&#31471;&#30340;socket&#26159;&#19981;&#20250;close&#30340;&#12290;
    </p>
    <p>
      cycle&#26377;&#33258;&#24049;&#30340;pool&#65292;connection&#26377;&#33258;&#24049;&#30340;pool, request&#26377;&#33258;&#24049;&#30340;pool&#65292;&#38500;&#20102;cycle&#22806;&#65292;&#20854;&#20313;&#20004;&#20010;&#22312;&#28040;&#20129;&#21069;&#65292;&#35201;&#37322;&#25918;&#20869;&#23384;&#12290;
    </p>
    <p>
      log&#30340;&#34920;&#29616;&#20063;&#24456;&#27963;&#36291;&#65292;&#20174;&#26368;&#24320;&#22987;&#30340;ngx_cycle&#26377;&#33258;&#24049;&#30340;log&#65292;&#28982;&#21518;&#35774;&#32622;&#25104;&#37197;&#32622;&#25991;&#20214;&#37324;&#25351;&#23450;&#30340;error_log&#65292;&#28982;&#21518;&#20174;listen&#24320;&#22987;&#20998;&#25903;&#65292;&#27599;&#20010;listen&#33258;&#24049;&#22797;&#21046;&#19968;&#20221;log&#65292;&#28982;&#21518;listen connection&#29992;&#20102;listen&#23545;&#24212;&#30340;fd, &#32487;&#32493;&#20877;&#32473; connection&#30340;&#20004;&#20010;event: rev, wev&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#20116;&#12289;&#37197;&#32622;&#25991;&#20214;&#20026;&#20309;&#23384;&#22312;
    </p>
    <p>
      &#26159;&#20808;&#26377;&#39033;&#30446;&#20195;&#30721;&#65292;&#36824;&#26159;&#20808;&#26377;&#37197;&#32622;&#25991;&#20214;&#21602;&#65311;&#25105;&#35273;&#24471;&#65292;&#37197;&#32622;&#25991;&#20214;&#26159;&#22240;&#39033;&#30446;&#20195;&#30721;&#23384;&#22312;&#32780;&#23384;&#22312;&#30340;&#65292;&#36825;&#26679;&#35762;&#20284;&#20046;&#26377;&#28857;&#31354;&#30333;&#12290;
    </p>
    <p>
      &#39033;&#30446;&#20043;&#21021;&#65292;&#20195;&#30721;&#26159;&#21487;&#20197;&#30828;&#32534;&#30721;&#30340;&#65292;&#27604;&#22914;&#23454;&#29616;&#23432;&#25252;&#36827;&#31243;&#12290;&#20294;&#26159;&#21602;&#65311;&#36825;&#26679;&#32570;&#23569;&#28789;&#27963;&#24615;&#65292;&#25152;&#20197;&#29992;&#37197;&#32622;&#25991;&#20214;&#37324;&#30340;&#37197;&#32622;&#36873;&#39033;&#25511;&#21046;&#36825;&#20010;&#34892;&#20026;&#65292;&#20063;&#27491;&#22240;&#20026;&#22914;&#27492;&#65292;&#37197;&#32622;&#36873;&#39033;&#19968;&#23450;&#35201;&#20381;&#38468;&#65292;&#25346;&#38057;&#20110;&#26576;&#20010;&#27169;&#22359;&#65292;&#28982;&#21518;&#23427;&#30340;&#20540;&#24212;&#35813;&#35299;&#26512;&#21040;&#36825;&#20010;&#27169;&#22359;&#25658;&#24102;&#30340;&#37197;&#32622;&#32467;&#26500;&#20307;&#12290;
    </p>
    <p>
      &#29616;&#22312;&#36824;&#26159;&#21333;&#19968;&#30340;&#34892;&#20026;&#65292;&#30001;&#26680;&#24515;&#34892;&#20026;&#24341;&#36215;&#30340;&#12290;&#20294;&#26159;&#21040;&#20102;&#29992;&#25143;&#20915;&#23450;&#34892;&#20026;&#30340;&#26102;&#20505;&#65292;&#37197;&#32622;&#25991;&#20214;&#24212;&#35813;&#20986;&#29616;&#20998;&#25903;&#12290;&#20320;&#24819;&#21040;server, location&#20102;&#21527;&#65292;&#19981;&#21516;&#30340;server&#26377;&#19981;&#21516;&#30340;&#37197;&#32622;&#65292;&#36825;&#20063;&#26159;&#34394;&#25311;&#20027;&#26426;&#30340;&#23454;&#29616;&#26426;&#21046;&#12290;
    </p>
    <p>
      &#36825;&#20010;&#20998;&#25903;&#38750;&#24120;&#30340;&#37325;&#35201;&#65292;&#21407;&#26469;&#30340;ngx_cycle&#26377;&#20010;void&#160;&#160;****conf_ctx;&#24456;&#37239;&#21543;&#65292;4&#23618;&#25351;&#38024;&#12290;&#33719;&#21462;&#37197;&#32622;&#26159;&#36825;&#26679;&#30340;&#65306;
    </p>
    <p>
      ccf = (ngx_core_conf_t *) ngx_get_conf(cycle-&gt;conf_ctx, ngx_core_module);
    </p>
    <p>
      &#20854;&#20013;&#65292;ngx_get_conf&#36825;&#26679;&#39044;&#23450;&#20041;&#65306;
    </p>
    <p>
      #define ngx_get_conf(conf_ctx, module)&#160;&#160;conf_ctx[module.index]
    </p>
    <p>
      &#20294;&#26159;&#21040;&#20102;&#20998;&#25903;&#36825;&#37324;&#65292;&#20174;cycle-&gt;conf_ctx&#21464;&#25104;&#20102;r
    </p>
    <p>
      cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
    </p>
    <p>
      ngx_http_get_module_main_conf&#36825;&#26679;&#23450;&#20041;&#65306;
    </p>
    <p>
      #define ngx_http_get_module_main_conf(r, module)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;\
    </p>
    <p>
      &#160;&#160;&#160;&#160;(r)-&gt;main_conf[module.ctx_index]
    </p>
    <p>
      &#24403;&#20998;&#26512;&#23436;&#29992;&#25143;&#30340;&#35831;&#27714;&#34892;&#20026;&#21518;&#65292;&#21448;&#20250;&#23558;&#20998;&#26512;&#23436;&#30340;&#37197;&#32622;&#23450;&#19979;&#26469;&#65292;&#27604;&#22914;&#34394;&#25311;&#20027;&#26426;&#22914;&#20309;&#23454;&#29616;&#30340;&#65306;
    </p>
    <p>
      ngx_http_find_virtual_server(r, r-&gt;headers_in.server.data, r-&gt;headers_in.server.len) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;cscf = ngx_hash_find_combined(&amp;r-&gt;virtual_names-&gt;names,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_hash_key(host, len), host, len);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (cscf) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r-&gt;srv_conf = cscf-&gt;ctx-&gt;srv_conf;&#160;&#160;// &#20197;&#21518;&#30452;&#25509;&#25214;r&#35201;src_conf&#33719;&#21462;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r-&gt;loc_conf = cscf-&gt;ctx-&gt;loc_conf;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389255436938" FOLDED="true" LINK="http://blog.sina.com.cn/s/blog_996d3ca10100w0ba.html" MODIFIED="1389447897451" TEXT="nginx&#x591a;&#x8fdb;&#x7a0b;&#x6a21;&#x578b;&#x4e4b;&#x70ed;&#x4ee3;&#x7801;&#x5e73;&#x6ed1;&#x5347;&#x7ea7;">
<node BACKGROUND_COLOR="#ffff00" CREATED="1389255459711" MODIFIED="1389256201729">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#24179;&#28369;&#21319;&#32423;&#30340;&#20027;&#35201;&#36807;&#31243;&#21253;&#25324;&#19968;&#19979;&#27493;&#39588;&#65306;
    </p>
    <p>
      1. &#26032;&#20195;&#30721;make&#25191;&#34892;&#23436;&#21518;&#65292;&#36825;&#37324;&#19981;&#29992;&#22312;make install &#20102;&#65292;&#25509;&#19979;&#26469;&#37325;&#21517;/sbin/nginx&#20026;nginx.old
    </p>
    <p>
      # mv /usr/local/nginx/sbin/nginx/usr/local/nginx/sbin/nginx.old
    </p>
    <p>
      
    </p>
    <p>
      2. &#22797;&#21046;&#32534;&#35793;&#21518;objs&#30446;&#24405;&#19979;&#30340;nginx&#25991;&#20214;&#21040;nginx&#30340;&#23433;&#35013;&#30446;&#24405;sbin/&#19979;
    </p>
    <p>
      # cp objs/nginx /usr/local/nginx/sbin/
    </p>
    <p>
      
    </p>
    <p>
      3. &#35753;nginx&#25226;nginx.pid&#25991;&#20214;&#20462;&#25913;&#25104;nginx.pid.oldbin&#65292;&#38543;&#21363;&#21551;&#21160;nginx&#65292;&#23454;&#29616;&#19981;&#38388;&#26029;
    </p>
    <p>
      # kill -USR2 `cat/usr/local/nginx/nginx.pid`
    </p>
    <p>
      # kill -QUIT `cat/usr/local/nginx/nginx.pid.oldbin`
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#24403;&#28982;&#65292;&#23448;&#26041;&#19978;&#26377;&#20010;&#26356;&#21152;&#35814;&#32454;&#30340;&#36807;&#31243;&#65292;&#21253;&#25324;&#20102;&#21462;&#28040;&#21319;&#32423;&#12289;&#26032;&#26087;&#20195;&#30721;&#21516;&#26102;&#20445;&#30041;&#31561;&#25805;&#20316;&#65292;&#36825;&#37324;&#25105;&#20204;&#20027;&#35201;&#30475;&#19978;&#36848;&#32473;&#20986;&#31616;&#21333;&#21319;&#32423;&#30340;&#23454;&#29616;&#12290;
    </p>
    <p>
      http://wiki.nginx.org/ChsCommandLine
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#36825;&#37324;&#25105;&#20204;&#20027;&#35201;&#30475;&#27493;&#39588;3&#65306;
    </p>
    <p>
      
    </p>
    <p>
      nginx&#37324;&#38754;&#35762;USR2&#20449;&#21495;&#23450;&#20041;&#25104;NGX_CHANGEBIN_SIGNAL&#12290;
    </p>
    <p>
      #define NGX_CHANGEBIN_SIGNAL&#160;&#160;&#160;&#160;&#160;USR2
    </p>
    <p>
      
    </p>
    <p>
      &#23427;&#30340;&#22788;&#29702;&#20989;&#25968;&#65292;&#36319;&#20854;&#20182;&#30340;&#19968;&#26679;&#20449;&#21495;&#19968;&#26679;&#65292;&#20351;&#29992;&#20102;<font color="#f40707"><b>ngx_signal_handler</b></font>&#12290;
    </p>
    <p>
      &#36825;&#20010;&#20989;&#25968;&#22312;&#37197;&#32622;&#28909;&#21152;&#36733;&#30340;&#37027;&#31687;&#25991;&#31456;&#37324;&#24050;&#32463;&#25509;&#35302;&#36807;&#20102;&#65292;&#25105;&#20204;&#22312;&#25191;&#34892;kill -USR2 `cat /usr/local/nginx/nginx.pid`&#26102;&#65292;master&#36827;&#31243;&#20250;&#24471;&#21040;&#20449;&#21495;&#65292;&#22240;&#20026;pid&#25991;&#20214;&#20013;&#35760;&#24405;&#20102;master&#36827;&#31243;&#30340;pid&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// ngx_process&#36825;&#20010;&#21464;&#37327;&#35760;&#24405;&#20102;&#25509;&#25910;&#21040;&#20449;&#21495;&#30340;&#36827;&#31243;&#31867;&#22411;&#65292;&#36825;&#37324;&#24456;&#26126;&#26174;&#26159;master process(&#22240;&#20026;&#36890;&#36807;master&#30340;pid&#21457;&#20986;&#30340;&#20449;&#21495;)&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;switch (ngx_process) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case NGX_PROCESS_MASTER:&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case NGX_PROCESS_SINGLE:&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;switch (signo) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#8230;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(<font color="#f00b0b"><b>NGX_CHANGEBIN_SIGNAL</b></font>):&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (getppid() &gt; 1 || ngx_new_binary &gt; 0) {&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, ignoring&quot;;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ignore = 1;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#26368;&#37325;&#35201;&#30340;&#25805;&#20316;&#22312;&#36825;&#37324;&#65292;&#36890;&#36807;&#23558;ngx_change_binary&#32622;&#20026;1&#65292;&#26469;&#21578;&#35785;master&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#24212;&#35813;&#21435;&#21551;&#21160;&#19968;&#20010;&#26032;&#30340;&#23454;&#20363;&#20102;&#65292;&#20063;&#23601;&#26159;&#35828;&#65292;master&#37324;&#38754;&#22312;&#26816;&#27979;&#21040;&#36825;&#20010;&#21464;&#37327;&#20026;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// 1&#26102;&#65292;&#23601;&#20250;&#20570;&#26032;nginx&#23454;&#20363;&#30340;&#29983;&#25104;&#24037;&#20316;&#20102;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_change_binary = 1;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, changing binary&quot;;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;&#160;&#160;&#160;&#160;&#160;&#160;&#8230;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#26032;&#23454;&#20363;&#30340;&#20135;&#29983;&#22312;ngx_master_process_cycle&#20989;&#25968;&#37324;&#22788;&#29702;&#65292;&#36825;&#20010;&#20989;&#25968;&#22823;&#23478;&#24212;&#35813;&#24456;&#29087;&#24713;&#65292;&#23427;&#20027;&#35201;&#26159;&#22312;&#19968;&#20010;for&#24490;&#29615;&#37324;&#26469;&#30417;&#25511;&#21508;&#31181;&#20449;&#21495;&#21644;&#29366;&#24577;&#65292;&#26469;&#25511;&#21046;&#31995;&#32479;&#21644;&#24037;&#20316;&#36827;&#31243;&#12290;
    </p>
    <p>
      for ( ;; ) {&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#8230;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;//&#19978;&#38754;&#24050;&#32463;&#25552;&#36807;&#65292;USR2&#30340;&#20449;&#21495;&#22788;&#29702;&#37324;&#38754;&#65292;&#20250;&#23558;ngx_change_binary&#32622;&#20026;1&#65292;&#36825;&#26679;&#22312;master&#24490;&#29615;&#37324;&#65292;&#23601;&#21487;&#20197;&#20570;&#22788;&#29702;&#20102;&#12290;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(ngx_change_binary) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_change_binary = 0;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_new_binary = ngx_exec_new_binary(cycle,ngx_argv);&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#8230;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160; &#22312;&#20989;&#25968;ngx_exec_new_binary&#37324;&#38754;&#65292;&#20027;&#35201;&#30340;&#24037;&#20316;&#23601;&#26159;&#23558;listen&#30340;fd&#65292;&#25918;&#21040;&#29615;&#22659;&#21464;&#37327;&#20013;&#65292;&#26684;&#24335;&#20026;&#65306;NGINX=fd1;fd2;fd3&#8230;&#8230;&#65288;&#36825;&#20010;&#21518;&#38754;&#35762;&#65281;&#65289;&#65292;&#28982;&#21518;&#23558;nginx.pid&#25913;&#25104;&#20026;nginx.pid.oldbin&#65292;&#26368;&#21518;&#23601;&#26159;&#36890;&#36807;ngx_execute&#65292;&#20854;&#23454;&#23601;&#26159;execve&#26469;&#21551;&#21160;&#26032;&#23454;&#20363;&#12290;&#12290;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#36825;&#37324;&#26377;&#20010;&#22320;&#26041;&#35201;&#25552;&#19968;&#19979;&#65292;&#23601;&#26159;&#19978;&#38754;&#25552;&#21040;&#30340;listen fd&#65292;&#23427;&#34987;&#25918;&#21040;&#20102;&#29615;&#22659;&#21464;&#37327;&#20013;&#65292;&#30446;&#30340;&#23601;&#26159;&#22312;&#26032;&#23454;&#20363;&#21551;&#21160;&#30340;&#36807;&#31243;&#20013;&#65292;&#36890;&#36807;ngx_add_inherited_sockets&#26469;&#25343;&#21040;&#20043;&#21069;&#30340;listen fd&#65292;&#37325;&#26032;&#20351;&#29992;&#65292;&#20043;&#25152;&#20197;&#35201;&#36825;&#26679;&#65292;&#26159;&#22240;&#20026;&#26032;&#30340;&#23454;&#20363;&#26159;&#36890;&#36807;fork+execve&#26469;&#20135;&#29983;&#65292;&#19981;&#26159;&#36319;&#31616;&#21333;fork&#20043;&#21518;&#23376;&#36827;&#31243;&#37027;&#26679;&#30452;&#25509;&#23601;&#21487;&#20197;&#25343;&#21040;&#36825;&#20010;&#29238;&#36827;&#31243;&#30340;listen fd&#26469;&#29992;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#22312;&#27493;&#39588;3&#20013;&#65292;&#25105;&#20204;&#36890;&#36807;&#21457;&#36865;QUIT&#20449;&#21495;&#23558;&#26087;&#30340;&#36827;&#31243;&#26469;&#20851;&#38381;&#12290;&#28041;&#21450;&#30340;&#27969;&#31243;&#22914;&#19979;&#65306;
    </p>
    <p>
      // &#25910;&#21040;SIGCHLD&#65292;&#24847;&#21619;&#30528;&#23376;&#36827;&#31243;(&#21363;worker &#36827;&#31243;)&#65292;&#20250;&#23558;ngx_reap&#32622;1,&#36825;&#26679;&#22312;master&#20013;&#21487;&#20197;&#160;
    </p>
    <p>
      // &#26816;&#27979;&#21040;&#36825;&#20010;&#21464;&#37327;&#30340;&#20540;&#65292;&#35753;&#21518;&#37325;&#21551;&#23376;&#36827;&#31243;&#12290;&#12290;&#12290;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_reap) {&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reap = 0;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;live = ngx_reap_children(cycle);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// live&#20026;1&#34920;&#31034;&#26377;&#23376;&#36827;&#31243;&#22312;&#36816;&#34892;&#65292;&#20026;0&#20195;&#34920;&#65292;&#25152;&#26377;&#23376;&#36827;&#31243;&#37117;&#36864;&#20986;&#20102;&#65292;&#36825;&#26159;&#22914;&#26524;&#26377;&#36864;&#20986;&#20043;&#31867;&#30340;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#20449;&#21495;&#65292;&#37027;&#20040;&#23601;&#30452;&#25509;exit&#36864;&#20986;&#20102;&#12290;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (!live &amp;&amp; (ngx_terminate ||ngx_quit)) {&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_master_process_exit(cycle);&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#8230;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#27491;&#24335;&#22788;&#29702;QUIT&#20449;&#21495;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_quit) {&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#36890;&#30693;worker&#36827;&#31243;&#65292;&#22788;&#29702;&#23436;&#33258;&#24049;&#30340;&#20107;&#21153;&#20043;&#21518;&#33258;&#21160;&#36864;&#20986;&#12290;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160; ngx_signal_worker_processes(cycle,ngx_signal_value(NGX_SHUTDOWN_SIGNAL)); &#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20043;&#21518;&#30340;&#22788;&#29702;&#23601;&#26159;&#20851;&#38381;listenfd&#65292;&#19981;&#22312;&#30417;&#21548;&#36830;&#25509;&#12290;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#8230;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#36825;&#37324;&#31616;&#21333;&#35828;&#19979;worker&#36827;&#31243;&#22312;&#25509;&#25910;&#21040;&#29238;&#36827;&#31243;&#36890;&#30693;&#30340;NGX_SHUTDOWN_SIGNAL&#20250;&#65292;&#23558;ngx_quit&#32622;1&#65292;&#24403;&#28982;&#23545;&#20110;ngx_quit&#30340;&#22788;&#29702;&#65292;&#22312;worker&#21644;master&#26159;&#19981;&#19968;&#26679;&#30340;&#65292;&#38656;&#35201;&#21306;&#20998;&#65292;&#36825;&#20063;&#23601;&#26159;ngx_process&#31867;&#22411;&#30340;&#20316;&#29992;&#21862;&#12290;&#21518;&#38754;worker&#36827;&#31243;&#20250;&#20572;&#27490;&#20851;&#38381;&#32487;&#25215;&#30340;listenfd&#65292;&#21516;&#26102;accpet&#26032;&#36830;&#25509;&#30340;&#34892;&#20026;&#20063;&#28040;&#22833;&#20102;&#65292;&#28982;&#21518;&#21602;&#65292;&#36827;&#31243;&#20250;&#31561;&#21040;&#24050;&#32463;&#8221;hold&#8221;&#30340;&#36830;&#25509;&#20840;&#37096;&#22788;&#29702;&#20043;&#21518;&#20877;&#36864;&#20986;&#65292;&#20570;&#21040;&#21892;&#22987;&#21892;&#32456;&#65281;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1389073579240" MODIFIED="1389238336566" POSITION="right" TEXT="&#x53c2;&#x8003;">
<node CREATED="1389073591719" LINK="http://blog.csdn.net/kenbinzhang?viewmode=contents " MODIFIED="1389073624444" TEXT="&#x5543;&#x997c;&#x7684;&#x6280;&#x672f;&#x535a;&#x5ba2;"/>
<node CREATED="1389239945627" LINK="http://blog.csdn.net/Marcky/article/category/747446" MODIFIED="1389447897452" TEXT="Marcky">
<node CREATED="1390607177749" FOLDED="true" MODIFIED="1391736967677" TEXT="Nginx&#x5b9a;&#x65f6;&#x5668;&#x7684;&#x5b9e;&#x73b0;&#x53ca;&#x5b9a;&#x65f6;&#x4e8b;&#x4ef6;&#x7684;&#x4f7f;&#x7528; ">
<node CREATED="1390607208818" MODIFIED="1390607218966">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      nginx&#25552;&#20379;&#19968;&#22871;&#39640;&#25928;&#30340;&#23450;&#26102;&#22120;&#23454;&#29616;&#65292;&#38500;&#20102;nginx&#26680;&#24515;&#33021;&#22815;&#20351;&#29992;&#23450;&#26102;&#22120;&#20197;&#22806;&#65292;&#25105;&#20204;&#22312;&#36827;&#34892;&#27169;&#22359;&#24320;&#21457;&#30340;&#26102;&#20505;&#20063;&#21487;&#20197;&#20351;&#29992;&#23450;&#26102;&#22120;&#26469;&#23436;&#25104;&#19968;&#20123;&#23450;&#26102;&#25191;&#34892;&#30340;&#20219;&#21153;&#12290;nginx&#23450;&#26102;&#22120;&#23454;&#29616;&#30340;&#26680;&#24515;&#26159;&#20351;&#29992;&#19968;&#26869;&#32418;&#40657;&#26641;&#26469;&#23384;&#20648;&#21508;&#20010;&#23450;&#26102;&#20107;&#20214;&#65292;&#27599;&#27425;&#24490;&#29615;&#30340;&#26102;&#20505;&#23601;&#20174;&#36825;&#26869;&#26641;&#37324;&#25214;&#20986;&#36229;&#26102;&#30340;&#20107;&#20214;&#65292;&#28982;&#21518;&#19968;&#19968;&#35302;&#21457;&#65292;&#23436;&#25104;&#23450;&#26102;&#20219;&#21153;&#25805;&#20316;&#12290;&#19979;&#38754;&#31616;&#21333;&#30340;&#25551;&#36848;&#19968;&#19979;nginx&#22312;&#23454;&#29616;&#23450;&#26102;&#22120;&#26102;&#30340;&#20960;&#20010;&#20851;&#38190;&#28857;&#12290;&#26412;&#25991;&#26159;&#22522;&#20110;linux&#30340;epoll&#26469;&#25551;&#36848;&#30340;&#23450;&#26102;&#22120;&#23454;&#29616;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#23450;&#26102;&#22120;&#21021;&#22987;&#21270;
    </p>
    <p>
      
    </p>
    <p>
      nginx&#38459;&#22622;&#20110;epoll_wait&#26102;&#21487;&#33021;&#34987;3&#31867;&#20107;&#20214;&#21796;&#37266;&#65292;&#20998;&#21035;&#26159;&#26377;&#35835;&#20889;&#20107;&#20214;&#21457;&#29983;&#12289;&#31561;&#24453;&#26102;&#38388;&#36229;&#26102;&#21644;&#20449;&#21495;&#20013;&#26029;&#12290;&#31561;&#24453;&#36229;&#26102;&#21644;&#20449;&#21495;&#20013;&#26029;&#37117;&#26159;&#19982;&#23450;&#26102;&#22120;&#23454;&#29616;&#30456;&#20851;&#30340;&#65292;&#23427;&#20204;&#30340;&#21021;&#22987;&#21270;&#21457;&#29983;&#22312;ngx_event_core_module&#27169;&#22359;&#30340;&#36827;&#31243;&#21021;&#22987;&#21270;&#38454;&#27573;&#65292;&#20195;&#30721;&#27573;&#22914;&#19979;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      [cpp] view plaincopyprint?
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_event_timer_init(cycle-&gt;log) == NGX_ERROR) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#35843;&#29992;ngx_event_timer_init&#20989;&#25968;&#23436;&#25104;&#23450;&#26102;&#22120;&#32418;&#40657;&#26641;&#30340;&#24314;&#26641;&#25805;&#20316;&#65292;&#36825;&#26869;&#32418;&#40657;&#26641;&#22312;&#23384;&#20648;&#23450;&#26102;&#22120;&#30340;&#21516;&#26102;&#65292;&#20063;&#20026;epoll_wait&#25552;&#20379;&#20102;&#31561;&#24453;&#26102;&#38388;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      [cpp] view plaincopyprint?
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_timer_resolution &amp;&amp; !(ngx_event_flags &amp; NGX_USE_TIMER_EVENT)) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;struct sigaction&#160;&#160;sa;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;struct itimerval&#160;&#160;itv;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_memzero(&amp;sa, sizeof(struct sigaction));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sa.sa_handler = ngx_timer_signal_handler;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sigemptyset(&amp;sa.sa_mask);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (sigaction(SIGALRM, &amp;sa, NULL) == -1) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;sigaction(SIGALRM) failed&quot;);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_interval.tv_sec = ngx_timer_resolution / 1000;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_interval.tv_usec = (ngx_timer_resolution % 1000) * 1000;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_value.tv_sec = ngx_timer_resolution / 1000;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_value.tv_usec = (ngx_timer_resolution % 1000 ) * 1000;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (setitimer(ITIMER_REAL, &amp;itv, NULL) == -1) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;setitimer() failed&quot;);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#20351;&#29992;setitimer&#31995;&#32479;&#35843;&#29992;&#35774;&#32622;&#31995;&#32479;&#23450;&#26102;&#22120;&#65292;&#27599;&#24403;&#21040;&#36798;&#26102;&#38388;&#28857;&#21518;&#23558;&#21457;&#29983;SIGALRM&#20449;&#21495;&#65292;&#21516;&#26102;epoll_wait&#30340;&#38459;&#22622;&#23558;&#34987;&#20449;&#21495;&#20013;&#26029;&#20174;&#32780;&#34987;&#21796;&#37266;&#25191;&#34892;&#23450;&#26102;&#20107;&#20214;&#12290;&#20854;&#23454;&#65292;&#36825;&#27573;&#21021;&#22987;&#21270;&#24182;&#19981;&#26159;&#19968;&#23450;&#20250;&#34987;&#25191;&#34892;&#30340;&#65292;&#23427;&#30340;&#26465;&#20214;ngx_timer_resolution&#23601;&#26159;&#36890;&#36807;&#37197;&#32622;&#25351;&#20196;timer_resolution&#26469;&#35774;&#32622;&#30340;&#65292;&#22914;&#26524;&#27809;&#26377;&#37197;&#32622;&#27492;&#25351;&#20196;&#65292;&#23601;&#19981;&#20250;&#25191;&#34892;&#36825;&#27573;&#21021;&#22987;&#21270;&#20195;&#30721;&#20102;&#12290;&#20063;&#23601;&#26159;&#35828;&#65292;&#37197;&#32622;&#25991;&#20214;&#20013;&#20351;&#29992;&#20102;timer_resolution&#25351;&#20196;&#21518;&#65292;epoll_wait&#23558;&#20351;&#29992;&#20449;&#21495;&#20013;&#26029;&#30340;&#26426;&#21046;&#26469;&#39537;&#21160;&#23450;&#26102;&#22120;&#65292;&#21542;&#21017;&#23558;&#20351;&#29992;&#23450;&#26102;&#22120;&#32418;&#40657;&#26641;&#30340;&#26368;&#23567;&#26102;&#38388;&#20316;&#20026;epoll_wait&#36229;&#26102;&#26102;&#38388;&#26469;&#39537;&#21160;&#23450;&#26102;&#22120;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      epoll_wait&#30340;&#23450;&#26102;&#21796;&#37266;
    </p>
    <p>
      
    </p>
    <p>
      &#23450;&#26102;&#22120;&#30340;&#25191;&#34892;&#20854;&#23454;&#23601;&#26159;&#22312;&#20107;&#20214;&#24490;&#29615;&#27599;&#25191;&#34892;&#19968;&#36941;&#23601;&#26816;&#26597;&#19968;&#36941;&#23450;&#26102;&#22120;&#32418;&#40657;&#26641;&#65292;&#25214;&#20986;&#25152;&#26377;&#36229;&#26102;&#30340;&#23450;&#26102;&#20107;&#20214;&#65292;&#19968;&#19968;&#25191;&#34892;&#20043;&#12290;&#20107;&#20214;&#24490;&#29615;&#19981;&#21487;&#33021;&#26159;&#19968;&#20010;&#26080;&#38480;&#31354;&#36305;&#30340;&#24490;&#29615;&#65292;&#21542;&#21017;&#31561;&#21516;&#20110;&#27515;&#24490;&#29615;&#20250;&#21507;&#25481;&#22823;&#22810;&#25968;cpu&#30340;&#65292;&#22240;&#27492;&#20107;&#20214;&#24490;&#29615;&#37324;&#26377;&#19968;&#20010;&#38459;&#22622;&#28857;&#37027;&#23601;&#26159;epoll_wait&#12290;&#26377;&#20102;wait&#23601;&#35299;&#20915;&#20102;&#24490;&#29615;&#31354;&#36305;&#30340;&#38382;&#39064;&#65292;&#20294;&#36825;&#20010;wait&#30340;&#26102;&#38388;&#26159;&#22810;&#20037;&#21602;&#65311;1&#31186;&#65292;2&#31186;&#65292;1&#20998;&#65292;2&#20998;&#12290;&#12290;&#12290;wait&#26102;&#38388;&#36807;&#38271;&#20250;&#23548;&#33268;&#23450;&#26102;&#22120;&#19981;&#20934;&#30830;&#65292;wait&#26102;&#38388;&#36807;&#30701;&#65292;&#36275;&#22815;&#30701;&#65292;&#23601;&#20250;&#36864;&#21270;&#20026;&#26080;&#31561;&#24453;&#24490;&#29615;&#12290;nginx&#23601;&#24341;&#20837;&#19978;&#38754;&#25152;&#35828;&#30340;&#20004;&#31181;&#26426;&#21046;&#26469;&#35774;&#32622;&#31561;&#24453;&#26102;&#38388;&#12290;&#20195;&#30721;&#27573;&#22914;&#19979;&#65306;
    </p>
    <p>
      [cpp] view plaincopyprint?
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_timer_resolution) {&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timer = NGX_TIMER_INFINITE;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;flags = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;} else {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timer = ngx_event_find_timer();&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;flags = NGX_UPDATE_TIME;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#36825;&#27573;&#20195;&#30721;&#65288;&#20301;&#20110;ngx_event.c&#30340;ngx_process_events_and_timers&#20989;&#25968;&#20013;&#65289;&#21487;&#20197;&#28165;&#26224;&#30475;&#21040;&#20004;&#31181;&#23450;&#26102;&#22120;&#26426;&#21046;&#12290;&#20351;&#29992;&#20102;timer_resolution&#25351;&#20196;&#65292;&#27492;&#22788;&#30340;timer&#23558;&#20250;&#34987;&#35774;&#32622;-1&#65292;&#21542;&#21017;&#23601;&#26159;&#35843;&#29992;ngx_event_find_timer()&#20989;&#25968;&#22312;&#23450;&#26102;&#22120;&#32418;&#40657;&#26641;&#20013;&#25214;&#20986;&#26368;&#23567;&#23450;&#26102;&#26102;&#38388;&#12290;&#36825;&#20010;timer&#20540;&#26368;&#21518;&#23558;&#20316;&#20026;epoll_wait&#30340;&#36229;&#26102;&#26102;&#38388;(timeout)&#12290;&#27492;&#22788;&#38656;&#35201;&#27880;&#24847;timer_resolution&#25351;&#20196;&#30340;&#20351;&#29992;&#23558;&#20250;&#35774;&#32622;epoll_wait&#36229;&#26102;&#26102;&#38388;&#20026;-1&#65292;&#36825;&#34920;&#31034;epoll_wait&#23558;&#27704;&#36828;&#38459;&#22622;&#65292;&#19981;&#20250;&#33258;&#21160;&#21796;&#37266;&#65292;&#22240;&#27492;&#21021;&#22987;&#21270;&#37324;&#20570;&#30340;setitimer&#25805;&#20316;&#23601;&#23558;&#20250;&#21457;&#25381;&#23427;&#30340;&#20316;&#29992;&#20102;&#8212;&#8212;&#23450;&#26102;&#20135;&#29983;SIGALRM&#20449;&#21495;&#23558;epoll_wait&#30340;&#38459;&#22622;&#32473;&#20013;&#26029;&#25481;&#65292;&#20174;&#32780;&#21796;&#37266;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#23450;&#26102;&#20107;&#20214;&#30340;&#25191;&#34892;
    </p>
    <p>
      
    </p>
    <p>
      &#36825;&#20010;&#26102;&#20505;&#65292;epoll_wait&#34987;&#21796;&#37266;&#20102;&#65292;&#34920;&#31034;&#20107;&#20214;&#24490;&#29615;&#23558;&#24320;&#22987;&#19968;&#36718;&#26032;&#30340;&#24490;&#29615;&#20102;&#65292;&#22240;&#27492;nginx&#23558;&#20570;&#30340;&#19968;&#20010;&#24037;&#20316;&#26159;&#26816;&#26597;&#23450;&#26102;&#22120;&#32418;&#40657;&#26641;&#20013;&#26159;&#21542;&#26377;&#24050;&#32463;&#36229;&#26102;&#25110;&#32773;&#26159;&#21040;&#28857;&#30340;&#23450;&#26102;&#20107;&#20214;&#65292;&#22914;&#26524;&#26377;&#65292;&#21017;&#19968;&#19968;&#25191;&#34892;&#23427;&#20204;&#12290;&#28041;&#21450;&#30340;&#20195;&#30721;&#27573;&#22914;&#19979;&#65306;
    </p>
    <p>
      [cpp] view plaincopyprint?
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (delta) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_expire_timers();&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      
    </p>
    <p>
      epoll_wait&#21796;&#37266;&#36820;&#22238;&#21518;&#23558;&#25191;&#34892;&#36825;&#19968;&#27573;&#20195;&#30721;(&#20301;&#20110;ngx_event.c&#30340;ngx_process_events_and_timers&#20989;&#25968;&#20013;)&#65292;ngx_event_expire_timers&#20989;&#25968;&#23601;&#26159;&#36941;&#21382;&#19968;&#19979;&#23450;&#26102;&#22120;&#32418;&#40657;&#26641;&#65292;&#25214;&#20986;&#36229;&#26102;&#30340;&#23450;&#26102;&#20107;&#20214;&#24182;&#25191;&#34892;&#20107;&#20214;&#30340;&#22238;&#35843;&#20989;&#25968;&#12290;&#21487;&#33021;&#20320;&#20250;&#35828;&#36825;&#27573;&#20195;&#30721;&#26159;&#26377;&#25191;&#34892;&#26465;&#20214;&#30340;&#65292;&#27809;&#38169;&#65292;&#36825;&#37324;&#30340;delta&#20854;&#23454;&#26159;&#29992;&#26469;&#21453;&#24212;epoll_wait&#38459;&#22622;&#20102;&#22810;&#38271;&#26102;&#38388;&#65292;&#25152;&#20197;delta&#31561;&#20110;0&#26102;&#34920;&#31034;&#26412;&#27425;epoll_wait&#20960;&#20046;&#27809;&#26377;&#38459;&#22622;&#65292;&#25152;&#20197;&#19978;&#19968;&#27425;&#30340;&#20107;&#20214;&#24490;&#29615;&#21644;&#26412;&#27425;&#20107;&#20214;&#24490;&#29615;&#26159;&#22312;&#20960;&#20046;0&#24310;&#36831;&#30340;&#26102;&#38388;&#20869;&#23436;&#25104;&#30340;&#65292;&#24403;&#21069;&#26102;&#38388;&#27809;&#26377;&#21457;&#29983;&#25913;&#21464;&#65292;&#25925;&#19981;&#38656;&#35201;&#21435;&#26816;&#26597;&#23450;&#26102;&#20107;&#20214;&#12290;nginx&#22312;&#36825;&#31181;&#32454;&#24494;&#30340;&#20248;&#21270;&#26041;&#38754;&#20570;&#24471;&#21313;&#20998;&#21040;&#20301;&#65292;&#24615;&#33021;&#30495;&#30340;&#26159;&#22312;&#19968;&#28857;&#19968;&#28404;&#20013;&#25187;&#20986;&#26469;&#30340;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#23450;&#26102;&#20107;&#20214;&#30340;&#20351;&#29992;
    </p>
    <p>
      
    </p>
    <p>
      [cpp] view plaincopyprint?
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;static ngx_connection_t dummy;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;static ngx_event_t ev;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;static void&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_hello_print(ngx_event_t *ev)&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;{&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf(&quot;hello world\n&quot;);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_add_timer(ev, 1000);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;static ngx_int_t&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_hello_process_init(ngx_cycle_t *cycle)&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;{&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dummy.fd = (ngx_socket_t) -1;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_memzero(&amp;ev, sizeof(ngx_event_t));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev.handler = ngx_http_hello_print;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev.log = cycle-&gt;log;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev.data = &amp;dummy;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_add_timer(&amp;ev, 1000);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_OK;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#36825;&#27573;&#20195;&#30721;&#23558;&#27880;&#20876;&#19968;&#20010;&#23450;&#26102;&#20107;&#20214;&#8212;&#8212;&#27599;&#36807;&#19968;&#31186;&#38047;&#25171;&#21360;&#19968;&#27425;hello world&#12290;ngx_add_timer&#20989;&#25968;&#23601;&#26159;&#29992;&#26469;&#23436;&#25104;&#23558;&#19968;&#20010;&#26032;&#30340;&#23450;&#26102;&#20107;&#20214;&#21152;&#20837;&#23450;&#26102;&#22120;&#32418;&#40657;&#26641;&#20013;&#65292;&#23450;&#26102;&#20107;&#20214;&#34987;&#25191;&#34892;&#21518;&#65292;&#23601;&#20250;&#20174;&#26641;&#20013;&#31227;&#38500;&#65292;&#22240;&#27492;&#35201;&#24819;&#19981;&#26029;&#30340;&#24490;&#29615;&#25171;&#21360;hello world&#65292;&#23601;&#38656;&#35201;&#22312;&#20107;&#20214;&#22238;&#35843;&#20989;&#25968;&#34987;&#35843;&#29992;&#21518;&#20877;&#23558;&#20107;&#20214;&#32473;&#28155;&#21152;&#21040;&#23450;&#26102;&#22120;&#32418;&#40657;&#26641;&#20013;&#12290; ngx_http_hello_process_init&#26159;&#27880;&#20876;&#22312;&#27169;&#22359;&#30340;&#36827;&#31243;&#21021;&#22987;&#21270;&#38454;&#27573;&#30340;&#22238;&#35843;&#20989;&#25968;&#19978;&#12290;&#30001;&#20110;&#65292;ngx_even_core_module&#27169;&#22359;&#25490;&#22312;&#33258;&#23450;&#20041;&#27169;&#22359;&#30340;&#21069;&#38754;&#65292;&#25152;&#20197;&#25105;&#20204;&#22312;&#36827;&#31243;&#21021;&#22987;&#21270;&#38454;&#27573;&#28155;&#21152;&#23450;&#26102;&#20107;&#20214;&#26102;&#65292;&#23450;&#26102;&#22120;&#24050;&#32463;&#34987;&#21021;&#22987;&#21270;&#22909;&#20102;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#26412;&#25991;&#21482;&#26159;&#31616;&#21333;&#30340;&#20171;&#32461;&#20102;nginx&#30340;&#23450;&#26102;&#65292;&#32454;&#33410;&#36824;&#38656;&#35201;&#38405;&#35835;&#20195;&#30721;&#65292;&#27604;&#22914;nginx&#32418;&#40657;&#26641;&#30340;&#23454;&#29616;&#31561;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391736959405" LINK="http://blog.csdn.net/marcky/article/details/6069958" MODIFIED="1391736987199" TEXT="Nginx&#x6e90;&#x7801;&#x5206;&#x6790;-Epoll&#x6a21;&#x5757; "/>
<node CREATED="1391781381865" LINK="http://blog.csdn.net/marcky/article/details/6041303" MODIFIED="1391783131570" TEXT="Nginx&#x6e90;&#x7801;&#x5206;&#x6790;-connections&#x6570;&#x7ec4; ">
<node CREATED="1391783139667" LINK="#ID_951469658" MODIFIED="1391783158806" TEXT=""/>
</node>
</node>
<node CREATED="1389256392595" LINK="http://www.pagefault.info" MODIFIED="1389447897453" TEXT="pagefault"/>
<node CREATED="1389703024647" LINK="http://tengine.taobao.org/book/" MODIFIED="1389704484323" TEXT="tengine"/>
<node CREATED="1390226279332" LINK="http://blog.sina.com.cn/openresty" MODIFIED="1390226297325" TEXT="openresty"/>
<node CREATED="1390227536656" LINK="http://lenky.info/" MODIFIED="1390227554051" TEXT="lenky"/>
<node CREATED="1390272454501" LINK="http://my.oschina.net/fqing" MODIFIED="1390272490375" TEXT="&#x90a3;&#x4e00;&#x5251;&#x7684;&#x98ce;&#x60c5;"/>
<node CREATED="1390522979733" LINK="http://blog.csdn.net/xiajun07061225/article/category/1461389" MODIFIED="1390522997115" TEXT="&#x6c5f;&#x5357;&#x70df;&#x96e8;"/>
</node>
<node CREATED="1388930950170" FOLDED="true" MODIFIED="1389150103872" POSITION="right" TEXT="main">
<node CREATED="1388930885650" FOLDED="true" LINK="http://blog.csdn.net/kenbinzhang/article/details/4681694" MODIFIED="1389070124192" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388930898050" MODIFIED="1388930910629" TEXT="main&#x51fd;&#x6570;&#x7684;&#x5904;&#x7406;&#x8fc7;&#x7a0b;&#x53ef;&#x4ee5;&#x5206;&#x4e3a;&#x4ee5;&#x4e0b;&#x6b65;&#x9aa4;&#xff1a;&#xa;&#xa;1&#x3001;&#x4ece;&#x63a7;&#x5236;&#x53f0;&#x83b7;&#x53d6;&#x53c2;&#x6570;&#x5e76;&#x5904;&#x7406;:ngx_get_options(argc, argv)&#xff1b;&#xa;&#xa;2&#x3001;&#x7b80;&#x5355;&#x521d;&#x59cb;&#x5316;&#xff0c;&#x521d;&#x59cb;&#x5316;&#x4e00;&#x4e9b;&#x6570;&#x636e;&#x7ed3;&#x6784;&#x548c;&#x6a21;&#x5757;:ngx_debug_init(),ngx_time_init(),ngx_regex_init(),ngx_log_init(),ngx_ssl_init()&#xff1b;&#xa;&#xa;3&#x3001;&#x521d;&#x59cb;&#x5316;&#x5c40;&#x90e8;&#x7684;ngx_cycle_t init_cycle&#x7ed3;&#x6784;&#x4f53;&#x53d8;&#x91cf;:&#xa;    ngx_memzero(&amp;init_cycle, sizeof(ngx_cycle_t));&#xa;    init_cycle.log = log;&#xa;    ngx_cycle = &amp;init_cycle;&#xa;&#xa;    init_cycle.pool = ngx_create_pool(1024, log);&#xa;    if (init_cycle.pool == NULL) {&#xa;        return 1;&#xa;    }    &#xa;&#xa;4&#x3001;&#x4fdd;&#x5b58;&#x53c2;&#x6570;&#xff0c;&#x8bbe;&#x7f6e;&#x51e0;&#x4e2a;&#x5168;&#x5c40;&#x53d8;&#x91cf;&#xff1a;ngx_argc,ngx_os_argv,ngx_argv,ngx_os_environ&#xff1b;&#xa;&#xa;5&#x3001;&#x8c03;&#x7528;ngx_process_options&#xff0c;&#x8bbe;&#x7f6e;init_cycle&#x7684;&#x4e00;&#x4e9b;&#x5b57;&#x6bb5;&#xff0c;&#x8fd9;&#x4e9b;&#x5b57;&#x6bb5;&#x662f;&#x4ece;&#x63a7;&#x5236;&#x53f0;&#x7684;&#x547d;&#x4ee4;&#x4e2d;&#x53d6;&#x5f97;&#x7684;&#xff1a;conf_prefix&#xff08;config prefix path&#xff09;&#x3001;prefix&#xff08;prefix path:-p prefix&#xff09;&#x3001;conf_file&#xff08;&#x914d;&#x7f6e;&#x6587;&#x4ef6;&#x8def;&#x5f84;:-c filenname&#xff09;&#x3001;conf_param(-g directives)&#xff0c;&#x53e6;&#x5916;&#x8fd8;&#x628a;init_cycle.log.log_level&#x8bbe;&#x7f6e;&#x4e3a;NGX_LOG_INFO&#xff1b;&#xa;&#xa;6&#x3001;&#x8c03;&#x7528;ngx_os_init&#xff0c;&#x8fd9;&#x4e2a;&#x8c03;&#x7528;&#x4f1a;&#x8bbe;&#x7f6e;&#x4e00;&#x4e9b;&#x5168;&#x5c40;&#x53d8;&#x91cf;&#xff0c;&#x8fd9;&#x4e9b;&#x5168;&#x5c40;&#x53d8;&#x91cf;&#x548c;&#x64cd;&#x4f5c;&#x7cfb;&#x7edf;&#x76f8;&#x5173;&#xff0c;&#x6bd4;&#x5982;:ngx_pagesize,ngx_cacheline_size,ngx_ncpu,ngx_cpuinfo(),ngx_max_sockets&#x7b49;&#xff1b;&#xa;&#xa;7&#x3001;&#x8c03;&#x7528;&#x521d;&#x59cb;&#x5316;&#x51fd;&#x6570;ngx_crc32_table_init()&#xff1b;&#xa;&#xa;8&#x3001;&#x8c03;&#x7528;ngx_set_inherited_sockets(&amp;init_cycle)&#xff0c;&#x521d;&#x59cb;&#x5316;init_cycle.listening&#xff0c;&#x8fd9;&#x662f;&#x4e00;&#x4e2a;ngx_listening_t&#x7684;&#x7ed3;&#x6784;&#x6570;&#x7ec4;&#xff0c;&#x5176;socket_fd&#x662f;&#x4ece;&#x73af;&#x5883;&#x53d8;&#x91cf;NGINX&#x4e2d;&#x8bfb;&#x53d6;&#x7684;&#xff1b;&#xa;&#xa;9&#x3001;&#x5bf9;&#x7cfb;&#x7edf;&#x6240;&#x6709;&#x6a21;&#x5757;&#x70b9;&#x4e00;&#x4e0b;&#x6570;&#xff0c;&#x7136;&#x540e;&#x8fdb;&#x5165;ngx_init_cycle&#x4f5c;&#x4e3b;&#x8981;&#x7684;&#x6a21;&#x5757;&#x76f8;&#x5173;&#x7684;&#x521d;&#x59cb;&#x5316;&#xff0c;init_cycle&#x4f5c;&#x4e3a;&#x65e7;&#x7684;&#x5168;&#x5c40;&#x8bbe;&#x7f6e;&#x4f20;&#x8fdb;&#x53bb;&#xff0c;&#x8fd9;&#x4e2a;&#x51fd;&#x6570;&#x4f1a;&#x521b;&#x5efa;&#x4e00;&#x4e0b;&#x65b0;&#x7684;ngx_cycle_t&#x53d8;&#x91cf;&#xff0c;&#x5e76;&#x8fd4;&#x56de;&#x5176;&#x6307;&#x9488;&#xff1a;&#xa;    ngx_max_module = 0;&#xa;    for (i = 0; ngx_modules[i]; i++) {&#xa;        ngx_modules[i]-&gt;index = ngx_max_module++;&#xa;    }    &#xa;&#xa;    cycle = ngx_init_cycle(&amp;init_cycle);&#xa;&#xa;10&#x3001;&#x4e0e;&#x4fe1;&#x53f7;&#x91cf;&#x76f8;&#x5173;&#x7684;&#x4e00;&#x4e9b;&#x64cd;&#x4f5c;&#x4ee3;&#x7801;&#xff1b;&#xa;&#xa;11&#x3001;&#x591a;&#x8fdb;&#x7a0b;&#x7684;&#x60c5;&#x51b5;&#x4e0b;&#xff0c;&#x8c03;&#x7528;ngx_master_process_cycle(cycle)&#xff0c;&#x5355;&#x8fdb;&#x7a0b;&#x60c5;&#x51b5;&#x4e0b;&#x8c03;&#x7528;ngx_single_process_cycle&#x5b8c;&#x6210;&#x6700;&#x540e;&#x7684;&#x542f;&#x52a8;&#x5de5;&#x4f5c;&#x3002;"/>
</node>
<node CREATED="1388815025459" MODIFIED="1388817102595" TEXT="ngx_strerror_init">
<node CREATED="1389274680830" FOLDED="true" MODIFIED="1389276820867" TEXT="&#x5206;&#x6790;">
<node CREATED="1389274067254" MODIFIED="1389274199073">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_strerror_init()&#65292;
    </p>
    <p>
      &#35813;&#20989;&#25968;&#30340;&#23450;&#20041;&#22312;&#25991;&#20214;src/os/unix/ngx_errno.c&#20013;&#12290;
    </p>
    <p>
      &#35813;&#20989;&#25968;&#20027;&#35201;&#21021;&#22987;&#21270;&#31995;&#32479;&#20013;&#38169;&#35823;&#32534;&#21495;&#23545;&#24212;&#30340;&#21547;&#20041;&#65292;&#36825;&#26679;&#21021;&#22987;&#21270;&#20013;&#36827;&#34892;&#23545;&#24212;&#30340;&#22909;&#22788;&#26159;&#65292;&#24403;&#20986;&#29616;&#38169;&#35823;&#65292;&#19981;&#29992;&#20877;&#21435;&#35843;&#29992;strerror()&#20989;&#25968;&#26469;&#33719;&#21462;&#38169;&#35823;&#21407;&#22240;&#65292;&#32780;&#30452;&#25509;&#21487;&#20197;&#26681;&#25454;&#38169;&#35823;&#32534;&#21495;&#25214;&#21040;&#23545;&#24212;&#30340;&#38169;&#35823;&#21407;&#22240;&#65292;&#21487;&#20197;&#25552;&#39640;&#36816;&#34892;&#26102;&#30340;&#25191;&#34892;&#25928;&#29575;&#12290;
    </p>
    <p>
      &#20174;&#36825;&#37324;&#21487;&#20197;&#30475;&#21040;&#65292;nginx&#24320;&#21457;&#32773;&#30340;&#21035;&#26377;&#29992;&#24515;&#65292;&#23545;&#20110;&#24494;&#23567;&#30340;&#24615;&#33021;&#25552;&#21319;&#20063;&#27627;&#19981;&#25918;&#36807;&#12290;
    </p>
    <p>
      &#25509;&#30528;&#22238;&#21040;&#23545;ngx_strerror_init&#30340;&#20998;&#26512;&#65292;&#31532;59&#34892;&#65292;malloc&#20026;&#20840;&#23616;&#30340;ngx_sys_errlist&#20998;&#37197;&#20869;&#23384;&#65292;&#36825;&#26159;&#19968;&#20010;&#20840;&#23616;&#38745;&#24577;&#21464;&#37327;&#65292;&#25351;&#21521;&#38169;&#35823;&#32534;&#30721;&#21450;&#23545;&#24212;&#23383;&#31526;&#20018;&#35828;&#26126;&#20540;&#25968;&#32452;&#30340;&#36215;&#22987;&#22320;&#22336;&#12290;&#20174;64&#33267;76&#34892;&#65292;&#23436;&#25104;&#20102;&#25968;&#32452;&#20013;&#65292;&#27599;&#19968;&#20010;&#20540;&#23545;&#24212;&#30340;err&#23383;&#31526;&#20018;&#21450;&#20854;&#38271;&#24230;&#30340;&#21021;&#22987;&#21270;&#24037;&#20316;&#12290;&#36825;&#37096;&#20998;&#20063;&#26159;&#35813;&#20989;&#25968;&#30340;&#26680;&#24515;&#24037;&#20316;&#37096;&#20998;&#12290;&#22312;&#36825;&#37324;nginx&#24182;&#27809;&#26377;&#20351;&#29992;&#20854;&#20869;&#23384;&#27744;&#65292;&#32780;&#26159;&#20351;&#29992;&#29575;&#40664;&#35748;&#30340;malloc&#36827;&#34892;&#20869;&#23384;&#20998;&#37197;&#65292;&#22240;&#20026;&#22312;&#36825;&#37324;&#31243;&#24207;&#36824;&#27809;&#26377;&#21019;&#24314;&#20869;&#23384;&#27744;&#65292;&#32780;&#21518;&#32493;&#30340;&#21021;&#22987;&#21270;&#24037;&#20316;&#65292;&#21487;&#33021;&#20986;&#29616;&#26410;&#30693;&#30340;&#38169;&#35823;&#65292;&#37027;&#20040;&#65292;&#35813;&#22788;&#21021;&#22987;&#21270;&#30340;&#38169;&#35823;&#25968;&#32452;&#23601;&#21487;&#20197;&#27966;&#19978;&#29992;&#22330;&#20102;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1388815274754" FOLDED="true" MODIFIED="1389144504451" TEXT="ngx_get_options">
<node CREATED="1388816787481" MODIFIED="1388924443050" TEXT="&#x5c06;&#x542f;&#x52a8;&#x53c2;&#x6570;&#x4fe1;&#x606f;&#x653e;&#x5230;&#x5168;&#x5c40;&#x53d8;&#x91cf;&#x4e2d;">
<icon BUILTIN="attach"/>
</node>
</node>
<node CREATED="1388815311914" FOLDED="true" MODIFIED="1388924446427" TEXT="ngx_time_init">
<node CREATED="1388924427154" MODIFIED="1388924435466" TEXT="&#x8c03;&#x7528;ngx_time_init()&#x521d;&#x59cb;&#x5316;&#x5e76;&#x66f4;&#x65b0;&#x65f6;&#x95f4;&#xff0c;&#x5982;&#x5168;&#x5c40;&#x53d8;&#x91cf;ngx_cached_time">
<icon BUILTIN="attach"/>
</node>
<node CREATED="1389272153365" FOLDED="true" MODIFIED="1389272162356" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389272072557" MODIFIED="1389272129680">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      void
    </p>
    <p>
      ngx_time_init(void)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_err_log_time.len = sizeof(&quot;1970/09/28 12:00:00&quot;) - 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_http_time.len = sizeof(&quot;Mon, 28 Sep 1970 06:00:00 GMT&quot;) - 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_http_log_time.len = sizeof(&quot;28/Sep/1970:12:00:00 +0600&quot;) - 1;
    </p>
    <p>
      #if (NGX_SYSLOG)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_syslog_time.len = sizeof(&quot;Oct 11 22:14:15&quot;) - 1;
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_http_log_iso8601.len = sizeof(&quot;1970-09-28T12:00:00+06:00&quot;) - 1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_time = &amp;cached_time[0];
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_tm = &amp;cached_http_log_tm[0];
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_time_update();
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      ngx_cached_err_log_time&#65292;
    </p>
    <p>
      ngx_cached_http_time&#65292;
    </p>
    <p>
      ngx_cached_http_log_time&#65292;
    </p>
    <p>
      ngx_cached_http_log_iso8601&#22343;&#20026;ngx_str_t&#31867;&#22411;&#30340;&#65292;&#29992;&#20110;&#35760;&#24405;&#38169;&#35823;&#26085;&#24535;&#26102;&#38388;&#65292;http&#32531;&#23384;&#26102;&#38388;&#65292;http&#32531;&#23384;log&#26102;&#38388;&#32423;iso8061&#26102;&#38388;&#65292;
    </p>
    <p>
      &#21021;&#22987;&#21270;&#36807;&#31243;&#20013;&#65292;&#20808;&#35745;&#31639;&#35813;&#26102;&#38388;&#34920;&#31034;&#30340;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#65292;&#36825;&#26679;&#21487;&#20197;&#30465;&#21364;&#22312;&#29992;&#21040;&#30340;&#26102;&#20505;&#20877;&#36827;&#34892;&#35745;&#31639;&#12290;
    </p>
    <p>
      ngx_cached_time&#26159;nginx&#26102;&#38388;&#31867;&#22411;&#30340;&#25968;&#25454;&#32467;&#26500;&#65292;&#20182;&#26159;volatile&#31867;&#22411;&#30340;&#65292;&#21363;&#38450;&#27490;&#32534;&#35793;&#22120;&#20248;&#21270;&#65292;&#27599;&#27425;&#37117;&#35201;&#20174;&#20869;&#23384;&#20013;&#35835;&#21462;&#65292;&#32780;&#19981;&#26159;&#29992;&#32531;&#23384;&#20540;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389270670712" MODIFIED="1389270681589" TEXT="ngx_time_update">
<node CREATED="1389272170842" FOLDED="true" MODIFIED="1389272177244" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389270838294" MODIFIED="1389271955587">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      void
    </p>
    <p>
      ngx_time_update(void)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*p0, *p1, *p2, *p3;
    </p>
    <p>
      #if (NGX_SYSLOG)
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*p4;
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_tm_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tm, gmt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;time_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sec;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;msec, usec;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_time_t&#160;&#160;&#160;&#160;&#160;&#160;*tp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct timeval&#160;&#160;&#160;tv;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (!ngx_trylock(&amp;ngx_time_lock)) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_gettimeofday(&amp;tv);/* &#27492;&#22788;&#20026;&#31995;&#32479;&#26631;&#20934;&#20989;&#25968;&#65292;&#33719;&#21462;&#31995;&#32479;&#26102;&#38388;&#65292;&#23384;&#20648;&#21040;tv&#21464;&#37327;&#20013; */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;sec = tv.tv_sec;
    </p>
    <p>
      &#160;&#160;&#160;&#160;msec = tv.tv_usec / 1000;/* &#20197;&#19978;&#20004;&#34892;&#25226;tv&#33719;&#21462;&#30340;&#20540;&#65292;&#36716;&#25442;&#20026;&#31186;&#21644;&#27627;&#31186;&#65292;&#24182;&#22312;&#25509;&#19979;&#26469;&#30340;&#19968;&#34892;&#20195;&#30721;&#20013;&#32479;&#19968;&#25442;&#31639;&#20026;&#31186;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;usec = tv.tv_usec % 1000;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_current_msec = (ngx_msec_t) sec * 1000 + msec;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#f20909">tp</font>&#160;= &amp;cached_time[slot];
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (<font color="#ef0808">tp-&gt;sec</font>&#160;== sec) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f40707">tp-&gt;msec</font>&#160;= msec;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f80f0f">&#160;tp-&gt;usec</font>&#160;= usec;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_unlock(&amp;ngx_time_lock);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      /* &#22914;&#26524;&#31995;&#32479;&#32531;&#23384;&#30340;&#26102;&#38388;&#31186;&#21644;&#24403;&#21069;&#26356;&#26032;&#30340;&#31186;&#20540;&#26410;&#21457;&#29983;&#21464;&#21270;&#65292;&#21017;&#21482;&#38656;&#26356;&#26032;&#27627;&#31186;&#20540;&#65292;&#28982;&#21518;&#36820;&#22238;&#65292;&#21542;&#21017;&#35748;&#20026;&#31995;&#32479;&#38271;&#26102;&#38388;&#26410;&#26356;&#26032;&#26102;&#38388;&#65292;&#32487;&#32493;&#24448;&#21518;&#25191;&#34892; */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (slot == NGX_TIME_SLOTS - 1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;slot = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;slot++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;tp = &amp;cached_time[slot];
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#f80303">tp-&gt;sec</font>&#160;= sec;
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#f70808">tp-&gt;msec</font>&#160;= msec;
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#fa0505">tp-&gt;usec</font>&#160;= usec;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_gmtime(sec, &amp;gmt);/* ngx_gmtime &#23558;&#26102;&#38388;&#25442;&#31639;&#20026;&#22825;&#12289;&#23567;&#26102;&#12289;&#20998;&#12289;&#31186;&#20855;&#20307;&#23454;&#29616;&#27604;&#36739;&#31616;&#21333;&#65292;&#36825;&#37324;&#19981;&#20877;&#28145;&#20837;&#20998;&#26512;*/
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;p0 = &amp;cached_http_time[slot][0];
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;(void) ngx_sprintf(p0, &quot;%s, %02d %s %4d %02d:%02d:%02d GMT&quot;,week[gmt.ngx_tm_wday], gmt.ngx_tm_mday,&#160;months[gmt.ngx_tm_mon - 1], gmt.ngx_tm_year,gmt.ngx_tm_hour, gmt.ngx_tm_min, gmt.ngx_tm_sec);
    </p>
    <p>
      /* &#36825;&#37324;&#25351;&#38656;&#35201;&#35745;&#31639;&#26102;&#21306; */
    </p>
    <p>
      #if (NGX_HAVE_GETTIMEZONE)
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;<font color="#f80b0b">&#160;tp-&gt;gmtoff </font>= ngx_gettimezone();
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_gmtime(sec + tp-&gt;gmtoff * 60, &amp;tm);
    </p>
    <p>
      
    </p>
    <p>
      #elif (NGX_HAVE_GMTOFF)
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_localtime(sec, &amp;tm);
    </p>
    <p>
      &#160;&#160;&#160;&#160;cached_gmtoff = (ngx_int_t) (tm.ngx_tm_gmtoff / 60);
    </p>
    <p>
      &#160;&#160;&#160;<font color="#ef0303">&#160;tp-&gt;gmtoff </font>= cached_gmtoff;
    </p>
    <p>
      
    </p>
    <p>
      #else
    </p>
    <p>
      /* &#30452;&#25509;&#35745;&#31639;&#26412;&#22320;&#31995;&#32479;&#26102;&#38388; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_localtime(sec, &amp;tm);
    </p>
    <p>
      &#160;&#160;&#160;&#160;cached_gmtoff = ngx_timezone(tm.ngx_tm_isdst);
    </p>
    <p>
      &#160;&#160;&#160;<font color="#f50606">&#160;tp-&gt;gmtoff </font>= cached_gmtoff;
    </p>
    <p>
      
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;cached_http_log_tm[slot] = tm;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;p1 = &amp;cached_err_log_time[slot][0];
    </p>
    <p>
      &#160;&#160;&#160;&#160;(void) ngx_sprintf(p1, &quot;%4d/%02d/%02d %02d:%02d:%02d&quot;,&#160;tm.ngx_tm_year, tm.ngx_tm_mon,tm.ngx_tm_mday, tm.ngx_tm_hour,tm.ngx_tm_min, tm.ngx_tm_sec);
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;p2 = &amp;cached_http_log_time[slot][0];
    </p>
    <p>
      &#160;&#160;&#160;&#160;(void) ngx_sprintf(p2, &quot;%02d/%s/%d:%02d:%02d:%02d %c%02d%02d&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tm.ngx_tm_mday, months[tm.ngx_tm_mon - 1],tm.ngx_tm_year, tm.ngx_tm_hour,tm.ngx_tm_min, tm.ngx_tm_sec,tp-&gt;gmtoff &lt; 0 ? '-' : '+',ngx_abs(tp-&gt;gmtoff / 60), ngx_abs(tp-&gt;gmtoff % 60));
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;p3 = &amp;cached_http_log_iso8601[slot][0];
    </p>
    <p>
      &#160;&#160;&#160;&#160;(void) ngx_sprintf(p3, &quot;%4d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tm.ngx_tm_year, tm.ngx_tm_mon,&#160;tm.ngx_tm_mday, tm.ngx_tm_hour,&#160;tm.ngx_tm_min, tm.ngx_tm_sec,&#160;tp-&gt;gmtoff &lt; 0 ? '-' : '+',&#160;ngx_abs(tp-&gt;gmtoff / 60), ngx_abs(tp-&gt;gmtoff % 60));
    </p>
    <p>
      #if (NGX_SYSLOG)
    </p>
    <p>
      &#160;&#160;&#160;&#160;p4 = &amp;cached_syslog_time[slot][0];
    </p>
    <p>
      &#160;&#160;&#160;&#160;(void) ngx_sprintf(p4, &quot;%s %2d %02d:%02d:%02d&quot;,&#160;months[tm.ngx_tm_mon - 1],tm.ngx_tm_mday, tm.ngx_tm_hour,tm.ngx_tm_min, tm.ngx_tm_sec);
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      /* &#19978;&#36848;&#30340;&#20960;&#20010;printf &#23436;&#20840;&#25353;&#29031;&#26102;&#38388;&#30340;&#38656;&#27714;&#26684;&#24335;&#65292;&#23558;&#31995;&#32479;&#26102;&#38388;&#23384;&#20648;&#21040;&#23545;&#24212;&#30340;&#21464;&#37327;&#20013;&#65292;&#36825;&#37324;&#25105;&#20204;&#30475;&#21040;&#65292;&#24050;&#32463;&#19981;&#20877;&#26377;&#38271;&#24230;&#30340;&#35745;&#31639;&#20043;&#31867;&#30340;&#12290;*/
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_memory_barrier(); /* &#19968;&#20010;&#24212;&#29992;&#23618;&#35774;&#32622;&#20869;&#23384;&#23631;&#38556;&#30340;&#20989;&#25968;&#65292;&#34920;&#31034;&#19978;&#36848;&#29255;&#27573;&#24050;&#32463;&#35745;&#31639;&#23436;&#27605;&#65292;&#38656;&#35201;&#23436;&#25104;&#20869;&#23384;&#30340;&#21516;&#27493;&#65292;&#28982;&#21518;&#22312;&#21518;&#32493;&#30340;&#20960;&#27493;&#25805;&#20316;&#20013;&#65292;&#23454;&#29616;&#23545;&#21021;&#22987;&#21270;&#26368;&#21021;&#30340;&#20960;&#20010;&#20840;&#23616;&#21464;&#37327;&#30340;&#36171;&#20540;&#25805;&#20316;&#12290;&#36825;&#37324;&#20877;&#27425;&#30475;&#21040;&#65292;&#27809;&#26377;&#23383;&#31526;&#20018;&#38271;&#24230;&#30340;&#35745;&#31639;&#65292;nginx&#36890;&#36807;&#21021;&#22987;&#21270;&#19968;&#27425;&#38271;&#24230;&#35745;&#31639;&#20174;&#32780;&#19968;&#21171;&#27704;&#36920;&#65292;&#32780;&#19981;&#29992;&#27599;&#27425;&#35745;&#31639;&#26102;&#20877;&#21435;&#32416;&#32467;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#38382;&#39064;&#12290;&#36825;&#19968;&#28857;&#27604;&#36215;apache&#26469;&#35828;&#65292;&#30830;&#23454;&#20248;&#21270;&#19981;&#23569;&#12290;*/
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_tm = &amp;cached_http_log_tm[slot];
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_time = tp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_http_time.data = p0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_err_log_time.data = p1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_http_log_time.data = p2;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_http_log_iso8601.data = p3;
    </p>
    <p>
      #if (NGX_SYSLOG)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cached_syslog_time.data = p4;
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_unlock(&amp;ngx_time_lock);/* &#37322;&#25918;&#38145; */
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389270914725" FOLDED="true" MODIFIED="1389274316719" TEXT="ngx_trylock">
<node CREATED="1389270918461" MODIFIED="1389274389123">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_trylock()&#33719;&#21462;&#26102;&#38388;&#26356;&#26032;&#30340;&#20114;&#26021;&#38145;&#65292;&#36991;&#20813;&#36827;&#31243;&#25110;&#32447;&#31243;&#38388;&#24182;&#21457;&#26356;&#26032;&#31995;&#32479;&#26102;&#38388;&#12290;&#23545;&#20110;ngx_trylock()&#25105;&#20204;&#21487;&#20197;&#36319;&#36394;&#20854;&#23454;&#29616;&#21407;&#22411;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      306 #define ngx_trylock(lock)&#160;&#160;(*(lock) == 0 &amp;&amp; ngx_atomic_cmp_set(lock, 0, 1))
    </p>
    <p>
      
    </p>
    <p>
      &#36825;&#37324;&#21028;&#26029;*lock&#20026;0&#65292;&#34920;&#31034;&#27809;&#26377;&#34987;&#26551;&#38145;&#65292;&#24182;&#23545;&#20854;&#36827;&#34892;&#21407;&#23376;&#25805;&#20316;&#21152;&#38145;ngx_atomic_cmp_set&#65292;&#35774;&#32622;&#20854;&#20540;&#20026;1&#12290;ngx_atomic_cmp_set&#30340;&#23454;&#29616;&#22914;&#19979;&#65288;x86 unix&#31995;&#32479;&#65289;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      14 /*
    </p>
    <p>
      &#160;15&#160;&#160;* &quot;cmpxchgl&#160;&#160;r, [m]&quot;:
    </p>
    <p>
      &#160;16&#160;&#160;*
    </p>
    <p>
      &#160;17&#160;&#160;*&#160;&#160;&#160;&#160;&#160;if (eax == [m]) {
    </p>
    <p>
      &#160;18&#160;&#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zf = 1;
    </p>
    <p>
      &#160;19&#160;&#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[m] = r;
    </p>
    <p>
      &#160;20&#160;&#160;*&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;21&#160;&#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zf = 0;
    </p>
    <p>
      &#160;22&#160;&#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;eax = [m];
    </p>
    <p>
      &#160;23&#160;&#160;*&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;24&#160;&#160;*
    </p>
    <p>
      &#160;25&#160;&#160;*
    </p>
    <p>
      &#160;26&#160;&#160;* The &quot;r&quot; means the general register.
    </p>
    <p>
      &#160;27&#160;&#160;* The &quot;=a&quot; and &quot;a&quot; are the %eax register.
    </p>
    <p>
      &#160;28&#160;&#160;* Although we can return result in any register, we use &quot;a&quot; because it is
    </p>
    <p>
      &#160;29&#160;&#160;* used in cmpxchgl anyway.&#160;&#160;The result is actually in %al but not in %eax,
    </p>
    <p>
      &#160;30&#160;&#160;* however, as the code is inlined gcc can test %al as well as %eax,
    </p>
    <p>
      &#160;31&#160;&#160;* and icc adds &quot;movzbl %al, %eax&quot; by itself.
    </p>
    <p>
      &#160;32&#160;&#160;*
    </p>
    <p>
      &#160;33&#160;&#160;* The &quot;cc&quot; means that flags were changed.
    </p>
    <p>
      &#160;34&#160;&#160;*/
    </p>
    <p>
      &#160;35
    </p>
    <p>
      &#160;36 static ngx_inline ngx_atomic_uint_t
    </p>
    <p>
      &#160;37 ngx_atomic_cmp_set(ngx_atomic_t *lock, ngx_atomic_uint_t old,
    </p>
    <p>
      &#160;38&#160;&#160;&#160;&#160;&#160;ngx_atomic_uint_t set)
    </p>
    <p>
      &#160;39 {
    </p>
    <p>
      &#160;40&#160;&#160;&#160;&#160;&#160;u_char&#160;&#160;res;
    </p>
    <p>
      &#160;41
    </p>
    <p>
      &#160;42&#160;&#160;&#160;&#160;&#160;__asm__ volatile (
    </p>
    <p>
      &#160;43
    </p>
    <p>
      &#160;44&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NGX_SMP_LOCK
    </p>
    <p>
      &#160;45&#160;&#160;&#160;&#160;&#160;&quot;&#160;&#160;&#160;&#160;cmpxchgl&#160;&#160;%3, %1;&#160;&#160;&#160;&quot;
    </p>
    <p>
      &#160;46&#160;&#160;&#160;&#160;&#160;&quot;&#160;&#160;&#160;&#160;sete&#160;&#160;&#160;&#160;&#160;&#160;%0;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;
    </p>
    <p>
      &#160;47
    </p>
    <p>
      &#160;48&#160;&#160;&#160;&#160;&#160;: &quot;=a&quot; (res) : &quot;m&quot; (*lock), &quot;a&quot; (old), &quot;r&quot; (set) : &quot;cc&quot;, &quot;memory&quot;);
    </p>
    <p>
      &#160;49
    </p>
    <p>
      &#160;50&#160;&#160;&#160;&#160;&#160;return res;
    </p>
    <p>
      &#160;51 }
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1388924475223" MODIFIED="1388924478810" TEXT="&#x6e05;&#x96f6;&#x5168;&#x5c40;&#x53d8;&#x91cf;ngx_cycle&#xff0c;&#x5e76;&#x4e3a;ngx_cycle.pool&#x521b;&#x5efa;&#x5927;&#x5c0f;&#x4e3a;1024B&#x7684;&#x5185;&#x5b58;&#x6c60;"/>
<node CREATED="1388815325906" MODIFIED="1388815326966" TEXT="ngx_regex_init"/>
<node CREATED="1388815358065" MODIFIED="1388815359809" TEXT="ngx_getpid"/>
<node CREATED="1388815367393" FOLDED="true" MODIFIED="1388924571445" TEXT="ngx_log_init">
<node CREATED="1389274651151" FOLDED="true" MODIFIED="1389276687045" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389274470678" MODIFIED="1389274640157">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      264 ngx_log_t *
    </p>
    <p>
      265 ngx_log_init(u_char *prefix)
    </p>
    <p>
      266 {
    </p>
    <p>
      267&#160;&#160;&#160;&#160;&#160;u_char&#160;&#160;*p, *name;
    </p>
    <p>
      268&#160;&#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;nlen, plen;
    </p>
    <p>
      269
    </p>
    <p>
      270&#160;&#160;&#160;&#160;&#160;ngx_log.file = &amp;ngx_log_file; /*&#27492;&#22788;&#21021;&#22987;&#21270;log&#20013;&#30340;file&#23383;&#27573;&#23384;&#20648;&#20840;&#23616;&#21464;&#37327;ngx_log_file&#30340;&#22320;&#22336;*/
    </p>
    <p>
      271&#160;&#160;&#160;&#160;&#160;ngx_log.log_level = NGX_LOG_NOTICE;
    </p>
    <p>
      272
    </p>
    <p>
      273&#160;&#160;&#160;&#160;&#160;name = (u_char *) NGX_ERROR_LOG_PATH;
    </p>
    <p>
      
    </p>
    <p>
      &#36825;&#37324;&#21517;&#23383;&#21021;&#22987;&#21270;&#20026;error&#26085;&#24535;&#25991;&#20214;&#36335;&#24452;&#65292;&#40664;&#35748;&#23450;&#20041;&#20026;&#65288;objs/ngx_auto_config.h&#65289;&#65306;
    </p>
    <p>
      321 #ifndef NGX_ERROR_LOG_PATH
    </p>
    <p>
      322 #define NGX_ERROR_LOG_PATH&#160;&#160;&quot;logs/error.log&quot;
    </p>
    <p>
      323 #endif
    </p>
    <p>
      &#160;
    </p>
    <p>
      274
    </p>
    <p>
      275&#160;&#160;&#160;&#160;&#160;/*
    </p>
    <p>
      276&#160;&#160;&#160;&#160;&#160;&#160;* we use ngx_strlen() here since BCC warns about
    </p>
    <p>
      277&#160;&#160;&#160;&#160;&#160;&#160;* condition is always false and unreachable code
    </p>
    <p>
      278&#160;&#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      279
    </p>
    <p>
      280&#160;&#160;&#160;&#160;&#160;nlen = ngx_strlen(name);
    </p>
    <p>
      281
    </p>
    <p>
      282&#160;&#160;&#160;&#160;&#160;if (nlen == 0) {
    </p>
    <p>
      283&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_file.fd = ngx_stderr;
    </p>
    <p>
      284&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return &amp;ngx_log;
    </p>
    <p>
      285&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      286
    </p>
    <p>
      287&#160;&#160;&#160;&#160;&#160;p = NULL;
    </p>
    <p>
      288
    </p>
    <p>
      289 #if (NGX_WIN32)
    </p>
    <p>
      290&#160;&#160;&#160;&#160;&#160;if (name[1] != ':') {
    </p>
    <p>
      291 #else
    </p>
    <p>
      292&#160;&#160;&#160;&#160;&#160;if (name[0] != '/') {
    </p>
    <p>
      293 #endif
    </p>
    <p>
      294
    </p>
    <p>
      295&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (prefix) {
    </p>
    <p>
      296&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;plen = ngx_strlen(prefix);
    </p>
    <p>
      297
    </p>
    <p>
      298&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      299 #ifdef NGX_PREFIX
    </p>
    <p>
      300&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;prefix = (u_char *) NGX_PREFIX;
    </p>
    <p>
      301&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;plen = ngx_strlen(prefix);
    </p>
    <p>
      302 #else
    </p>
    <p>
      303&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;plen = 0;
    </p>
    <p>
      304 #endif
    </p>
    <p>
      305&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      306
    </p>
    <p>
      307&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (plen) {
    </p>
    <p>
      308&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name = malloc(plen + nlen + 2);
    </p>
    <p>
      309&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (name == NULL) {
    </p>
    <p>
      310&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      311&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      312
    </p>
    <p>
      313&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p = ngx_cpymem(name, prefix, plen);
    </p>
    <p>
      314
    </p>
    <p>
      315&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!ngx_path_separator(*(p - 1))) {
    </p>
    <p>
      316&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*p++ = '/';
    </p>
    <p>
      317&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      318
    </p>
    <p>
      319&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_cpystrn(p, (u_char *) NGX_ERROR_LOG_PATH, nlen + 1);
    </p>
    <p>
      320
    </p>
    <p>
      321&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p = name;
    </p>
    <p>
      322&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      323&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#22312;&#19978;&#36848;&#36825;&#20010;&#29255;&#27573;&#20013;&#65292;&#20027;&#35201;&#20998;&#37197;&#20869;&#23384;&#65292;&#26469;&#23384;&#20648;log&#25991;&#20214;&#21517;&#65292;prefix&#20026;&#25351;&#23450;&#30340;&#36335;&#24452;&#21069;&#32512;&#12290;&#21021;&#22987;&#21270;log&#25991;&#20214;&#30340;&#36335;&#24452;&#21517;&#31216;&#21518;&#65292;&#21518;&#32493;&#23601;&#35201;&#25171;&#24320;log&#25991;&#20214;&#65292;&#36827;&#34892;&#24517;&#35201;&#30340;&#21021;&#22987;&#21270;&#25805;&#20316;&#20102;&#12290;
    </p>
    <p>
      324
    </p>
    <p>
      325&#160;&#160;&#160;&#160;&#160;ngx_log_file.fd = ngx_open_file(name, NGX_FILE_APPEND,
    </p>
    <p>
      326&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NGX_FILE_CREATE_OR_OPEN,
    </p>
    <p>
      327&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NGX_FILE_DEFAULT_ACCESS);
    </p>
    <p>
      
    </p>
    <p>
      &#30475;&#30475;src/os/unix/ngx_files.h&#20013;&#23545;ngx_open_file&#30340;&#23450;&#20041;&#65306;
    </p>
    <p>
      57 #define ngx_open_file(name, mode, create, access)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;\
    </p>
    <p>
      &#160;58&#160;&#160;&#160;&#160;&#160;open((const char *) name, mode|create|O_BINARY, access)
    </p>
    <p>
      &#23454;&#38469;&#19978;&#23601;&#26159;&#35843;&#29992;&#20102;&#26631;&#20934;&#30340;open&#20989;&#25968;&#12290;
    </p>
    <p>
      &#22312;src/os/unix/ngx_files.h&#25991;&#20214;&#20013;
    </p>
    <p>
      75 #define NGX_FILE_APPEND&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;O_WRONLY|O_APPEND
    </p>
    <p>
      72 #define NGX_FILE_CREATE_OR_OPEN&#160;&#160;O_CREAT
    </p>
    <p>
      78 #define NGX_FILE_DEFAULT_ACCESS&#160;&#160;0644
    </p>
    <p>
      &#21487;&#20197;&#30475;&#21040;&#25991;&#20214;&#26159;&#20197;&#21482;&#20889;&#26041;&#24335;&#25171;&#24320;&#30340;&#65292;&#24182;&#25191;&#34892;&#36861;&#21152;&#30340;&#26041;&#24335;&#65292;&#22914;&#26524;&#25991;&#20214;&#19981;&#23384;&#22312;&#65292;&#21017;&#20808;&#21019;&#24314;&#35813;&#25991;&#20214;&#65292;&#24182;&#36171;&#20104;&#25991;&#20214;0644&#30340;&#26435;&#38480;&#65292;&#21019;&#24314;&#32773;&#21644;&#36229;&#32423;&#29992;&#25143;&#25165;&#20855;&#26377;&#35835;&#20889;&#26435;&#38480;&#65292;&#20854;&#20182;&#29992;&#25143;&#21644;&#32452;&#29992;&#25143;&#21482;&#26377;&#35835;&#26435;&#38480;&#12290;&#36825;&#37324;&#35201;&#29305;&#21035;&#27880;&#24847;&#36825;&#19968;&#28857;&#65292;&#26222;&#36890;&#29992;&#25143;&#26159;&#27809;&#21150;&#27861;&#25913;&#20889;nginx&#26085;&#24535;&#30340;&#65292;&#21478;&#22806;&#25991;&#20214;&#26159;&#21021;&#22987;&#21270;&#26102;&#20505;&#25171;&#24320;&#30340;&#21021;&#22987;&#21270;&#30340;&#65292;&#19981;&#35201;&#35797;&#22270;&#22312;&#36816;&#34892;&#36807;&#31243;&#20013;&#20197;&#36229;&#32423;&#29992;&#25143;&#26435;&#38480;&#21024;&#38500;&#25991;&#20214;&#65292;&#35748;&#20026;&#36824;&#20250;&#32487;&#32493;&#26377;&#26085;&#24535;&#25991;&#20214;&#20135;&#29983;&#35760;&#24405;&#12290;&#36825;&#20010;&#21644;apache&#26159;&#31867;&#20284;&#30340;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      328
    </p>
    <p>
      329&#160;&#160;&#160;&#160;&#160;if (ngx_log_file.fd == NGX_INVALID_FILE) {
    </p>
    <p>
      330&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_stderr(ngx_errno,
    </p>
    <p>
      331&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;[alert] could not open error log file: &quot;
    </p>
    <p>
      332&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_open_file_n &quot; \&quot;%s\&quot; failed&quot;, name);
    </p>
    <p>
      333 #if (NGX_WIN32)
    </p>
    <p>
      334&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_log(ngx_errno,
    </p>
    <p>
      335&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;could not open error log file: &quot;
    </p>
    <p>
      336&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_open_file_n &quot; \&quot;%s\&quot; failed&quot;, name);
    </p>
    <p>
      337 #endif
    </p>
    <p>
      338
    </p>
    <p>
      339&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_file.fd = ngx_stderr;
    </p>
    <p>
      340&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#22914;&#26524;&#25991;&#20214;&#21019;&#24314;&#20986;&#38169;&#65292;&#23558;&#26631;&#20934;&#38169;&#35823;&#36171;&#32473;log&#25991;&#20214;&#25551;&#36848;&#31526;&#12290;
    </p>
    <p>
      341
    </p>
    <p>
      342&#160;&#160;&#160;&#160;&#160;if (p) {
    </p>
    <p>
      343&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_free(p);
    </p>
    <p>
      344&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#20043;&#21069;&#22788;&#29702;&#25991;&#20214;&#21517;&#36825;&#19968;&#20018;&#65292;&#37117;&#26159;&#20026;&#20102;&#25171;&#24320;&#25991;&#20214;&#20570;&#20934;&#22791;&#30340;&#65292;&#23436;&#27605;&#21518;&#65292;&#23427;&#30340;&#20351;&#21629;&#20063;&#32467;&#26463;&#20102;&#65292;&#37322;&#25918;&#23384;&#20648;&#30340;&#20869;&#23384;&#12290;&#24182;&#36820;&#22238;&#65292;nginx&#30340;log&#20415;&#21021;&#22987;&#21270;&#23436;&#27605;&#12290;
    </p>
    <p>
      345
    </p>
    <p>
      346&#160;&#160;&#160;&#160;&#160;return &amp;ngx_log;
    </p>
    <p>
      347 }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388816425121" MODIFIED="1388816601023">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21021;&#22987;&#21270;log&#30340;file&#21644;log_level&#65292;
    </p>
    <p>
      log_level=NGX_LOG_NOTICE
    </p>
    <p>
      &#23558;file&#35774;&#32622;&#20026;&#20840;&#23616;&#30340;ngx_log_file&#65292;&#25171;&#24320;ngx_log_file&#65292;&#22833;&#36133;&#30340;&#35805;&#65292;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388815445290" MODIFIED="1388815447950" TEXT="ngx_ssl_init"/>
<node CREATED="1388815462049" MODIFIED="1388815463671" TEXT="ngx_save_argv"/>
<node CREATED="1388815469409" FOLDED="true" MODIFIED="1389144549607" TEXT="ngx_process_options">
<node CREATED="1388924518551" MODIFIED="1389144548118">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21021;&#22987;&#21270;ngx_cycle&#30340;prefix, conf_prefix, conf_file, conf_param&#31561;&#23383;&#27573;
    </p>
    <p>
      &#35843;&#29992;ngx_process_options&#65292;&#35774;&#32622;init_cycle&#30340;&#19968;&#20123;&#23383;&#27573;&#65292;&#36825;&#20123;&#23383;&#27573;&#26159;&#20174;&#25511;&#21046;&#21488;&#30340;&#21629;&#20196;&#20013;&#21462;&#24471;&#30340;&#65306;conf_prefix&#65288;config prefix path&#65289;&#12289;prefix&#65288;prefix path:-p prefix&#65289;&#12289;conf_file&#65288;&#37197;&#32622;&#25991;&#20214;&#36335;&#24452;:-c filenname&#65289;&#12289;conf_param(-g directives)&#65292;&#21478;&#22806;&#36824;&#25226;init_cycle.log.log_level&#35774;&#32622;&#20026;NGX_LOG_INFO&#65307;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388815479458" FOLDED="true" MODIFIED="1389144560039" TEXT="ngx_os_init">
<node CREATED="1388924564734" MODIFIED="1388924566856" TEXT="&#x521d;&#x59cb;&#x5316;&#x7cfb;&#x7edf;&#x76f8;&#x5173;&#x53d8;&#x91cf;&#xff0c;&#x5982;&#x5185;&#x5b58;&#x9875;&#x9762;&#x5927;&#x5c0f;ngx_pagesize,ngx_cacheline_size,&#x6700;&#x5927;&#x8fde;&#x63a5;&#x6570;ngx_max_sockets&#x7b49;"/>
</node>
<node CREATED="1388815556634" FOLDED="true" MODIFIED="1389078431475" TEXT="ngx_create_pidfile">
<node CREATED="1388924770518" MODIFIED="1388924772377" TEXT="&#x521b;&#x5efa;&#x8fdb;&#x7a0b;&#x8bb0;&#x5f55;&#x6587;&#x4ef6;&#xff1b;(&#x975e;NGX_PROCESS_MASTER=1&#x8fdb;&#x7a0b;&#xff0c;&#x4e0d;&#x521b;&#x5efa;&#x8be5;&#x6587;&#x4ef6;)"/>
</node>
<node CREATED="1388815486481" FOLDED="true" MODIFIED="1388924597933" TEXT="ngx_crc32_table_init">
<node CREATED="1388924595007" MODIFIED="1388924596658" TEXT="&#x521d;&#x59cb;&#x5316;CRC&#x8868;(&#x540e;&#x7eed;&#x7684;CRC&#x6821;&#x9a8c;&#x901a;&#x8fc7;&#x67e5;&#x8868;&#x8fdb;&#x884c;&#xff0c;&#x6548;&#x7387;&#x9ad8;)"/>
</node>
<node CREATED="1388815492657" FOLDED="true" MODIFIED="1389103982137" TEXT="ngx_add_inherited_sockets">
<node CREATED="1388924618831" ID="ID_1693925617" MODIFIED="1389144619750" TEXT="&#xa;    &#x89e3;&#x6790;&#x73af;&#x5883;&#x53d8;&#x91cf;NGINX_VAR=&quot;NGINX&quot;&#x4e2d;&#x7684;sockets&#xff0c;&#x5e76;&#x4fdd;&#x5b58;&#x81f3;ngx_cycle.listening&#x6570;&#x7ec4;&#xff1b;&#xa;    &#x8bbe;&#x7f6e;ngx_inherited=1&#xff1b;&#xa;&#xa;    &#x8c03;&#x7528;ngx_set_inherited_sockets()&#x9010;&#x4e00;&#x5bf9;ngx_cycle.listening&#x6570;&#x7ec4;&#x4e2d;&#x7684;sockets&#x8fdb;&#x884c;&#x8bbe;&#x7f6e;&#xff1b;&#xa;&#x8c03;&#x7528;ngx_set_inherited_sockets(&amp;init_cycle)&#xff0c;&#x521d;&#x59cb;&#x5316;init_cycle.listening&#xff0c;&#x8fd9;&#x662f;&#x4e00;&#x4e2a;ngx_listening_t&#x7684;&#x7ed3;&#x6784;&#x6570;&#x7ec4;&#xff0c;&#x5176;socket_fd&#x662f;&#x4ece;&#x73af;&#x5883;&#x53d8;&#x91cf;NGINX&#x4e2d;&#x8bfb;&#x53d6;&#x7684;&#xa;    &#x5177;&#x4f53;&#x53ef;&#x53c2;&#x8003;&lt;nginx&#x6e90;&#x7801;&#x5206;&#x6790;&#x2014;&#x521d;&#x59cb;&#x5316;&#x8fc7;&#x7a0b;&#x4e2d;&#x5904;&#x7406;&#x7ee7;&#x627f;&#x7684;sockets&gt;"/>
</node>
<node CREATED="1388815801090" FOLDED="true" MODIFIED="1388927989672" TEXT="init module index">
<node CREATED="1388815818592" MODIFIED="1388815867604" TEXT="ngx_modules&#x5728;ngx_modules.c&#x4e2d;&#x5b9e;&#x73b0;">
<node CREATED="1388815963337" MODIFIED="1388815964768" TEXT="ngx_module_names"/>
<node CREATED="1388815976201" MODIFIED="1388815979391" TEXT="ngx_modules"/>
<node CREATED="1388816029457" MODIFIED="1388816031931" TEXT="ngx_all_module_names"/>
<node CREATED="1388816040242" MODIFIED="1388816041878" TEXT="ngx_dso_abi_all_tags"/>
</node>
<node CREATED="1388926036432" MODIFIED="1388926057077" TEXT="&#x4ee3;&#x7801;">
<node CREATED="1388925990592" MODIFIED="1388926024814" TEXT="&#x5bf9;&#x5404;&#x4e2a;&#x6a21;&#x5757;&#x7684;index&#x5b57;&#x6bb5;&#x7684;&#x521d;&#x59cb;&#x5316;&#x662f;&#x5728;main&#x51fd;&#x6570;&#x4e2d;&#x8fdb;&#x884c;&#x7684;&#xff0c;&#x5982;&#x4e0b;&#x3002;&#xa; ngx_max_module = 0;  &#xa; for (i = 0; ngx_modules[i]; i++) {  &#xa;     ngx_modules[i]-&gt;index = ngx_max_module++;  &#xa; }  &#xa;&#xa;&#x53ef;&#x89c1;&#xff0c;&#x8be5;for-loop&#x6267;&#x884c;&#x540e;&#xff0c;&#x6bcf;&#x4e2a;&#x6a21;&#x5757;&#x7684;index&#x503c;&#x4fbf;&#x662f;&#x5176;&#x5728;ngx_modules[]&#x6570;&#x7ec4;&#x4e2d;&#x7684;&#x4e0b;&#x6807;&#x503c;&#xff0c;&#x4e14;&#x5168;&#x5c40;&#x53d8;&#x91cf;ngx_max_module&#x4e3a;&#x6a21;&#x5757;&#x4e2a;&#x6570;&#xff0c;&#x5bf9;&#x4e8e;&#x672c;&#x4f8b;&#x6765;&#x8bb2;&#xff0c;ngx_max_module=44&#x3002;"/>
</node>
</node>
<node BACKGROUND_COLOR="#459b12" CREATED="1388815502394" FOLDED="true" MODIFIED="1389149868572" TEXT="ngx_init_cycle">
<font BOLD="true" NAME="SansSerif" SIZE="12"/>
<node CREATED="1388817913231" MODIFIED="1388817916114" TEXT="ngx_create_pidfile"/>
<node CREATED="1388817929857" MODIFIED="1388817933030" TEXT="ngx_delete_pidfile"/>
<node CREATED="1388817944633" MODIFIED="1388817946582" TEXT="ngx_test_lockfile"/>
<node CREATED="1388817970769" MODIFIED="1388817972741" TEXT="ngx_is_init_cycle"/>
<node CREATED="1388929147249" MODIFIED="1389072436627" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388929162025" MODIFIED="1389145398528" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;1">
<node CREATED="1388929222345" ID="ID_1428001477" MODIFIED="1389072506117">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_init_cycle
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;core&#27169;&#22359;&#30340;&#38057;&#23376;create_conf&#65292;&#24182;&#19988;&#25226;&#21019;&#24314;&#30340;&#37197;&#32622;&#32467;&#26500;&#20307;&#21464;&#37327;&#23384;&#25918;&#21040;cyclep-&gt;conf_ctx&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f70808">ngx_modules[i]-&gt;type</font>&#160; != <font color="#f20d0d"><b>NGX_CORE_MODULE</b></font>) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;module = <font color="#fd0202">ngx_modules[i]-&gt;ctx</font>;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (module-&gt;create_conf) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rv = module-&gt;<font color="#fd0202">create_conf</font>(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rv == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_destroy_pool(pool);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle-&gt;conf_ctx[ngx_modules[i]-&gt;index] = rv;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_conf_parse
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;core&#27169;&#22359;&#30340;&#38057;&#23376;init_conf&#65292;&#35774;&#32622;&#21018;&#25165;&#21019;&#24314;&#30340;&#37197;&#32622;&#32467;&#26500;&#20307;&#21464;&#37327;&#65288;&#29992;&#20174;&#37197;&#32622;&#25991;&#20214;&#20013;&#35835;&#21462;&#30340;&#25968;&#25454;&#36171;&#20540;&#65289;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;type != <font color="#f20d0d"><b>NGX_CORE_MODULE)</b></font>&#160; {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;module = ngx_modules[i]-&gt;ctx;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (module-&gt;init_conf) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (module-&gt;<font color="#fb0808">init_conf</font>(cycle, cycle-&gt;conf_ctx[ngx_modules[i]-&gt;index])
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;== NGX_CONF_ERROR)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_destroy_cycle_pools(&amp;conf);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;<font color="#f70404"><b>&#25152;&#26377;&#27169;&#22359;&#30340;init_module</b></font>&#38057;&#23376;&#65292;&#21021;&#22987;&#21270;&#27169;&#22359;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;init_module) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;<font color="#f70404">init_module</font>(cycle) != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* fatal */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit(1);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388931084460" FOLDED="true" LINK="http://blog.csdn.net/kenbinzhang/article/details/4681694" MODIFIED="1389144802531" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;2">
<node CREATED="1388931101449" MODIFIED="1388931565070">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1&#12289;&#35843;&#29992;ngx_timezone_update()&#12289;ngx_timeofday()&#21644;ngx_time_update(0, 0)&#20570;&#26102;&#38388;&#26657;&#20934;&#65292;nginx&#30340;&#26102;&#38388;&#20197;&#21450;&#35745;&#25968;&#22120;&#30456;&#20851;&#30340;&#20869;&#23481;&#20197;&#21518;&#20316;&#19987;&#39064;&#20171;&#32461;&#21543;&#65307;
    </p>
    <p>
      
    </p>
    <p>
      2&#12289;&#21019;&#24314;&#19968;&#20010;&#26032;&#30340;ngx_cycle_t&#21464;&#37327;cycle&#65292;&#24182;&#19988;&#21021;&#22987;&#21270;&#20854;&#22823;&#37096;&#20998;&#30340;&#25104;&#21592;&#23383;&#27573;&#65292;&#26377;&#19968;&#20123;&#26159;&#20174;&#20256;&#20837;&#30340;old_cycle&#30452;&#25509;&#25335;&#36125;&#36807;&#26469;&#30340;&#65292;&#36825;&#20123;&#23383;&#27573;&#21253;&#25324;&#65306;log,conf_prefix,prefix,conf_file,conf_param&#65307;&#36824;&#26377;&#19968;&#20123;&#23383;&#27573;&#20250;&#21028;&#26029;&#19968;&#19979;old_cycle&#20013;&#26159;&#21542;&#23384;&#22312;&#65292;&#22914;&#26524;&#23384;&#22312;&#65292;&#21017;&#21462;&#24471;&#36825;&#20123;&#23383;&#27573;&#30340;&#21344;&#29992;&#31354;&#38388;&#65292;&#22312;cycle&#20013;&#30003;&#35831;&#31561;&#22823;&#30340;&#31354;&#38388;&#65292;&#24182;&#21021;&#22987;&#21270;&#65288;&#19981;&#25335;&#36125;&#65289;&#65292;&#21542;&#21017;&#23601;&#30003;&#35831;&#40664;&#35748;&#22823;&#23567;&#30340;&#31354;&#38388;&#65292;&#36825;&#20123;&#23383;&#27573;&#26377;:pathes,open_files,share_memory,listening&#65307;&#36824;&#26377;&#19968;&#20123;&#23383;&#27573;&#26159;&#37325;&#26032;&#21019;&#24314;&#25110;&#32773;&#31532;&#19968;&#27425;&#36171;&#20540;&#30340;&#65306;pool,new_log.log_level(=NGX_LOG_ERR),old_cycle(=old_cycle),hostname(gethostname)&#65307;
    </p>
    <p>
      &#26368;&#37325;&#35201;&#30340;&#19968;&#20010;&#23383;&#27573;&#26159;conf_ctx,&#23427;&#34987;&#21021;&#22987;&#21270;&#20026;ngx_max_module&#20010;void *&#25351;&#38024;&#65292;&#36825;&#39044;&#31034;&#30528;conf_ctx&#26159;&#25152;&#26377;&#27169;&#22359;&#30340;&#37197;&#32622;&#32467;&#26500;&#30340;&#25351;&#38024;&#25968;&#32452;&#65307;
    </p>
    <p>
      
    </p>
    <p>
      3&#12289;&#35843;&#29992;&#25152;&#26377;&#26680;&#24515;&#31867;&#27169;&#22359;&#30340;&#38057;&#23376;<font color="#f40303"><b>create_conf</b></font>&#65292;&#24182;&#25226;&#36820;&#22238;&#30340;&#37197;&#32622;&#32467;&#26500;&#25351;&#38024;&#25918;&#21040;conf_ctx&#25968;&#32452;&#20013;&#65292;&#20559;&#31227;&#20301;&#32622;&#20026;ngx_module_t.index&#65307;
    </p>
    <p>
      
    </p>
    <p>
      4&#12289;&#20174;&#21629;&#20196;&#34892;&#21644;&#37197;&#32622;&#25991;&#20214;&#20013;&#25226;&#25152;&#26377;&#37197;&#32622;&#26356;&#26032;&#21040;cycle&#30340;conf_ctx&#20013;&#65292;
    </p>
    <p>
      &#39318;&#20808;&#35843;&#29992;ngx_conf_param&#25226;&#21629;&#20196;&#34892;&#20013;&#30340;&#25351;&#20196;&#65288;-g directives&#65289;&#36716;&#25442;&#20026;&#37197;&#32622;&#32467;&#26500;&#24182;&#25226;&#25351;&#38024;&#21152;&#20837;&#21040;cycle.conf_ctx&#20013;&#65292;
    </p>
    <p>
      &#25509;&#30528;&#35843;&#29992;<b>ngx_conf_parse</b>(..,filename)&#25226;&#37197;&#32622;&#25991;&#20214;&#20013;&#30340;&#25351;&#20196;&#36716;&#25442;&#20026;&#37197;&#32622;&#32467;&#26500;&#24182;&#25226;&#25351;&#38024;&#21152;&#20837;&#21040;cycle.conf_ctx&#20013;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_conf_param&#26368;&#21518;&#20063;&#20250;&#35843;&#29992;ngx_conf_parse(..,NULL)&#65292;&#25152;&#20197;&#37197;&#32622;&#30340;&#26356;&#26032;&#20027;&#35201;&#26159;&#22312;ngx_conf_parse&#20013;&#36827;&#34892;&#30340;&#65292;&#36825;&#20010;&#20989;&#25968;&#20013;&#26377;&#19968;&#20010;for&#24490;&#29615;&#65292;&#27599;&#27425;&#24490;&#29615;&#35843;&#29992;ngx_conf_read_token&#21462;&#24471;&#19968;&#20010;&#37197;&#32622;&#25351;&#20196;&#65288;&#20197;&#65307;&#32467;&#23614;&#65289;&#65292;&#28982;&#21518;&#35843;&#29992;ngx_conf_handler&#22788;&#29702;&#36825;&#26465;&#25351;&#20196;&#65292;
    </p>
    <p>
      ngx_conf_handler&#27599;&#27425;&#37117;&#20250;&#36941;&#21382;&#25152;&#26377;&#27169;&#22359;&#30340;&#25351;&#20196;&#38598;&#65292;&#26597;&#25214;&#36825;&#26465;&#37197;&#32622;&#25351;&#20196;&#24182;&#20998;&#26512;&#20854;&#21512;&#27861;&#24615;&#65292;&#22914;&#26524;&#25351;&#20196;&#27491;&#30830;&#65292;&#21017;&#20250;&#21019;&#24314;&#37197;&#32622;&#32467;&#26500;&#24182;&#25226;&#25351;&#38024;&#21152;&#20837;&#21040;cycle.conf_ctx&#20013;&#65292;&#37197;&#32622;&#32467;&#26500;&#30340;&#36171;&#20540;&#26159;&#35843;&#29992;&#35813;&#25351;&#20196;&#30340;&#38057;&#23376;set&#23436;&#25104;&#30340;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#36941;&#21382;&#25351;&#20196;&#38598;&#30340;&#36807;&#31243;&#39318;&#20808;&#26159;&#36941;&#21382;&#25152;&#26377;&#30340;&#26680;&#24515;&#31867;&#27169;&#22359;&#65292;
    </p>
    <p>
      &#33509;&#26159;event&#31867;&#30340;&#25351;&#20196;&#65292;&#21017;&#20250;&#36941;&#21382;&#21040;ngx_events_module&#65292;&#36825;&#20010;&#27169;&#22359;&#26159;&#23646;&#20110;&#26680;&#24515;&#31867;&#30340;&#65292;&#20854;&#38057;&#23376;set&#21448;&#20250;&#23884;&#22871;&#35843;&#29992;ngx_conf_parse&#21435;&#36941;&#21382;&#25152;&#26377;&#30340;event&#31867;&#27169;&#22359;&#65292;
    </p>
    <p>
      &#21516;&#26679;&#30340;&#65292;&#33509;&#26159;http&#31867;&#25351;&#20196;&#65292;&#21017;&#20250;&#36941;&#21382;&#21040;ngx_http_module&#65292;&#35813;&#27169;&#22359;&#30340;&#38057;&#23376;set&#36827;&#19968;&#27493;&#36941;&#21382;&#25152;&#26377;&#30340;http&#31867;&#27169;&#22359;&#65292;
    </p>
    <p>
      mail&#31867;&#25351;&#20196;&#20250;&#36941;&#21382;&#21040;ngx_mail_module&#65292;&#35813;&#27169;&#22359;&#30340;&#38057;&#23376;&#36827;&#19968;&#27493;&#36941;&#21382;&#21040;&#25152;&#26377;&#30340;mail&#31867;&#27169;&#22359;&#12290;&#35201;&#29305;&#21035;&#27880;&#24847;&#30340;&#26159;&#65306;&#36825;&#19977;&#20010;&#36941;&#21382;&#36807;&#31243;&#20013;&#20250;&#22312;&#36866;&#24403;&#30340;&#26102;&#26426;&#35843;&#29992;event&#31867;&#27169;&#22359;&#12289;http&#31867;&#27169;&#22359;&#21644;mail&#31867;&#27169;&#22359;&#30340;&#21019;&#24314;&#37197;&#32622;&#21644;&#21021;&#22987;&#21270;&#37197;&#32622;&#30340;&#38057;&#23376;&#12290;&#20174;&#36825;&#37324;&#21487;&#20197;&#30475;&#20986;&#65292;event&#12289;http&#12289;mail&#19977;&#31867;&#27169;&#22359;&#30340;&#38057;&#23376;&#26159;&#37197;&#32622;&#20013;&#30340;&#25351;&#20196;&#39537;&#21160;&#30340;&#65307;
    </p>
    <p>
      
    </p>
    <p>
      5&#12289;&#35843;&#29992;&#25152;&#26377;&#26680;&#24515;&#31867;&#27169;&#22359;&#30340;&#38057;&#23376;<font color="#f50e0e"><b>init_conf</b></font>&#65292;&#25226;&#27169;&#22359;&#30340;&#37197;&#32622;&#32467;&#26500;&#20316;&#20026;&#19968;&#20010;&#21442;&#25968;&#20256;&#20837;&#65306;init_conf(cycle, cycle-&gt;conf_ctx[ngx_modules[i]-&gt;index);
    </p>
    <p>
      
    </p>
    <p>
      6&#12289;&#33719;&#24471;&#26680;&#24515;&#27169;&#22359;ngx_core_module&#30340;&#37197;&#32622;&#32467;&#26500;&#65292;&#28982;&#21518;&#35843;&#29992;ngx_create_pidfile&#21019;&#24314;pid&#25991;&#20214;&#12290;
    </p>
    <p>
      &#33719;&#21462;&#37197;&#32622;&#32467;&#26500;&#30340;&#20195;&#30721;&#65306;ccf = (ngx_core_conf_t *) ngx_get_conf(cycle-&gt;conf_ctx, ngx_core_module)&#65292;&#36825;&#37324;&#30340;ngx_get_conf&#26159;&#19968;&#20010;&#23439;&#23450;&#20041;&#65306;#define ngx_get_conf(conf_ctx, module)&#160;&#160;conf_ctx[module.index]&#65307;
    </p>
    <p>
      
    </p>
    <p>
      7&#12289;&#35843;&#29992;ngx_test_lockfile(filename,log)&#65292;ngx_create_pathes(cycle,user)&#65292;&#25509;&#30528;&#25171;&#24320;errorlog&#25991;&#20214;&#24182;&#36171;&#20540;&#32473;cycle-&gt;new_log.file&#65306;cycle-&gt;new_log.file = ngx_conf_open_file(cycle, &amp;error_log)&#65307;
    </p>
    <p>
      
    </p>
    <p>
      8&#12289;&#25171;&#24320;&#26032;&#25991;&#20214;&#65292;&#22312;&#31532;2&#27493;&#30340;&#26102;&#20505;&#25552;&#21040;cycle-&gt;open_files&#36825;&#20010;&#38142;&#34920;&#26159;&#31354;&#30340;&#65292;&#21482;&#26159;&#32473;&#23427;&#39044;&#20808;&#20998;&#37197;&#20102;&#31354;&#38388;&#65292;&#24182;&#27809;&#26377;&#25968;&#25454;&#65292;&#36825;&#37324;&#20043;&#25152;&#20197;&#21487;&#33021;&#20250;&#26377;&#25991;&#20214;&#34987;&#25171;&#24320;&#65292;&#20272;&#35745;&#26159;&#21069;&#38754;&#35835;&#37197;&#32622;&#25991;&#20214;&#30340;&#26102;&#20505;&#65292;&#35843;&#29992;&#21508;&#20010;&#38057;&#23376;&#30340;&#36807;&#31243;&#20013;&#65292;&#22635;&#20805;&#20102;&#36825;&#20010;&#38142;&#34920;&#65292;&#25226;ngx_open_file_t&#32467;&#26500;&#21464;&#37327;&#22635;&#20805;&#36827;&#26469;&#65288;&#32467;&#26500;&#20307;&#20013;&#21253;&#21547;&#35201;&#25171;&#24320;&#25991;&#20214;&#30340;&#36335;&#24452;&#20449;&#24687;&#65289;&#65292;&#36825;&#26159;&#25105;&#29468;&#27979;&#30340;&#65292;&#20043;&#21518;&#20877;&#39564;&#35777;&#65306;&#65289;&#25509;&#30528;&#20462;&#25913;&#19968;&#19979;cycle&#30340;&#25104;&#21592;&#65306;cycle-&gt;log = &amp;cycle-&gt;new_log;pool-&gt;log = &amp;cycle-&gt;new_log&#65307;
    </p>
    <p>
      
    </p>
    <p>
      9&#12289;&#21019;&#24314;&#20849;&#20139;&#20869;&#23384;&#65292;&#21644;open_files&#31867;&#20284;&#65292;&#22312;&#31532;2&#27493;&#30340;&#26102;&#20505;cycle&#65293;&gt;share_memory&#20063;&#21021;&#22987;&#21270;&#20026;&#19968;&#20010;&#31354;&#30340;&#38142;&#34920;&#65292;&#20063;&#26159;&#39044;&#20998;&#37197;&#20102;&#31354;&#38388;&#65292;&#22914;&#26524;&#27492;&#26102;&#38142;&#34920;&#20013;&#24050;&#32463;&#34987;&#22635;&#20805;&#20102;ngx_shm_zone_t&#32467;&#26500;&#21464;&#37327;&#65288;&#20854;&#20013;&#21253;&#21547;&#38656;&#35201;&#20849;&#20139;&#20869;&#23384;&#30340;&#23610;&#23544;&#21644;&#26631;&#35782;&#31561;&#20449;&#24687;&#65289;&#65292;&#37027;&#20040;&#36825;&#37324;&#23601;&#20250;&#20998;&#37197;&#20849;&#20139;&#20869;&#23384;&#65292;&#24182;&#19988;&#35843;&#29992;&#21512;&#36866;&#30340;&#21021;&#22987;&#21270;&#38057;&#23376;&#21021;&#22987;&#21270;&#20998;&#37197;&#30340;&#20849;&#20139;&#20869;&#23384;&#65292;&#27599;&#22359;&#20849;&#20139;&#20869;&#23384;&#37117;&#20250;&#26377;name&#26631;&#35782;&#65292;&#36825;&#37324;&#20063;&#20250;&#20570;&#19968;&#20123;&#25490;&#37325;&#65292;&#24050;&#32463;&#20998;&#37197;&#30340;&#23601;&#19981;&#20250;&#20877;&#21435;&#20998;&#37197;&#65292;&#20174;&#23545;open_files&#21644;share_memory&#30340;&#22788;&#29702;&#36807;&#31243;&#21487;&#20197;&#30475;&#20986;&#65292;nginx&#22312;&#36164;&#28304;&#31649;&#29702;&#19978;&#26159;&#38598;&#20013;&#20998;&#37197;&#30340;&#65292;&#35831;&#27714;&#36164;&#28304;&#30340;&#26102;&#20505;&#20998;&#37197;&#35828;&#26126;&#24615;&#30340;&#32467;&#26500;&#21464;&#37327;&#65292;&#28982;&#21518;&#22312;&#24688;&#24403;&#30340;&#26102;&#26426;&#25165;&#21435;&#30495;&#27491;&#20998;&#37197;&#36164;&#28304;&#65307;
    </p>
    <p>
      
    </p>
    <p>
      10&#12289;&#22788;&#29702;listening sockets&#65292;cycle-&gt;listening&#26159;ngx_listening_t&#32467;&#26500;&#30340;&#25968;&#32452;&#65292;&#25226;cycle-&gt;listening&#20110;old_cycle-&gt;listening&#36827;&#34892;&#27604;&#36739;&#65292;&#35774;&#32622;cycle-&gt;listening&#30340;&#19968;&#20123;&#29366;&#24577;&#20449;&#24687;&#65292;
    </p>
    <p>
      &#25509;&#30528;&#35843;&#29992;ngx_open_listening_sockets(cycle)&#21551;&#21160;cycle-&gt;listening&#20013;&#30340;&#25152;&#26377;&#30417;&#21548;socket&#65292;&#24490;&#29615;&#35843;&#29992;socket,bind,listen&#23436;&#25104;&#26381;&#21153;&#31471;&#30417;&#21548;socket&#30340;&#21551;&#21160;&#12290;
    </p>
    <p>
      &#25509;&#30528;&#35843;&#29992;ngx_configure_listening_sockets(cycle)&#37197;&#32622;&#30417;&#21548;socket&#65292;&#20250;&#26681;&#25454;ngx_listening_t&#20013;&#30340;&#29366;&#24577;&#20449;&#24687;&#35774;&#32622;socket&#30340;&#35835;&#20889;&#32531;&#23384;&#21644;TCP_DEFER_ACCEPT&#65307;
    </p>
    <p>
      
    </p>
    <p>
      11&#12289;&#35843;&#29992;&#25152;&#26377;&#27169;&#22359;&#30340;&#38057;&#23376;<font color="#f90606"><b>init_module</b></font>&#65307;
    </p>
    <p>
      
    </p>
    <p>
      12&#12289;&#20851;&#38381;&#25110;&#32773;&#21024;&#38500;&#19968;&#20123;&#27531;&#30041;&#22312;old_cycle&#20013;&#30340;&#36164;&#28304;&#65292;&#39318;&#20808;&#37322;&#25918;&#19981;&#29992;&#30340;&#20849;&#20139;&#20869;&#23384;&#65292;&#25509;&#30528;&#20851;&#38381;&#19981;&#20351;&#29992;&#30340;&#30417;&#21548;socket&#65292;&#20877;&#20851;&#38381;&#19981;&#20351;&#29992;&#30340;&#25171;&#24320;&#25991;&#20214;&#65292;&#26368;&#21518;&#25226;old_cycle&#25918;&#20837;ngx_old_cycles&#20013;&#65292;&#36825;&#26159;&#19968;&#20010;ngx_cycle_t *&#30340;&#25968;&#32452;&#65292;&#26368;&#21518;&#35774;&#23450;&#19968;&#20010;&#23450;&#26102;&#22120;&#65292;&#23450;&#26399;&#22238;&#35843;ngx_cleaner_event&#28165;&#29702;ngx_old_cycles&#65292;&#36825;&#37324;&#35774;&#32622;&#20102;30000ms&#28165;&#29702;&#19968;&#27425;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080330560" ID="ID_429337595" MODIFIED="1389106775344" TEXT="ngx_open_listening_sockets">
<node CREATED="1389080384455" MODIFIED="1389080413215">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_init_cycle &#22312;&#35299;&#26512;&#23436;&#37197;&#32622;&#25991;&#20214;&#20043;&#21518;&#65292;
    </p>
    <p>
      &#20250;&#35843;&#29992;&#36825;&#20010;&#25509;&#21475;&#25171;&#24320;cycle-&gt;listening&#25968;&#32452;&#20013;&#30340;&#25152;&#26377;&#30417;&#21548;&#22871;&#25509;&#21475;&#65292;
    </p>
    <p>
      &#20854;&#23454;&#23601;&#26159;&#39034;&#24207;&#35843;&#29992;socket&#12289; setsockopt&#12289;bind&#12289;listen&#20960;&#20010;&#31995;&#32479;&#35843;&#29992;&#65292;
    </p>
    <p>
      &#22914;&#26524;&#20107;&#20214;&#39537;&#21160;&#19981;&#26159;&#21033;&#29992;&#24322;&#27493;IO&#27169;&#22411;&#65292;&#36824;&#20250;&#25226;&#36825;&#20123;&#30417;&#21548;&#22871;&#25509;&#21475;&#35774;&#32622;&#20026;&#38750;&#38459;&#22622;&#26041;&#24335;&#65307;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080358743" ID="ID_1158710083" MODIFIED="1389145170146" TEXT="ngx_configure_listening_sockets">
<node CREATED="1389080445710" MODIFIED="1389080457494">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#32039;&#25509;&#30528;ngx_open_listening_sockets&#25509;&#21475;&#20043;&#21518;&#35843;&#29992;&#36825;&#20010;&#25509;&#21475;&#21033;&#29992;setsockopt&#31995;&#32479;&#35843;&#29992;&#37197;&#32622;&#36825;&#20123;&#30417;&#21548;&#22871;&#25509;&#21475;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1388929486211" FOLDED="true" ID="ID_1159741802" MODIFIED="1389072278931" TEXT="ngx_conf_parse&#xa;(ngx_conf_file.c)">
<node CREATED="1388929500354" FOLDED="true" MODIFIED="1389144861985" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388929517993" MODIFIED="1389144858979">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#36825;&#20010;&#20989;&#25968;&#20013;&#26377;&#19968;&#20010;for&#24490;&#29615;&#65292;&#27599;&#27425;&#24490;&#29615;&#35843;&#29992;ngx_conf_read_token&#21462;&#24471;&#19968;&#20010;&#37197;&#32622;&#25351;&#20196;&#65288;&#20197;&#65307;&#32467;&#23614;&#65289;&#65292;&#28982;&#21518;&#35843;&#29992;ngx_conf_handler&#22788;&#29702;&#36825;&#26465;&#25351;&#20196;&#65292;ngx_conf_handler&#27599;&#27425;&#37117;&#20250;&#36941;&#21382;&#25152;&#26377;&#27169;&#22359;&#30340;&#25351;&#20196;&#38598;&#65292;&#26597;&#25214;&#36825;&#26465;&#37197;&#32622;&#25351;&#20196;&#24182;&#20998;&#26512;&#20854;&#21512;&#27861;&#24615;&#65292;&#22914;&#26524;&#25351;&#20196;&#27491;&#30830;&#65292;&#21017;&#20250;&#21019;&#24314;&#37197;&#32622;&#32467;&#26500;&#24182;&#25226;&#25351;&#38024;&#21152;&#20837;&#21040;cycle.conf_ctx&#20013;&#65292;&#37197;&#32622;&#32467;&#26500;&#30340;&#36171;&#20540;&#26159;&#35843;&#29992;&#35813;&#25351;&#20196;&#30340;&#38057;&#23376;set&#23436;&#25104;&#30340;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388929868009" MODIFIED="1389107418214" TEXT="ngx_conf_handler">
<node CREATED="1388929500354" FOLDED="true" ID="ID_1418391254" LINK="http://my.oschina.net/fqing/blog/80867" MODIFIED="1390274441161" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388929517993" MODIFIED="1390274734631">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <b><font color="#0925fd">ngx_conf_handler</font></b>
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22788;&#29702;&#27169;&#22359;&#30340;&#25351;&#20196;&#38598;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* look up the directive in the appropriate modules */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f80707">ngx_modules[i]-&gt;type</font>&#160; != NGX_CONF_MODULE
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&amp; ngx_modules[i]-&gt;type != cf-&gt;module_type)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cmd = <font color="#fb0404">ngx_modules[i]-&gt;commands</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cmd == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for ( /* void */ ; cmd-&gt;name.len; cmd++) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (name-&gt;len != cmd-&gt;name.len) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_strcmp(name-&gt;data, cmd-&gt;name.data) != 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* is the directive's location right ? */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!(cmd-&gt;type &amp; cf-&gt;cmd_type)) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cmd-&gt;type &amp; NGX_CONF_MULTI) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multi = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto not_allowed;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!(cmd-&gt;type &amp; NGX_CONF_BLOCK) &amp;&amp; last != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;directive /&quot;%s/&quot; is not terminated by /&quot;;/&quot;&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name-&gt;data);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((cmd-&gt;type &amp; NGX_CONF_BLOCK) &amp;&amp; last != NGX_CONF_BLOCK_START) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;directive /&quot;%s/&quot; has no opening /&quot;{/&quot;&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name-&gt;data);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* is the directive's argument count right ? */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!(cmd-&gt;type &amp; NGX_CONF_ANY)) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cmd-&gt;type &amp; NGX_CONF_FLAG) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cf-&gt;args-&gt;nelts != 2) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto invalid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (cmd-&gt;type &amp; NGX_CONF_1MORE) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cf-&gt;args-&gt;nelts &lt; 2) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto invalid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (cmd-&gt;type &amp; NGX_CONF_2MORE) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cf-&gt;args-&gt;nelts &lt; 3) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto invalid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (cf-&gt;args-&gt;nelts &gt; NGX_CONF_MAX_ARGS) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto invalid;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (!(cmd-&gt;type &amp; argument_number[cf-&gt;args-&gt;nelts - 1]))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto invalid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* set up the directive's configuration context */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf = NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f20d0d">cmd-&gt;type</font>&#160; &amp; NGX_DIRECT_CONF) {/* direct&#25351;&#20196;&#65292;&#19968;&#33324;&#26159;core&#31867;&#22411;&#27169;&#22359;&#25351;&#20196;&#65292;&#27604;&#22914; daemon, work_processes */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf = ((void **) cf-&gt;ctx)[ngx_modules[i]-&gt;index];/* &#30452;&#25509;&#23384;&#20648;&#65292;&#27604;&#22914; ngx_core_conf_t */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (cmd-&gt;type &amp; NGX_MAIN_CONF) {/* main&#25351;&#20196;&#65292;&#27604;&#22914; events, http&#65292;&#27492;&#26102;&#25351;&#21521;&#23427;&#30340;&#22320;&#22336;&#65292;&#36825;&#26679;&#25165;&#33021;&#20998;&#37197;&#25968;&#32452;&#25351;&#38024;&#65292;&#23384;&#20648;&#23646;&#20110;&#23427;&#30340;&#32467;&#26500;&#20307;&#20204;&#12290; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf = &amp;(((void **) cf-&gt;ctx)[ngx_modules[i]-&gt;index]);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (cf-&gt;ctx) {/* &#26377;&#31227;&#20301;&#30340;&#65292;&#22240;&#27492;http&#26377;&#19977;&#20010;&#37096;&#20998;&#65292;main, srv, conf&#65292;&#36825;&#20010;&#23601;&#20026;&#27492;&#32780;&#35774;&#35745;&#30340;&#65292;&#32487;&#32493;&#19979;&#38754;&#30340;sendfile&#25351;&#20196; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;confp = *(void **) ((char *) cf-&gt;ctx + <font color="#f50e0e">cmd-&gt;conf</font>);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (confp) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf = confp[ngx_modules[i]-&gt;ctx_index];
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#35843;&#24230;&#25351;&#20196;&#30340;&#38057;&#23376;set
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rv = <font color="#f70404">cmd-&gt;set</font>(cf, cmd, conf);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rv == NGX_CONF_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rv == NGX_CONF_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/&quot;%s/&quot; directive %s&quot;, name-&gt;data, rv);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1388815518113" FOLDED="true" MODIFIED="1388927851847" TEXT="ngx_signal_process">
<node CREATED="1388924706878" MODIFIED="1388924709219" TEXT="&#x82e5;&#x6709;&#x4fe1;&#x53f7;&#xff0c;&#x5219;&#x8fdb;&#x5165;ngx_signal_process()&#x5904;&#x7406;"/>
</node>
<node CREATED="1388815527945" FOLDED="true" MODIFIED="1388927852343" TEXT="ngx_init_signals">
<node CREATED="1388924721183" MODIFIED="1388924723148" TEXT="&#x8c03;&#x7528;ngx_init_signals()&#x521d;&#x59cb;&#x5316;&#x4fe1;&#x53f7;&#xff1b;&#x4e3b;&#x8981;&#x5b8c;&#x6210;&#x4fe1;&#x53f7;&#x5904;&#x7406;&#x7a0b;&#x5e8f;&#x7684;&#x6ce8;&#x518c;"/>
</node>
<node CREATED="1388815539410" FOLDED="true" MODIFIED="1388927852855" TEXT="ngx_daemon">
<node CREATED="1388924751415" MODIFIED="1388924753236" TEXT="&#x82e5;&#x65e0;&#x7ee7;&#x627f;sockets&#xff0c;&#x4e14;&#x8bbe;&#x7f6e;&#x4e86;&#x5b88;&#x62a4;&#x8fdb;&#x7a0b;&#x6807;&#x8bc6;&#xff0c;&#x5219;&#x8c03;&#x7528;ngx_daemon()&#x521b;&#x5efa;&#x5b88;&#x62a4;&#x8fdb;&#x7a0b;"/>
</node>
<node CREATED="1388815551105" MODIFIED="1388815552096" TEXT="ngx_open_pipes"/>
<node BACKGROUND_COLOR="#47a433" COLOR="#080f05" CREATED="1388815601954" MODIFIED="1389591599404" STYLE="fork" TEXT="process_cycle">
<edge COLOR="#808080" STYLE="bezier" WIDTH="thin"/>
<font BOLD="true" NAME="SansSerif" SIZE="12"/>
<node CREATED="1388815607274" MODIFIED="1389591710581" TEXT="ngx_single_process_cycle"/>
<node BACKGROUND_COLOR="#3b9627" CREATED="1388815615217" ID="ID_259231819" MODIFIED="1390382833244" TEXT="ngx_master_process_cycle">
<font BOLD="true" NAME="SansSerif" SIZE="12"/>
<node CREATED="1388931843778" FOLDED="true" LINK="http://blog.csdn.net/xiajun07061225/article/details/9241179" MODIFIED="1390385021310" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388931863641" MODIFIED="1390385060052">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      void&#160;
    </p>
    <p>
      ngx_master_process_cycle(ngx_cycle_t *cycle)&#160;
    </p>
    <p>
      {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*title;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*p;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n, sigio;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigset_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;set;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct itimerval&#160;&#160;&#160;itv;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;live;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delay;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_listening_t&#160;&#160;&#160;*ls;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_core_conf_t&#160;&#160;&#160;*ccf;&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#20449;&#21495;&#22788;&#29702;&#35774;&#32622;&#24037;&#20316;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigemptyset(&amp;set);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigaddset(&amp;set, SIGCHLD);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigaddset(&amp;set, SIGALRM);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigaddset(&amp;set, SIGIO);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigaddset(&amp;set, SIGINT);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigaddset(&amp;set, ngx_signal_value(NGX_RECONFIGURE_SIGNAL));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigaddset(&amp;set, ngx_signal_value(NGX_REOPEN_SIGNAL));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigaddset(&amp;set, ngx_signal_value(NGX_NOACCEPT_SIGNAL));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigaddset(&amp;set, ngx_signal_value(NGX_TERMINATE_SIGNAL));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigaddset(&amp;set, ngx_signal_value(NGX_SHUTDOWN_SIGNAL));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigaddset(&amp;set, ngx_signal_value(NGX_CHANGEBIN_SIGNAL));&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (sigprocmask(SIG_BLOCK, &amp;set, NULL) == -1) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;sigprocmask() failed&quot;);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigemptyset(&amp;set);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;size = sizeof(master_process);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; i &lt; ngx_argc; i++) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size += ngx_strlen(ngx_argv[i]) + 1;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;title = ngx_pnalloc(cycle-&gt;pool, size);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;p = ngx_cpymem(title, master_process, sizeof(master_process) - 1);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; i &lt; ngx_argc; i++) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*p++ = ' ';&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p = ngx_cpystrn(p, (u_char *) ngx_argv[i], size);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_setproctitle(title);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ccf = (ngx_core_conf_t *) ngx_get_conf(cycle-&gt;conf_ctx, ngx_core_module);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#20854;&#20013;&#21253;&#21547;&#20102;fork&#20135;&#29983;&#23376;&#36827;&#31243;&#30340;&#20869;&#23481;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_start_worker_processes(cycle, ccf-&gt;worker_processes,&#160;&#160;NGX_PROCESS_RESPAWN);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//Cache&#31649;&#29702;&#36827;&#31243;&#19982;cache&#21152;&#36733;&#36827;&#31243;&#30340;&#20027;&#27969;&#31243;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_start_cache_manager_processes(cycle, 0);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_new_binary = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;delay = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sigio = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;live = 1;&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for ( ;; ) {//&#24490;&#29615;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (delay) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_sigalrm) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sigio = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delay *= 2;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_sigalrm = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;termination cycle: %d&quot;, delay);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_interval.tv_sec = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_interval.tv_usec = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_value.tv_sec = delay / 1000;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_value.tv_usec = (delay % 1000 ) * 1000;&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (setitimer(ITIMER_REAL, &amp;itv, NULL) == -1) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;setitimer() failed&quot;);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0, &quot;sigsuspend&quot;);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sigsuspend(&amp;set);//master&#36827;&#31243;&#20241;&#30496;&#65292;&#31561;&#24453;&#25509;&#21463;&#20449;&#21495;&#34987;&#28608;&#27963;&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_time_update();&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;wake up, sigio %i&quot;, sigio);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#26631;&#24535;&#20301;&#20026;1&#34920;&#31034;&#38656;&#35201;&#30417;&#25511;&#25152;&#26377;&#23376;&#36827;&#31243;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_reap) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reap = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0, &quot;reap children&quot;);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;live = ngx_reap_children(cycle);//&#31649;&#29702;&#23376;&#36827;&#31243;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160; //&#24403;live&#26631;&#24535;&#20301;&#20026;0&#65288;&#34920;&#31034;&#25152;&#26377;&#23376;&#36827;&#31243;&#24050;&#32463;&#36864;&#20986;&#65289;&#12289;ngx_terminate&#26631;&#24535;&#20301;&#20026;1&#25110;&#32773;ngx_quit&#26631;&#24535;&#20301;&#20026;1&#34920;&#31034;&#35201;&#36864;&#20986;master&#36827;&#31243; &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!live &amp;&amp; (ngx_terminate || ngx_quit)) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_master_process_exit(cycle);//&#36864;&#20986;master&#36827;&#31243;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//ngx_terminate&#26631;&#24535;&#20301;&#20026;1&#65292;&#24378;&#21046;&#20851;&#38381;&#26381;&#21153;&#65292;&#21457;&#36865;TERM&#20449;&#21495;&#21040;&#25152;&#26377;&#23376;&#36827;&#31243;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_terminate) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (delay == 0) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delay = 50;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (sigio) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sigio--;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sigio = ccf-&gt;worker_processes + 2 /* cache processes */;&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (delay &gt; 1000) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle, SIGKILL);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ngx_signal_value(NGX_TERMINATE_SIGNAL));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//ngx_quit&#26631;&#24535;&#20301;&#20026;1&#65292;&#20248;&#38597;&#30340;&#20851;&#38381;&#26381;&#21153;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_quit) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ngx_signal_value(NGX_SHUTDOWN_SIGNAL));//&#21521;&#25152;&#26377;&#23376;&#36827;&#31243;&#21457;&#36865;quit&#20449;&#21495;&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ls = cycle-&gt;listening.elts;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (n = 0; n &lt; cycle-&gt;listening.nelts; n++) {//&#20851;&#38381;&#30417;&#21548;&#31471;&#21475;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_close_socket(ls[n].fd) == -1) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_EMERG, cycle-&gt;log, ngx_socket_errno,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_socket_n &quot; %V failed&quot;,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;ls[n].addr_text);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle-&gt;listening.nelts = 0;&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//ngx_reconfigure&#26631;&#24535;&#20301;&#20026;1&#65292;&#37325;&#26032;&#35835;&#21462;&#37197;&#32622;&#25991;&#20214;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160; //nginx&#19981;&#20250;&#35753;&#21407;&#26469;&#30340;worker&#23376;&#36827;&#31243;&#20877;&#37325;&#26032;&#35835;&#21462;&#37197;&#32622;&#25991;&#20214;&#65292;&#20854;&#31574;&#30053;&#26159;&#37325;&#26032;&#21021;&#22987;&#21270;ngx_cycle_t&#32467;&#26500;&#20307;&#65292;&#29992;&#23427;&#26469;&#35835;&#21462;&#26032;&#30340;&#39069;&#37197;&#32622;&#25991;&#20214;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#20877;&#21019;&#24314;&#26032;&#30340;&#39069;worker&#23376;&#36827;&#31243;&#65292;&#38144;&#27585;&#26087;&#30340;worker&#23376;&#36827;&#31243;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_reconfigure) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reconfigure = 0;&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//ngx_new_binary&#26631;&#24535;&#20301;&#20026;1&#65292;&#24179;&#28369;&#21319;&#32423;Nginx&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_new_binary) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_worker_processes(cycle, ccf-&gt;worker_processes, &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NGX_PROCESS_RESPAWN);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_cache_manager_processes(cycle, 0);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_noaccepting = 0;&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;reconfiguring&quot;);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#21021;&#22987;&#21270;ngx_cycle_t&#32467;&#26500;&#20307;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle = ngx_init_cycle(cycle);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cycle == NULL) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle = (ngx_cycle_t *) ngx_cycle;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_cycle = cycle;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ccf = (ngx_core_conf_t *) ngx_get_conf(cycle-&gt;conf_ctx,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_core_module);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#21019;&#24314;&#26032;&#30340;worker&#23376;&#36827;&#31243;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_worker_processes(cycle, ccf-&gt;worker_processes,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NGX_PROCESS_JUST_RESPAWN);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_cache_manager_processes(cycle, 1);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* allow new processes to start */&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_msleep(100);&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;live = 1;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#21521;&#25152;&#26377;&#23376;&#36827;&#31243;&#21457;&#36865;QUIT&#20449;&#21495;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ngx_signal_value(NGX_SHUTDOWN_SIGNAL));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//ngx_restart&#26631;&#24535;&#20301;&#22312;ngx_noaccepting&#65288;&#34920;&#31034;&#27491;&#22312;&#20572;&#27490;&#25509;&#21463;&#26032;&#30340;&#36830;&#25509;&#65289;&#20026;1&#30340;&#26102;&#20505;&#34987;&#35774;&#32622;&#20026;1.&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#37325;&#21551;&#23376;&#36827;&#31243;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_restart) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_restart = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_worker_processes(cycle, ccf-&gt;worker_processes,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NGX_PROCESS_RESPAWN);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_cache_manager_processes(cycle, 0);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;live = 1;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//ngx_reopen&#26631;&#24535;&#20301;&#20026;1&#65292;&#37325;&#26032;&#25171;&#24320;&#25152;&#26377;&#25991;&#20214;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_reopen) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reopen = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;reopening logs&quot;);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reopen_files(cycle, ccf-&gt;user);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ngx_signal_value(NGX_REOPEN_SIGNAL));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#24179;&#28369;&#21319;&#32423;Nginx&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_change_binary) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_change_binary = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;changing binary&quot;);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_new_binary = ngx_exec_new_binary(cycle, ngx_argv);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//ngx_noaccept&#20026;1&#65292;&#34920;&#31034;&#25152;&#26377;&#23376;&#36827;&#31243;&#19981;&#20877;&#22788;&#29702;&#26032;&#30340;&#36830;&#25509;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_noaccept) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_noaccept = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_noaccepting = 1;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ngx_signal_value(NGX_SHUTDOWN_SIGNAL));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388931843778" FOLDED="true" LINK="http://blog.csdn.net/kenbinzhang/article/details/4696730" MODIFIED="1389099255989" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388931863641" MODIFIED="1390385657877">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22312;ngx_master_process_cycle&#20013;&#65292;&#20250;&#26681;&#25454;&#37197;&#32622;&#25991;&#20214;&#30340;worker_processes&#20540;&#21019;&#24314;&#22810;&#20010;&#23376;&#36827;&#31243;&#65292;&#21363;&#19968;&#20010;master&#36827;&#31243;&#21644;&#22810;&#20010;worker&#36827;&#31243;&#12290;&#36827;&#31243;&#20043;&#38388;&#12289;&#36827;&#31243;&#19982;&#22806;&#37096;&#20043;&#38388;&#20445;&#25345;&#36890;&#20449;&#65292;&#36827;&#31243;&#20043;&#38388;&#26159;&#36890;&#36807;socketpair&#36827;&#34892;&#36890;&#20449;&#30340;&#65292;socketpair&#26159;&#19968;&#23545;&#20840;&#21452;&#24037;&#30340;&#26080;&#21517;socket&#65292;&#21487;&#20197;&#24403;&#20316;&#31649;&#36947;&#20351;&#29992;&#65292;&#21644;&#31649;&#36947;&#19981;&#21516;&#30340;&#26159;&#65292;&#27599;&#26465;socket&#26082;&#21487;&#20197;&#35835;&#20063;&#21487;&#20197;&#20889;&#65292;&#32780;&#31649;&#36947;&#21482;&#33021;&#29992;&#20110;&#20889;&#25110;&#32773;&#29992;&#20110;&#35835;&#65307;&#36827;&#31243;&#19982;&#22806;&#37096;&#20043;&#38388;&#26159;&#36890;&#36807;&#20449;&#21495;&#36890;&#20449;&#30340;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      master&#36827;&#31243;&#20027;&#35201;&#36827;&#34892;&#19968;&#20123;&#20840;&#23616;&#24615;&#30340;&#21021;&#22987;&#21270;&#24037;&#20316;&#21644;&#31649;&#29702;worker&#30340;&#24037;&#20316;&#65307;&#20107;&#20214;&#22788;&#29702;&#26159;&#22312;worker&#20013;&#36827;&#34892;&#30340;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#36827;&#31243;&#21551;&#21160;&#30340;&#36807;&#31243;&#20013;&#65292;&#26377;&#19968;&#20123;&#37325;&#35201;&#30340;&#20840;&#23616;&#25968;&#25454;&#20250;&#34987;&#35774;&#32622;&#65292;&#26368;&#37325;&#35201;&#30340;&#26159;&#36827;&#31243;&#34920;ngx_processes&#65292;master&#27599;&#21019;&#24314;&#19968;&#20010;worker&#37117;&#20250;&#25226;&#19968;&#20010;&#35774;&#32622;&#22909;&#30340;ngx_process_t&#32467;&#26500;&#21464;&#37327;&#25918;&#20837;ngx_processes&#20013;&#65292;&#36827;&#31243;&#34920;&#38271;&#24230;&#20026;1024&#65292;&#21018;&#21019;&#24314;&#30340;&#36827;&#31243;&#23384;&#25918;&#22312;ngx_process_slot&#20301;&#32622;&#65292;ngx_last_process&#26159;&#36827;&#31243;&#34920;&#20013;&#26368;&#21518;&#19968;&#20010;&#23384;&#37327;&#36827;&#31243;&#30340;&#19979;&#19968;&#20010;&#20301;&#32622;&#65292;ngx_process_t&#26159;&#36827;&#31243;&#22312;nginx&#20013;&#30340;&#25277;&#35937;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#36827;&#31243;&#30340;&#21551;&#21160;&#36807;&#31243;&#26159;&#27604;&#36739;&#37325;&#35201;&#30340;&#19968;&#20010;&#29615;&#33410;&#65292;&#20026;&#20102;&#25226;&#36825;&#20010;&#36807;&#31243;&#20998;&#26512;&#36879;&#24443;&#65292;&#19979;&#38754;&#20250;&#22810;&#37319;&#29992;&#27880;&#37322;&#20195;&#30721;&#30340;&#26041;&#24335;&#20998;&#26512;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#39318;&#20808;&#20998;&#26512;ngx_master_process_cycle&#20989;&#25968;&#65292;&#21487;&#20197;&#20998;&#35299;&#20026;&#20197;&#19979;&#21508;&#27493;&#39588;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      1&#12289;master&#35774;&#32622;&#19968;&#20123;&#38656;&#35201;&#22788;&#29702;&#30340;&#20449;&#21495;&#65292;&#36825;&#20123;&#20449;&#21495;&#21253;&#25324;SIGCHLD,SIGALRM,SIGIO,SIGINT,NGX_RECONFIGURE_SIGNAL(SIGHUP),NGX_REOPEN_SIGNAL(SIGUSR1),
    </p>
    <p>
      NGX_NOACCEPT_SIGNAL(SIGWINCH),NGX_TERMINATE_SIGNAL(SIGTERM),NGX_SHUTDOWN_SIGNAL(SIGQUIT),
    </p>
    <p>
      NGX_CHANGEBIN_SIGNAL(SIGUSR2)&#65307;
    </p>
    <p>
      
    </p>
    <p>
      2&#12289;&#35843;&#29992;ngx_setproctilte&#35774;&#32622;&#36827;&#31243;&#26631;&#39064;&#65292;title = &quot;master process&quot; + ngx_argv[0] + ... + ngx_argv[ngx_argc-1]&#65307;
    </p>
    <p>
      
    </p>
    <p>
      3&#12289;&#35843;&#29992;ngx_start_worker_processes(cycle, ccf-&gt;worker_processes, NGX_PROCESS_RESPAWN)&#21551;&#21160;worker&#36827;&#31243;&#65307;
    </p>
    <p>
      
    </p>
    <p>
      4&#12289;&#35843;&#29992;ngx_start_cache_manager_processes(cycle, 0)&#21551;&#21160;&#25991;&#20214;cache&#31649;&#29702;&#36827;&#31243;&#65292;&#26377;&#20123;&#27169;&#22359;&#38656;&#35201;&#25991;&#20214;cache&#65292;&#27604;&#22914;fastcgi&#27169;&#22359;&#65292;&#36825;&#20123;&#27169;&#22359;&#20250;&#25226;&#25991;&#20214;cache&#36335;&#24452;&#28155;&#21152;&#21040;cycle-&gt;paths&#20013;&#65292;&#25991;&#20214;cache&#31649;&#29702;&#36827;&#31243;&#20250;&#23450;&#26399;&#35843;&#29992;&#36825;&#20123;&#27169;&#22359;&#30340;&#25991;&#20214;cache&#22788;&#29702;&#38057;&#23376;&#22788;&#29702;&#19968;&#19979;&#25991;&#20214;cache&#65307;
    </p>
    <p>
      
    </p>
    <p>
      5&#12289;master&#24490;&#29615;&#22788;&#29702;&#20449;&#21495;&#37327;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_new_binary = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;delay = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;live = 1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for ( ;; ) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// delay&#29992;&#26469;&#35774;&#32622;&#31561;&#24453;worker&#36864;&#20986;&#30340;&#26102;&#38388;&#65292;master&#25509;&#25910;&#20102;&#36864;&#20986;&#20449;&#21495;&#21518;&#39318;&#20808;&#21457;&#36865;&#36864;&#20986;&#20449;&#21495;&#32473;worker&#65292;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#32780;worker&#36864;&#20986;&#38656;&#35201;&#19968;&#20123;&#26102;&#38388;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (delay) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delay *= 2;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0,&#160;&quot;temination cycle: %d&quot;, delay);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_interval.tv_sec = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_interval.tv_usec = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_value.tv_sec = delay / 1000;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_value.tv_usec = (delay % 1000 ) * 1000;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#35774;&#32622;&#23450;&#26102;&#22120;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (setitimer(ITIMER_REAL, &amp;itv, NULL) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,&quot;setitimer() failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0, &quot;sigsuspend&quot;);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25346;&#36215;&#20449;&#21495;&#37327;&#65292;&#31561;&#24453;&#23450;&#26102;&#22120;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sigsuspend(&amp;set);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_time_update(0, 0);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0, &quot;wake up&quot;);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25910;&#21040;&#20102;SIGCHLD&#20449;&#21495;&#65292;&#26377;worker&#36864;&#20986;&#65288;ngx_reap==1&#65289;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_reap) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reap = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0, &quot;reap children&quot;);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#22788;&#29702;&#25152;&#26377;worker&#65292;&#22914;&#26524;&#26377;worker&#24322;&#24120;&#36864;&#20986;&#21017;&#37325;&#21551;&#36825;&#20010;worker&#65292;&#22914;&#26524;&#25152;&#26377;worker&#37117;&#36864;&#20986;,&#36820;&#22238;0&#36171;&#20540;&#32473;live
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;live = ngx_reap_children(cycle);
    </p>
    <p>
      /*&#27492;&#26102;&#65292;ngx_reap&#20026;1&#20102;&#65292;master&#36827;&#31243;&#35843;&#29992;ngx_reap_children&#22788;&#29702;&#25152;&#26377;&#30340;worker&#23376;&#36827;&#31243;&#12290;
    </p>
    <p>
      &#36825;&#20010;ngx_reap_children&#20989;&#25968;&#19981;&#20809;&#25285;&#20219;&#36215;&#20026;worker&#36827;&#31243;&#21892;&#21518;&#30340;&#24037;&#20316;(&#23376;&#36827;&#31243;&#30340;&#25910;&#23608;&#22788;&#29702;&#26159;&#22312;&#20449;&#21495;&#22788;&#29702;&#20989;&#25968;&#30452;&#25509;&#23436;&#25104;&#30340;)&#65292;&#36824;&#25285;&#20219;&#20102;&#37325;&#21551;worker&#36827;&#31243;&#30340;&#20219;&#21153;&#12290;
    </p>
    <p>
      &#24403;&#28982;&#65292;&#36825;&#20010;&#37325;&#21551;worker&#36827;&#31243;&#26159;&#22312;&#19968;&#20123;&#24322;&#24120;&#24773;&#20917;&#19979;&#23548;&#33268;worker&#36827;&#31243;&#36864;&#20986;&#21518;&#30340;&#37325;&#21551;&#65292;&#24182;&#19981;&#26159;&#22312;&#8220;&#21531;&#35201;&#33251;&#27515;&#12289;&#33251;&#19981;&#24471;&#19981;&#27515;&#8221;&#30340;&#26102;&#20505;&#30340;&#39037;&#24378;&#25269;&#25239;&#12290;
    </p>
    <p>
      Nginx&#20855;&#26377;&#39640;&#24230;&#30340;&#27169;&#22359;&#21270;&#20248;&#21183;&#65292;&#27599;&#20010;&#20154;&#37117;&#21487;&#20197;&#24320;&#21457;&#33258;&#24049;&#38656;&#35201;&#30340;&#27169;&#22359;&#31243;&#24207;&#65292;&#38590;&#20813;&#20250;&#20986;&#29616;&#19968;&#20123;bug&#24341;&#36215;worker&#36827;&#31243;&#30340;&#23849;&#28291;&#65292;&#22240;&#27492;master&#36827;&#31243;&#23601;&#32937;&#36127;&#36215;&#20102;&#23481;&#38169;&#20219;&#21153;&#65292;&#36825;&#26679;&#25165;&#33021;&#22815;&#20445;&#35777;24&#23567;&#26102;&#30340;&#25552;&#20379;&#26381;&#21153;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#22914;&#26524;worker&#37117;&#24050;&#32463;&#36864;&#20986;&#65292;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#24182;&#19988;&#25910;&#21040;&#20102;NGX_CMD_TERMINATE&#21629;&#20196;&#25110;&#32773;SIGTERM&#20449;&#21495;&#25110;&#32773;SIGINT&#20449;&#21495;(ngx_terminate=1)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25110;&#32773;NGX_CMD_QUIT&#21629;&#20196;&#25110;&#32773;SIGQUIT&#20449;&#21495;(ngx_quit=1)&#65292;&#21017;master&#36864;&#20986;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!live &amp;&amp; (ngx_terminate || ngx_quit)) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_master_process_exit(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25910;&#21040;&#20102;NGX_CMD_TERMINATE&#21629;&#20196;&#25110;&#32773;SIGTERM&#20449;&#21495;&#25110;&#32773;SIGINT&#20449;&#21495;&#65292;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#36890;&#30693;&#25152;&#26377;worker&#36864;&#20986;&#65292;&#24182;&#19988;&#31561;&#24453;worker&#36864;&#20986;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_terminate) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#35774;&#32622;&#24310;&#26102;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (delay == 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delay = 50;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (delay &gt; 1000) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#24310;&#26102;&#24050;&#21040;&#65292;&#32473;&#25152;&#26377;worker&#21457;&#36865;SIGKILL&#20449;&#21495;&#65292;&#24378;&#21046;&#26432;&#27515;worker
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle, SIGKILL);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#32473;&#25152;&#26377;worker&#21457;&#36865;SIGTERM&#20449;&#21495;&#65292;&#36890;&#30693;worker&#36864;&#20986;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle,ngx_signal_value(NGX_TERMINATE_SIGNAL));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25910;&#21040;&#20102;NGX_CMD_QUIT&#21629;&#20196;&#25110;&#32773;SIGQUIT&#20449;&#21495;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_quit) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#32473;&#25152;&#26377;worker&#21457;&#36865;SIGQUIT&#20449;&#21495;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f90101">&#160;ngx_signal_worker_processes</font>(cycle,ngx_signal_value(<font color="#f90101">NGX_SHUTDOWN_SIGNAL</font>));
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20851;&#38381;&#25152;&#26377;&#30417;&#21548;&#30340;socket
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ls = cycle-&gt;listening.elts;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (n = 0; n &lt; cycle-&gt;listening.nelts; n++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_close_socket(ls[n].fd) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_EMERG, cycle-&gt;log, ngx_socket_errno,ngx_close_socket_n &quot; %V failed&quot;,&amp;ls[n].addr_text);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle-&gt;listening.nelts = 0;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      /*&#36825;&#27573;&#20301;&#20110;master cycle&#20013;&#30340;&#20195;&#30721;&#26159;&#23545;SIGQUIT&#20449;&#21495;&#36827;&#34892;&#30340;&#22788;&#29702;&#21160;&#20316;&#12290;ngx_quit&#23601;&#37027;&#20010;&#20840;&#23616;&#21464;&#37327;&#20043;&#19968;&#65292;&#24403;master&#36827;&#31243;&#25910;&#21040;&#36825;&#20010;&#20449;&#21495;&#30340;&#26102;&#20505;&#65292;&#23601;&#35843;&#29992;ngx_signal_handler(&#23450;&#20041;&#22312;src/os/unix/ngx_process.c&#25991;&#20214;&#20013;)&#35774;&#32622;ngx_quit&#20026;1&#12290;&#22240;&#27492;master&#20174;sigsuspend&#36820;&#22238;&#21518;&#65292;&#26816;&#27979;&#21040;ngx_quit&#20026;1&#65292;&#23601;&#35843;&#29992;ngx_signal_worker_processes&#20989;&#25968;&#21521;&#27599;&#20010;worker&#36827;&#31243;&#36882;&#36865;SIGQUIT&#20449;&#21495;&#65292;&#36890;&#30693;worker&#36827;&#31243;&#20204;&#24320;&#22987;&#36864;&#20986;&#24037;&#20316;&#12290;&#28982;&#21518;&#23601;&#20851;&#38381;&#25152;&#26377;&#30340;&#30417;&#21548;&#22871;&#25509;&#23383;&#12290;&#26368;&#21518;&#23621;&#28982;&#26469;&#20102;&#19968;&#20010;continue&#23601;&#21448;&#22238;&#21040;&#20102;cycle&#20013;&#65292;&#19981;&#26159;&#36864;&#20986;&#21527;&#65311;&#20026;&#20160;&#20040;&#26159;continue&#32780;&#19981;&#26159;exit&#21602;&#12290;&#21069;&#38754;&#24050;&#32463;&#25552;&#36807;&#20102;&#65292;master&#36827;&#31243;&#26159;&#24149;&#21518;&#32773;&#65292;&#38656;&#35201;&#23432;&#25252;&#30528;worker&#36827;&#31243;&#20204;&#65292;&#26082;&#28982;&#26159;&#23432;&#25252;&#21738;&#33021;worker&#36827;&#31243;&#27809;&#25764;&#36864;&#65292;&#33258;&#24049;&#23601;&#20808;&#25764;&#36864;&#20102;&#21602;&#12290;&#30001;&#20110;&#65292;worker&#36827;&#31243;&#26159;master&#30340;&#23376;&#36827;&#31243;&#65292;&#25152;&#20197;worker&#36864;&#20986;&#21518;&#65292;<font color="#f30404">&#23558;&#21457;&#36865;SIGCHLD&#20449;&#21495;&#32473;master&#36827;&#31243;</font>&#65292;&#22909;&#35753;master&#36827;&#31243;&#20026;&#20854;&#21892;&#21518;&#65288;&#21542;&#21017;&#23558;&#20986;&#29616;&#8220;&#20725;&#23608;&#8221;&#36827;&#31243;&#65289;&#12290;&#22312;master&#36827;&#31243;&#25910;&#21040;SIGCHLD&#20449;&#21495;&#65292;<font color="#fb0404">&#23601;&#20250;&#35774;&#32622;&#20840;&#23616;&#21464;&#37327;ngx_reap&#20026;1</font>&#20102;&#12290;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25910;&#21040;&#20102;SIGHUP&#20449;&#21495;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_reconfigure) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reconfigure = 0;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20195;&#30721;&#24050;&#32463;&#34987;&#26367;&#25442;&#65292;&#37325;&#21551;worker&#65292;&#19981;&#38656;&#35201;&#37325;&#26032;&#21021;&#22987;&#21270;&#37197;&#32622;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_new_binary) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_worker_processes(cycle, ccf-&gt;worker_processes,NGX_PROCESS_RESPAWN);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_cache_manager_processes(cycle, 0);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_noaccepting = 0;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;reconfiguring&quot;);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#37325;&#26032;&#21021;&#22987;&#21270;&#37197;&#32622;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle = ngx_init_cycle(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cycle == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle = (ngx_cycle_t *) ngx_cycle;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#37325;&#21551;worker
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_cycle = cycle;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ccf = (ngx_core_conf_t *) ngx_get_conf(cycle-&gt;conf_ctx,ngx_core_module);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_worker_processes(cycle, ccf-&gt;worker_processes,NGX_PROCESS_JUST_RESPAWN);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_cache_manager_processes(cycle, 1);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;live = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle,&#160; ngx_signal_value(NGX_SHUTDOWN_SIGNAL));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#24403;ngx_noaccepting=1&#30340;&#26102;&#20505;&#20250;&#25226;ngx_restart&#35774;&#20026;1&#65292;&#37325;&#21551;worker
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_restart) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_restart = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_worker_processes(cycle, ccf-&gt;worker_processes,NGX_PROCESS_RESPAWN);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_start_cache_manager_processes(cycle, 0);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;live = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25910;&#21040;SIGUSR1&#20449;&#21495;&#65292;&#37325;&#26032;&#25171;&#24320;log&#25991;&#20214;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_reopen) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reopen = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;reopening logs&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reopen_files(cycle, ccf-&gt;user);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle,&#160; ngx_signal_value(NGX_REOPEN_SIGNAL));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25910;&#21040;SIGUSR2&#20449;&#21495;&#65292;&#28909;&#20195;&#30721;&#26367;&#25442;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_change_binary) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_change_binary = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;changing binary&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#35843;&#29992;execve&#25191;&#34892;&#26032;&#30340;&#20195;&#30721;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_new_binary = ngx_exec_new_binary(cycle, ngx_argv);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25910;&#21040;SIGWINCH&#20449;&#21495;&#65292;&#19981;&#20877;&#25509;&#25910;&#35831;&#27714;&#65292;worker&#36864;&#20986;&#65292;master&#19981;&#36864;&#20986;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_noaccept) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_noaccept = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_noaccepting = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_signal_worker_processes(cycle,ngx_signal_value(NGX_SHUTDOWN_SIGNAL));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388930247330" MODIFIED="1389078504027" TEXT="ngx_start_worker_processes">
<node CREATED="1388932028178" FOLDED="true" MODIFIED="1389107101771" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388932040042" MODIFIED="1389099148769">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#30495;&#27491;&#21019;&#24314;worker&#23376;&#36827;&#31243;&#30340;&#20989;&#25968;&#26159;ngx_start_worker_processes&#65292;&#36825;&#20010;&#20989;&#25968;&#26412;&#36523;&#24456;&#31616;&#21333;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      static void
    </p>
    <p>
      ngx_start_worker_processes(ngx_cycle_t *cycle, ngx_int_t n, ngx_int_t type)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;i;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_channel_t&#160;&#160;ch;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;start worker processes&quot;);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#20256;&#36882;&#32473;&#20854;&#20182;worker&#23376;&#36827;&#31243;&#30340;&#21629;&#20196;&#65306;&#25171;&#24320;&#36890;&#20449;&#31649;&#36947;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ch.command = NGX_CMD_OPEN_CHANNEL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#21019;&#24314;n&#20010;worker&#23376;&#36827;&#31243;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; i &lt; n; i++) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cpu_affinity = ngx_get_cpu_affinity(i);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ngx_spawn_process&#21019;&#24314;worker&#23376;&#36827;&#31243;&#24182;&#21021;&#22987;&#21270;&#30456;&#20851;&#36164;&#28304;&#21644;&#23646;&#24615;&#65292;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#28982;&#21518;&#25191;&#34892;&#23376;&#36827;&#31243;&#30340;&#25191;&#34892;&#20989;&#25968;ngx_worker_process_cycle
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f70404">ngx_spawn_process</font>(cycle, <font color="#fa0505">ngx_worker_process_cycle</font>, NULL,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;worker process&quot;, type);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21521;&#20043;&#21069;&#24050;&#32463;&#21019;&#24314;&#30340;&#25152;&#26377;worker&#24191;&#25773;&#24403;&#21069;&#21019;&#24314;&#30340;worker&#36827;&#31243;&#30340;&#20449;&#24687;&#65292;&#21518;&#38754;&#20250;&#35814;&#32454;&#20998;&#26512;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ch.pid = ngx_processes[ngx_process_slot].pid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ch.slot = ngx_process_slot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ch.fd = ngx_processes[ngx_process_slot].channel[0];
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f90606">ngx_pass_open_channel</font>(cycle, &amp;ch);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;&#160;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388932298578" MODIFIED="1389079316907" TEXT="// for i = 0 to n&#xa;     ngx_spawn_process">
<node CREATED="1389063891967" FOLDED="true" MODIFIED="1389065189198" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node BACKGROUND_COLOR="#ffff00" CREATED="1389063906575" ID="ID_1502592810" MODIFIED="1389245151401">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#31532;&#19977;&#20010;&#35201;&#21078;&#24320;&#30340;&#20989;&#25968;&#26159;&#21019;&#24314;&#23376;&#36827;&#31243;&#30340;
    </p>
    <p>
      ngx_pid_t ngx_spawn_process(ngx_cycle_t *cycle,&#160;&#160;ngx_spawn_proc_pt proc, void *data, char *name, ngx_int_t respawn)&#65292;
    </p>
    <p>
      &#36825;&#20010;&#20989;&#25968;&#23450;&#20041;&#22312;src/os/unix/ngx_process.c&#20013;&#65292;proc&#26159;&#23376;&#36827;&#31243;&#30340;&#25191;&#34892;&#20989;&#25968;&#65292;data&#26159;&#20854;&#21442;&#25968;&#65292;name&#26159;&#23376;&#36827;&#31243;&#30340;&#21517;&#23383;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_long&#160;&#160;&#160;&#160;&#160;on;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_pid_t&#160;&#160;pid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;s; // &#23558;&#35201;&#21019;&#24314;&#30340;&#23376;&#36827;&#31243;&#22312;&#36827;&#31243;&#34920;&#20013;&#30340;&#20301;&#32622;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (respawn &gt;= 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26367;&#25442;&#36827;&#31243;ngx_processes[respawn]&#65292;&#21487;&#23433;&#20840;&#37325;&#29992;&#35813;&#36827;&#31243;&#34920;&#39033;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s = respawn;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20808;&#25214;&#21040;&#19968;&#20010;&#34987;&#22238;&#25910;&#30340;&#36827;&#31243;&#34920;&#39033;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (s = 0; s &lt; ngx_last_process; s++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_processes[s].pid == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#36827;&#31243;&#34920;&#24050;&#28385;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (s == NGX_MAX_PROCESSES) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;no more than %d processes can be spawned&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NGX_MAX_PROCESSES);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_INVALID_PID;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#19981;&#26159;&#20998;&#31163;&#30340;&#23376;&#36827;&#31243;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (respawn != NGX_PROCESS_DETACHED) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Solaris 9 still has no AF_LOCAL */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#21019;&#24314;socketpair&#29992;&#20110;&#36827;&#31243;&#38388;&#36890;&#20449;&#65292;master&#36827;&#31243;&#20026;&#27599;&#20010;worker&#21019;&#24314;&#19968;&#23545;socket&#65292;&#160;master&#36827;&#31243;&#31354;&#38388;&#25171;&#24320;&#25152;&#26377;socketpair&#30340;channel[0]&#65292;channel[1]&#20004;&#31471;&#21477;&#26564;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#24403;&#21019;&#24314;&#19968;&#20010;worker&#30340;&#26102;&#20505;&#65292;&#36825;&#20010;worker&#20250;&#32487;&#25215;master&#24403;&#21069;&#24050;&#32463;&#21019;&#24314;&#24182;&#25171;&#24320;&#30340;&#25152;&#26377;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;socketpair&#65292;&#36825;&#20010;worker&#21021;&#22987;&#21270;&#30340;&#26102;&#20505;&#65288;&#35843;&#29992;ngx_worker_process_init&#65289;&#20250;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#20851;&#38381;&#25481;&#26412;&#36827;&#31243;&#23545;&#24212;socketpair&#30340;channel[0]&#21644;&#20854;&#20182;worker&#23545;&#24212;&#30340;channel[1]&#65292;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#20445;&#25345;&#25171;&#24320;&#26412;&#36827;&#31243;&#23545;&#24212;socketpair&#30340;channel[1]&#21644;&#20854;&#20182;worker&#23545;&#24212;&#30340;channel[0]&#65292;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#24182;&#30417;&#21548;&#26412;&#36827;&#31243;&#23545;&#24212;socketpair&#30340;channel[1]&#30340;&#21487;&#35835;&#20107;&#20214;&#12290;&#36825;&#26679;&#65292;<font color="#f80b0b">&#27599;&#20010;worker&#23601; </font>
    </p>
    <p>
      <font color="#f80b0b">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#25317;&#26377;&#20102;&#20854;&#20182;worker&#30340;channel[0]&#65292;&#21487;&#20197;sendmsg(channel[0], ...)&#21521;&#20854;&#20182;worker </font>
    </p>
    <p>
      <font color="#f80b0b">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#21457;&#36865;&#28040;&#24687;</font>&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#32454;&#24515;&#30340;&#35835;&#32773;&#20250;&#21457;&#29616;&#65292;&#20808;&#20110;&#24403;&#21069;worker&#21019;&#24314;&#30340;worker&#36890;&#36807;&#32487;&#25215;&#24471;&#21040;&#20102;&#20854;channel[0],
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#20294;&#26159;&#20043;&#21518;&#21019;&#24314;&#30340;&#36827;&#31243;&#30340;channel[0]&#35813;&#22914;&#20309;&#33719;&#24471;&#21602;&#65292;&#31572;&#26696;&#22312;&#19978;&#38754;&#65288;ngx_start_worker_processes)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;master&#22312;&#21019;&#24314;&#24182;&#21551;&#21160;&#23436;&#25104;&#19968;&#20010;worker&#20043;&#21518;&#65292;&#20250;&#35843;&#29992;ngx_pass_open_channel
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#25226;&#36825;&#20010;worker&#30340;channel[0]&#21644;&#36827;&#31243;id&#12289;&#22312;&#36827;&#31243;&#34920;&#20013;&#30340;&#20559;&#31227;slot&#24191;&#25773;&#32473;&#25152;&#26377;&#20854;&#20182;&#24050;&#32463;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#21019;&#24314;&#30340;worker&#65292;&#36825;&#26679;&#65292;&#21019;&#24314;&#23436;&#25152;&#26377;&#36827;&#31243;&#20043;&#21518;&#65292;&#27599;&#20010;worker&#23601;&#33719;&#24471;&#20102;&#25152;&#26377;&#20854;&#20182;worker
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#30340;channel[0]&#20102;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21019;&#24314;&#19968;&#23545;&#24050;&#32463;&#36830;&#25509;&#30340;&#26080;&#21517;socket
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (socketpair(AF_UNIX, SOCK_STREAM, 0, ngx_processes[s].channel) == -1)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;socketpair() failed while spawning /&quot;%s/&quot;&quot;, name);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_INVALID_PID;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug2(NGX_LOG_DEBUG_CORE, cycle-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;channel %d:%d&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].channel[0],
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].channel[1]);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#35774;&#32622;socket&#20026;&#38750;&#38459;&#22622;&#27169;&#24335;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_nonblocking(ngx_processes[s].channel[0]) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_nonblocking_n &quot; failed while spawning /&quot;%s/&quot;&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_channel(ngx_processes[s].channel, cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_INVALID_PID;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_nonblocking(ngx_processes[s].channel[1]) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_nonblocking_n &quot; failed while spawning /&quot;%s/&quot;&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_channel(ngx_processes[s].channel, cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_INVALID_PID;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#24320;&#21551;channel[0]&#30340;&#28040;&#24687;&#39537;&#21160;IO
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;on = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ioctl(ngx_processes[s].channel[0], FIOASYNC, &amp;on) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;ioctl(FIOASYNC) failed while spawning /&quot;%s/&quot;&quot;, name);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_channel(ngx_processes[s].channel, cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_INVALID_PID;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#35774;&#32622;channel[0]&#30340;&#23646;&#20027;&#65292;&#25511;&#21046;channel[0]&#30340;SIGIO&#20449;&#21495;&#21482;&#21457;&#32473;&#36825;&#20010;&#36827;&#31243;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (fcntl(ngx_processes[s].channel[0], F_SETOWN, ngx_pid) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;fcntl(F_SETOWN) failed while spawning /&quot;%s/&quot;&quot;, name);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_channel(ngx_processes[s].channel, cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_INVALID_PID;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#33509;&#36827;&#31243;&#25191;&#34892;&#20102;exec&#21518;&#20851;&#38381;socket
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (fcntl(ngx_processes[s].channel[0], F_SETFD, FD_CLOEXEC) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;fcntl(FD_CLOEXEC) failed while spawning /&quot;%s/&quot;&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_channel(ngx_processes[s].channel, cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_INVALID_PID;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (fcntl(ngx_processes[s].channel[1], F_SETFD, FD_CLOEXEC) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;fcntl(FD_CLOEXEC) failed while spawning /&quot;%s/&quot;&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_channel(ngx_processes[s].channel, cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_INVALID_PID;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#29992;&#20110;&#30417;&#21548;&#21487;&#35835;&#20107;&#20214;&#30340;socket
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f70404">ngx_channel</font>&#160;= ngx_processes[s].channel[1];
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].channel[0] = -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].channel[1] = -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35774;&#32622;&#24403;&#21069;&#23376;&#36827;&#31243;&#30340;&#36827;&#31243;&#34920;&#39033;&#32034;&#24341;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_process_slot = s;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#21019;&#24314;&#23376;&#36827;&#31243;
    </p>
    <p>
      &#160;&#160;&#160;&#160;pid = fork();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;switch (pid) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case -1:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;fork() failed while spawning /&quot;%s/&quot;&quot;, name);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_channel(ngx_processes[s].channel, cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_INVALID_PID;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case 0:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#35774;&#32622;&#24403;&#21069;&#23376;&#36827;&#31243;&#30340;&#36827;&#31243;id
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_pid = ngx_getpid();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23376;&#36827;&#31243;&#36816;&#34892;&#25191;&#34892;&#20989;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proc(cycle, data);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;default:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;start %s %P&quot;, name, pid);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35774;&#32622;&#19968;&#20123;&#36827;&#31243;&#34920;&#39033;&#23383;&#27573;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_processes[s].pid = pid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_processes[s].exited = 0;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#26367;&#25442;&#36827;&#31243;ngx_processes[respawn]&#65292;&#19981;&#29992;&#35774;&#32622;&#20854;&#20182;&#36827;&#31243;&#34920;&#39033;&#23383;&#27573;&#20102;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (respawn &gt;= 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return pid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35774;&#32622;&#20854;&#20182;&#30340;&#36827;&#31243;&#34920;&#39033;&#23383;&#27573;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_processes[s].proc = proc;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_processes[s].data = data;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_processes[s].name = name;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_processes[s].exiting = 0;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35774;&#32622;&#36827;&#31243;&#34920;&#39033;&#30340;&#19968;&#20123;&#29366;&#24577;&#23383;&#27573;
    </p>
    <p>
      &#160;&#160;&#160;&#160;switch (respawn) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case NGX_PROCESS_NORESPAWN:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].respawn = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].just_spawn = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].detached = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case NGX_PROCESS_JUST_SPAWN:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].respawn = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].just_spawn = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].detached = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case NGX_PROCESS_RESPAWN:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].respawn = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].just_spawn = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].detached = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case NGX_PROCESS_JUST_RESPAWN:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].respawn = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].just_spawn = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].detached = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#20998;&#31163;&#30340;&#23376;&#36827;&#31243;&#65292;&#19981;&#21463;master&#25511;&#21046;&#65311;
    </p>
    <p>
      &#160;&#160;&#160;&#160;case NGX_PROCESS_DETACHED:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].respawn = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].just_spawn = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[s].detached = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (s == ngx_last_process) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_last_process++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return pid;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node BACKGROUND_COLOR="#3b9627" CREATED="1388930272346" MODIFIED="1390011510222" TEXT="ngx_worker_process_cycle">
<arrowlink DESTINATION="ID_259231819" ENDARROW="Default" ENDINCLINATION="-62;-102;" ID="Arrow_ID_1060630299" STARTARROW="Default" STARTINCLINATION="171;-33;"/>
<node CREATED="1388932573234" FOLDED="true" LINK="http://blog.csdn.net/kenbinzhang/article/details/4696742" MODIFIED="1389104713978" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388932593882" ID="ID_1961689213" MODIFIED="1390254172837">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      
    </p>
    <p>
      static void
    </p>
    <p>
      ngx_worker_process_cycle(ngx_cycle_t *cycle, void *data)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_t&#160;&#160;*c;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160; <font color="#f40b0b">ngx_process</font>&#160;= NGX_PROCESS_WORKER;
    </p>
    <p>
      &#160;&#160;&#160; /*&#36827;&#20837;&#21021;&#22987;&#21270;&#23601;&#23558;&#20840;&#23616;&#21464;&#37327;ngx_process&#35774;&#32622;&#20026;worker&#36827;&#31243;&#30340;&#26631;&#24535;&#65292;&#30001;&#20110;&#36825;&#20010;&#21464;&#37327;&#26159;&#20174;master&#36827;&#31243;&#22797;&#21046;&#36807;&#26469;&#30340;&#65292;&#25152;&#20197;&#27809;&#35774;&#32622;&#21069;&#23601;&#26159;master&#36827;&#31243;&#30340;&#26631;&#24535;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#22312;master&#36827;&#31243;&#20013;&#36825;&#20010;&#21464;&#37327;&#34987;&#35774;&#32622;&#20026;NGX_PROCESS_MASTER&#65307;*/
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#21021;&#22987;&#21270;
    </p>
    <p>
      &#160;&#160;&#160;<font color="#f40b0b">&#160;ngx_worker_process_init</font>(cycle, 1);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_setproctitle(&quot;worker process&quot;);
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_THREADS)
    </p>
    <p>
      &#160;&#160;&#160;// &#30053;&#21435;&#20851;&#20110;&#32447;&#31243;&#30340;&#20195;&#30721;
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for ( ;; ) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#36864;&#20986;&#29366;&#24577;&#24050;&#35774;&#32622;&#65292;&#20851;&#38381;&#25152;&#26377;&#36830;&#25509;,ngx_exiting&#26159;&#22312;worker&#36827;&#31243;&#25910;&#21040;SIGQUIT&#20449;&#21495;&#21518;&#35774;&#32622;&#30340;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_exiting) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c = cycle-&gt;connections;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* worker&#36827;&#31243;&#36864;&#20986;&#21069;&#65292;&#20808;&#24471;&#22788;&#29702;&#23436;&#27599;&#20010;connection&#19978;&#24050;&#32463;&#21457;&#29983;&#30340;&#20107;&#20214;&#12290; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (i = 0; i &lt; cycle-&gt;connection_n; i++) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* THREAD: lock */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (c[i].fd != -1 &amp;&amp; c[i].idle) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c[i].close = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c[i].read-&gt;handler(c[i].read);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* &#22788;&#29702;&#23436;&#25152;&#26377;&#20107;&#20214;&#21518;&#65292;&#35843;&#29992;ngx_worker_process_exit&#20989;&#25968;&#65292;worker&#36827;&#31243;&#36864;&#20986;&#12290; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_event_timer_rbtree.root == ngx_event_timer_rbtree.sentinel)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;exiting&quot;);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f40b0b">ngx_worker_process_exit</font>(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0, &quot;worker cycle&quot;);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* &#36825;&#37324;&#26159;worker&#36827;&#31243;&#22788;&#29702;&#20107;&#20214;&#30340;&#26680;&#24515;&#24320;&#22987;&#12290;&#20063;&#21363;&#26159;&#65292;worker&#36827;&#31243;&#20174;&#37324;&#24320;&#22987;&#20570;&#19968;&#20123;&#29305;&#23450;&#30340;&#20107;&#24773;&#20102;&#65292;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#25105;&#20204;&#23436;&#20840;&#21487;&#20197;&#20462;&#25913;&#27492;&#22788;&#30340;&#20195;&#30721;&#65292;&#35753;Nginx&#20026;&#25105;&#20204;&#20570;&#19968;&#20123;&#20854;&#20182;&#30340;&#20107;&#24773;&#65292;&#21621;&#21621;&#12290; */ &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n<font color="#f90a0a">gx_process_events_and_timers</font>(cycle);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25910;&#21040;NGX_CMD_TERMINATE&#21629;&#20196;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_terminate) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;exiting&quot;);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#28165;&#29702;&#21518;&#36827;&#31243;&#36864;&#20986;&#65292;&#20250;&#35843;&#29992;&#25152;&#26377;&#27169;&#22359;&#30340;&#38057;&#23376;exit_process
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f00b0b">ngx_worker_process_exit</font>(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* &#25910;&#21040;NGX_CMD_QUIT&#21629;&#20196;,worker&#36827;&#31243;&#25910;&#21040;&#20102;SIGQUIT&#20449;&#21495;&#65292;&#22914;&#26524;&#27492;&#26102;worker&#36827;&#31243;&#19981;&#26159;&#22788;&#20110;exiting&#29366;&#24577;&#65292;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#23601;&#23558;&#35774;&#32622;ngx_exiting&#20026;1&#65292;&#35753;&#20854;&#36827;&#20837;exiting&#29366;&#24577;&#65307;&#21516;&#26102;&#20851;&#38381;&#30417;&#21548;&#22871;&#25509;&#21475;&#12290; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_quit) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_quit = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0,&quot;gracefully shutting down&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_setproctitle(&quot;worker process is shutting down&quot;);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!ngx_exiting) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20851;&#38381;&#30417;&#21548;socket&#65292;&#35774;&#32622;&#36864;&#20986;&#29366;&#24577;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f30404">ngx_close_listening_sockets</font>(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_exiting = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25910;&#21040;NGX_CMD_REOPEN&#21629;&#20196;&#65292;&#37325;&#26032;&#25171;&#24320;log
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_reopen) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reopen = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, cycle-&gt;log, 0, &quot;reopening logs&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reopen_files(cycle, -1);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388930301538" MODIFIED="1389244954104" TEXT="ngx_worker_process_init">
<node CREATED="1388932704738" FOLDED="true" LINK="http://blog.csdn.net/marcky/article/details/6013502" MODIFIED="1389244942303" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388932718970" MODIFIED="1390379626264">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      worker&#23376;&#36827;&#31243;&#30340;&#21021;&#22987;&#21270;&#20989;&#25968;&#26159;ngx_worker_process_init(ngx_cycle_t *cycle, ngx_uint_t priority)&#65292;&#36825;&#20010;&#20989;&#25968;&#21487;&#20998;&#35299;&#20026;&#20197;&#19979;&#27493;&#39588;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      2&#12289;&#20840;&#23616;&#24615;&#30340;&#35774;&#32622;&#65292;&#26681;&#25454;&#20840;&#23616;&#30340;&#37197;&#32622;&#20449;&#24687;&#35774;&#32622;&#25191;&#34892;&#29615;&#22659;&#12289;&#20248;&#20808;&#32423;&#12289;&#38480;&#21046;&#12289;setgid&#12289;setuid&#12289;&#20449;&#21495;&#21021;&#22987;&#21270;&#31561;&#65307;
    </p>
    <p>
      
    </p>
    <p>
      3&#12289;<font color="#fb0808">&#35843;&#29992;&#25152;&#26377;&#27169;&#22359;&#30340;&#38057;&#23376;init_process&#65307;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;init_process) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#fb0808">ngx_modules[i]-&gt;init_process</font>(cycle) == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* fatal */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit(2);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      4&#12289;<font color="#fa0909">&#20851;&#38381;&#19981;&#20351;&#29992;&#30340;socket&#65292;&#20851;&#38381;&#24403;&#21069;worker&#30340;channel[0]&#21477;&#26564;&#21644;&#20854;&#20182;worker&#30340;channel[1]&#21477;&#26564;&#65292;&#24403;&#21069;worker&#20250;&#20351;&#29992;&#20854;&#20182;worker&#30340;channel[0]&#21477;&#26564;&#21457;&#36865;&#28040;&#24687;&#65292;&#20351;&#29992;&#24403;&#21069;worker&#30340;channel[1]&#21477;&#26564;&#30417;&#21548;&#21487;&#35835;&#20107;&#20214; </font>
    </p>
    <p>
      <font color="#fa0909">ngx_processes&#25968;&#32452;&#20013;&#23384;&#20648;&#30340;&#26159;&#27599;&#20010;worker&#36827;&#31243;&#30340;&#36164;&#28304;&#65292;&#26159;master&#36827;&#31243;&#36127;&#36131;&#21019;&#24314;&#30340;&#12290; &#22240;&#27492;&#21019;&#24314;&#19968;&#20010;worker&#36827;&#31243;&#30340;&#26102;&#20505;&#65292;&#23601;&#19968;&#21516;&#23558;&#36825;&#20123;&#36164;&#28304;&#22797;&#21046;&#36807;&#26469;&#20102;&#65292;&#25152;&#20197;&#27492;&#22788;&#23601;&#20851;&#38381;&#26080;&#29992;&#30340;channel&#8212;&#8212;&#20854;&#20182;worker&#36827;&#31243;&#30340;&#35835;&#31471;&#25991;&#20214;&#25551;&#36848;&#31526;&#65292;&#20445;&#30041;&#20889;&#31471;&#25991;&#20214;&#25551;&#36848;&#31526;&#20570;worker&#38388;&#30340;&#36890;&#20449;&#20043;&#29992;&#12290; </font>
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (n = 0; n &lt; ngx_last_process; n++) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_processes[n].pid == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (n == ngx_process_slot) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;&#160;&#160;/*&#20840;&#23616;&#21464;&#37327;ngx_process_slot&#30340;&#20540;&#26159;&#21019;&#24314;worker&#36827;&#31243;&#30340;&#26102;&#20505;&#65292;&#20174; master&#36827;&#31243;&#22797;&#21046;&#36807;&#26469;&#30340;&#65292;&#25152;&#20197;&#27492;&#22788;ngx_process_slot&#23601;&#25351;&#26412;worker &#36827;&#31243;&#22312;ngx_process_slot&#25968;&#32452;&#20013;&#30340;&#32034;&#24341;&#20301;&#32622;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#27492;&#22788;&#19981;&#22788;&#29702;&#26412;worker &#36827;&#31243;&#65292;&#25152;&#20197;&#36339;&#36807;*/
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_processes[n].channel[1] == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (close(ngx_processes[n].channel[1]) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,&quot;close() channel failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;&#160;
    </p>
    <p>
      /*
    </p>
    <p>
      &#20851;&#38381;&#26412;worker&#36827;&#31243;channel&#30340;&#20889;&#31471;&#25991;&#20214;&#25551;&#36848;&#31526;&#65292;&#22240;&#20026;&#27599;&#20010;worker&#36827;&#31243;&#21482;&#20174;&#33258;&#24049;&#30340;channel &#19978;&#35835;&#65292;&#32780;&#19981;&#20250;&#20889;&#12290;&#20889;&#33258;&#24049;channel&#30340;&#26159;master&#21644;&#20854;&#20182;worker&#36827;&#31243;&#12290;&#36825;&#20063;&#26159;&#19978;&#38754;&#20026;&#20160;&#20040;&#35201;&#20851;&#38381;&#20854;&#20182;worker&#36827;&#31243;channel&#30340;&#35835;&#31471;&#12290;
    </p>
    <p>
      */
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (close(ngx_processes[ngx_process_slot].channel[0]) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,&quot;close() channel failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      5&#12289;&#22312;&#24403;&#21069;worker&#30340;channel[1]&#21477;&#26564;&#30417;&#21548;&#21487;&#35835;&#20107;&#20214;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (<font color="#fc0707">ngx_add_channel_event</font>(cycle, ngx_channel, NGX_READ_EVENT,&#160;<font color="#fd0e0e">ngx_channel_handler</font>)&#160;&#160;&#160;&#160;&#160;&#160;&#160;== NGX_ERROR)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* fatal */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit(2);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389103275370" MODIFIED="1389106958316" TEXT="ngx_add_channel_event">
<node CREATED="1389103381172" MODIFIED="1389106900099" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389103332523" ID="ID_1606222132" MODIFIED="1390395966696">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_int_t ngx_add_channel_event(ngx_cycle_t *cycle, ngx_fd_t fd, ngx_int_t event,&#160;&#160;&#160;&#160;ngx_event_handler_pt handler)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;*ev, *rev, *wev;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_t&#160;&#160;*c;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;c = <font color="#f90606">ngx_get_connection</font>(fd, cycle-&gt;log);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (c == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#f50e0e">c-&gt;pool </font>= cycle-&gt;pool;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev = <font color="#fb0404">c-&gt;read</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev = <font color="#f50202">c-&gt;write</font>;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev-&gt;log = cycle-&gt;log;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev-&gt;log = cycle-&gt;log;
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_THREADS)
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev-&gt;lock = &amp;c-&gt;lock;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev-&gt;lock = &amp;c-&gt;lock;
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev-&gt;own_lock = &amp;c-&gt;lock;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev-&gt;own_lock = &amp;c-&gt;lock;
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev-&gt;channel = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev-&gt;channel = 1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ev = (event == NGX_READ_EVENT) ? rev : wev;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ev-&gt;handler = handler;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_add_conn &amp;&amp; (ngx_event_flags &amp; NGX_USE_EPOLL_EVENT) == 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f70808">ngx_add_conn</font>(c) ==<font color="#f50202">&#160;NGX_ERROR) { </font>
    </p>
    <p>
      <font color="#f50202">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_free_connection</font>(c);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f50606">ngx_add_event</font>(ev, event, 0) == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_free_connection(c);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389103358419" ID="ID_535744274" LINK="#ID_1171672992" MODIFIED="1391781868372" TEXT="ngx_channel_handler">
<icon BUILTIN="back"/>
</node>
<node CREATED="1389105081619" MODIFIED="1389450679727" TEXT="ngx_add_channel_event&#x628a;&#x53e5;&#x67c4;ngx_channel(&#x5f53;&#x524d;worker&#x7684;channel[1])&#x4e0a;&#x5efa;&#x7acb;&#x7684;&#x8fde;&#x63a5;&#x7684;&#x53ef;&#x8bfb;&#x4e8b;&#x4ef6;&#x52a0;&#x5165;&#x4e8b;&#x4ef6;&#x76d1;&#x63a7;&#x961f;&#x5217;&#xa;&#x5c06;channel&#x653e;&#x5230;epoll&#x7b49;&#x4e8b;&#x4ef6;&#x5904;&#x7406;&#x6a21;&#x5757;"/>
</node>
</node>
<node CREATED="1389079455321" MODIFIED="1389079474479" TEXT="ngx_process_events_and_timers">
<node CREATED="1389084882636" FOLDED="true" MODIFIED="1389085095397" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389084899026" MODIFIED="1390529110596">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      void
    </p>
    <p>
      ngx_process_events_and_timers(ngx_cycle_t *cycle)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;flags;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;timer, delta;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;&#37197;&#32622;&#25991;&#20214;&#20013;&#35774;&#32622;&#20102;&#26102;&#38388;&#31934;&#24230;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (<font color="#f80f0f">ngx_timer_resolution</font>) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timer = NGX_TIMER_INFINITE;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;flags = 0;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timer = <font color="#f50606">ngx_event_find_timer</font>();//&#23558;&#36229;&#26102;&#26816;&#27979;&#26102;&#38388;&#35774;&#32622;&#20026;&#26368;&#24555;&#21457;&#29983;&#36229;&#26102;&#30340;&#20107;&#20214;&#23545;&#35937;&#30340;&#36229;&#26102;&#26102;&#21051;&#19982;&#24403;&#21069;&#26102;&#21051;&#20043;&#24046;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;flags = NGX_UPDATE_TIME;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#33509;accept&#20351;&#29992;&#19978;&#38145;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_use_accept_mutex) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_accept_disabled&#26159;&#22312;&#30417;&#21548;&#22871;&#25509;&#21475;&#30340;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;ngx_event_accept&#20013;&#35774;&#32622;&#30340;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_accept_disabled = ngx_cycle-&gt;connection_n / 8&#160;- ngx_cycle-&gt;free_connection_n;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_accept_disabled &gt; 0&#34920;&#31034;&#24403;&#21069;worker&#36827;&#31243;&#24050;&#32463;&#20998;&#37197;&#20102;&#36229;&#36807;7/8&#30340;&#36164;&#28304;&#20102;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_accept_disabled &gt; 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_accept_disabled--;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21152;&#38145;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_trylock_accept_mutex(cycle) == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25345;&#26377;&#38145;&#65292;&#35774;&#32622;&#26631;&#24535;&#20301;&#65306;&#25226;&#33719;&#21462;&#21040;&#30340;&#20107;&#20214;&#25918;&#20837;&#24310;&#36831;&#22788;&#29702;&#38431;&#21015;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_accept_mutex_held) {//&#24403;&#21069;&#26159;&#21542;&#25317;&#26377;&#38145;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;flags |= NGX_POST_EVENTS;//&#25152;&#26377;&#21457;&#29983;&#30340;&#20107;&#20214;&#37117;&#23558;&#24310;&#21518;&#22788;&#29702;,&#20808;&#37322;&#25918;&#38145;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (timer == NGX_TIMER_INFINITE&#160;&#160;|| timer &gt; ngx_accept_mutex_delay)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timer = ngx_accept_mutex_delay;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;delta = ngx_current_msec;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#29992;process_events&#38057;&#23376;&#36718;&#35757;&#20107;&#20214;&#65292;&#26377;&#20123;&#20107;&#20214;&#21363;&#26102;&#35843;&#29992;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#22788;&#29702;&#65292;&#26377;&#20123;&#20107;&#20214;&#25918;&#20837;&#24310;&#36831;&#38431;&#21015;&#31561;&#24453;&#21518;&#38754;&#22788;&#29702;
    </p>
    <p>
      &#160;&#160;&#160;&#160;(void) <font color="#f60505">ngx_process_events</font>(cycle, timer, flags);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;delta = ngx_current_msec - delta;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0,&quot;timer delta: %M&quot;, delta);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#26377;&#38656;&#35201;&#24310;&#36831;&#22788;&#29702;&#30340;&#30417;&#21548;&#22871;&#25509;&#21475;&#20107;&#20214;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_posted_accept_events) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#22788;&#29702;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f60909">ngx_event_process_posted</font>(cycle, &amp;ngx_posted_accept_events);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#37322;&#25918;&#38145;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_accept_mutex_held) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_shmtx_unlock(&amp;ngx_accept_mutex);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (delta) {//&#26377;&#24310;&#36831;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#fa0505">ngx_event_expire_timers</font>();
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0,&quot;posted events %p&quot;, ngx_posted_events);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#26377;&#38656;&#35201;&#24310;&#36831;&#22788;&#29702;&#30340;&#25968;&#25454;&#22871;&#25509;&#21475;&#20107;&#20214;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_posted_events) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#22788;&#29702;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_threaded) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_wakeup_worker_thread(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f60505">ngx_event_process_posted</font>(cycle, &amp;ngx_posted_events);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389085058082" ID="ID_356705254" LINK="#ID_458451428" MODIFIED="1390379864787" TEXT="ngx_process_events">
<icon BUILTIN="back"/>
</node>
<node CREATED="1389346235797" FOLDED="true" MODIFIED="1389447876151" TEXT="ngx_event_process_posted">
<node CREATED="1389346241253" MODIFIED="1391751604781">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      void
    </p>
    <p>
      ngx_event_process_posted(ngx_cycle_t *cycle,&#160;ngx_thread_volatile ngx_event_t **posted)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;*ev;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for ( ;; ) {
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev = (ngx_event_t *) *posted;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;posted event %p&quot;, ev);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ev == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_delete_posted_event(ev);
    </p>
    <p>
      //&#35843;&#29992;handler
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev-&gt;handler(ev);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      &#28982;&#21518;&#23601;&#26159;ngx_event_process_poste&#20989;&#25968;&#65292;&#36825;&#20010;&#20989;&#25968;&#24456;&#31616;&#21333;&#65292;&#23601;&#26159;&#36941;&#21382;event&#38431;&#21015;&#65292;&#28982;&#21518;&#35843;&#29992;event&#30340;handler&#20989;&#25968;&#65292;&#32780;&#25105;&#20204;&#36824;&#35760;&#24471;&#19978;&#38754;&#22312;ngx_http_init_connection&#20013;&#35774;&#32622;&#30340;handler&#23601;&#26159;ngx_http_init_request&#65292;&#36825;&#26679;&#23376;&#65292;&#25105;&#20204;&#23601;&#20877;&#19968;&#27425;&#36827;&#20837;request&#30340;&#22788;&#29702;&#65292;&#21487;&#26159;&#27492;&#26102;&#20381;&#26087;&#27809;&#26377;&#25346;&#36733;&#35835;&#20107;&#20214;&#21040;epoll&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390528665190" MODIFIED="1390528666178" TEXT="ngx_event_find_timer">
<node CREATED="1389084882636" FOLDED="true" MODIFIED="1389085095397" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389084899026" MODIFIED="1390528912981">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_find_timer(void)&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;{&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_msec_int_t&#160;&#160;&#160;&#160;&#160;&#160;timer;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_rbtree_node_t&#160;&#160;*node, *root, *sentinel;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_event_timer_rbtree.root == &amp;ngx_event_timer_sentinel) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_TIMER_INFINITE;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_mutex_lock(ngx_event_timer_mutex);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root = ngx_event_timer_rbtree.root;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sentinel = ngx_event_timer_rbtree.sentinel;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;node = ngx_rbtree_min(root, sentinel);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_mutex_unlock(ngx_event_timer_mutex);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timer = (ngx_msec_int_t) (node-&gt;key - ngx_current_msec);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return (ngx_msec_t) (timer &gt; 0 ? timer : 0);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#35813;&#20989;&#25968;&#20174;&#32418;&#40657;&#26641;&#20013;&#25214;&#21040;key&#20540;&#26368;&#23567;&#30340;&#33410;&#28857;&#65292;&#28982;&#21518;&#29992;key&#20540;&#20943;&#21435;&#24403;&#21069;&#26102;&#21051;&#21363;&#24471;&#21040;&#39044;&#26399;timer&#20540;&#12290;&#36825;&#20010;&#20540;&#21487;&#33021;&#26159;&#36127;&#25968;&#65292;&#34920;&#31034;&#24050;&#32463;&#26377;&#20107;&#20214;&#36229;&#26102;&#20102;&#12290;&#22240;&#27492;&#30452;&#25509;&#23558;&#20854;&#35774;&#32622;&#20026;0.&#37027;&#20040;&#20107;&#20214;&#22788;&#29702; &#26426;&#21046;&#22312;&#24320;&#22987;&#30417;&#25511;I/O&#20107;&#20214;&#26102;&#20250;&#31435;&#21363;&#36820;&#22238;&#65292;&#20197;&#20415;&#39532;&#19978;&#22788;&#29702;&#36825;&#20123;&#36229;&#26102;&#20107;&#20214;&#12290;&#21516;&#26102;flags&#34987;&#35774;&#32622;&#20026;NGX_UPDATE_TIME&#12290;&#20174;ngx_epoll_process_events&#20989;&#25968;&#30340;&#20195;&#30721;&#20013;&#21487;&#20197;&#30475;&#20986;ngx_time_update()&#23558;&#34987;&#25191;&#34892;&#65292;&#20107;&#20214;&#34987;&#26356;&#26032;&#12290;&#21363;&#20107;&#20214;&#22788;&#29702;&#26426;&#21046;&#27599;&#27425;&#36820;&#22238;&#37117;&#20250;&#26356;&#26032;&#26102;&#38388;&#12290;&#22914;&#26524;I/O&#20107;&#20214;&#27604;&#36739;&#22810;&#65292;&#37027;&#20040;&#20250;&#23548;&#33268;&#27604;&#36739;&#39057;&#32321;&#22320;&#35843;&#29992;gettimeofday()&#31995;&#32479;&#20989;&#25968;&#65292;&#36825;&#20063;&#21487;&#20197;&#35828;&#26159;&#36229;&#26102;&#26816;&#27979;&#26041;&#26696;2&#23545;&#24615;&#33021;&#30340;&#26368;&#22823;&#24433;&#21709;&#12290;&#36825;&#20010;&#26102;&#20505;&#36229;&#26102;&#26816;&#27979;&#20989;&#25968;ngx_event_expire_timers()&#20989;&#25968;&#20250;&#34987;&#25191;&#34892;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1390528665190" MODIFIED="1390529125176" TEXT="ngx_event_expire_timers">
<node CREATED="1389084882636" FOLDED="true" MODIFIED="1389085095397" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389084899026" MODIFIED="1390529233570">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;&#160;ngx_event_expire_timers&#12290;&#20854;&#23436;&#25104;&#30340;&#20027;&#35201;&#20219;&#21153;&#26159;&#23545;&#36229;&#26102;&#20107;&#20214;&#23545;&#35937;&#26159;&#21542;&#36229;&#26102;&#36827;&#34892;&#25195;&#25551;&#26816;&#27979;&#20197;&#21450;&#23545;&#24050;&#36229;&#26102;&#20107;&#20214;&#23545;&#35937;&#30340;&#22788;&#29702;&#12290;
    </p>
    <p>
      &#26816;&#27979;&#26159;&#21542;&#26377;&#20107;&#20214;&#23545;&#35937;&#36229;&#26102;&#19981;&#38656;&#36941;&#21382;&#25195;&#25551;&#25152;&#26377;&#36229;&#26102;&#26102;&#38388;&#23545;&#35937;&#65292;&#32780;&#26159;&#25214;&#21040;&#26368;&#36817;&#30340;&#21363;&#23558;&#36229;&#26102;&#30340;&#36229;&#26102;&#20107;&#20214;&#23545;&#35937;&#12290;&#21028;&#26029;&#20854;&#26159;&#21542;&#36229;&#26102;&#65292;&#22914;&#26524;&#36229;&#26102;&#65292;&#21017;&#23558;&#20854;&#31227;&#20986;&#32418;&#40657;&#26641;&#65292;&#35774;&#32622;&#36229;&#26102;&#26631;&#35760;&#65292;&#35843;&#29992;&#22238;&#35843;&#20989;&#25968;&#36827;&#34892;&#22788;&#29702;&#12290;&#20043;&#21518;&#20877;&#21028;&#26029;&#31532;&#20108;&#36817;&#30340;&#21363;&#23558;&#36229;&#26102;&#30340;&#36229;&#26102;&#20107;&#20214;&#23545;&#35937;&#65292;&#22914;&#27492;&#21453;&#22797;&#65292;&#30693;&#36947;&#26576;&#20010;&#36229;&#26102;&#20107;&#20214;&#23545;&#35937;&#36824;&#26410;&#36229;&#26102;&#25110;&#25152;&#26377;&#36229;&#26102;&#20107;&#20214;&#23545;&#35937;&#37117;&#24050;&#36229;&#26102;&#24182;&#22788;&#29702;&#23436;&#27605;&#23601;&#32467;&#26463;&#26816;&#27979;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;void&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_expire_timers(void)&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;{&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*ev;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_rbtree_node_t&#160;&#160;*node, *root, *sentinel;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sentinel = ngx_event_timer_rbtree.sentinel;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#24490;&#29615;&#26816;&#27979;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for ( ;; ) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_mutex_lock(ngx_event_timer_mutex);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root = ngx_event_timer_rbtree.root;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (root == sentinel) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#25214;&#21040;&#26368;&#36817;&#30340;&#21363;&#23558;&#36229;&#26102;&#30340;&#36229;&#26102;&#20107;&#20214;&#23545;&#35937;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;node = ngx_rbtree_min(root, sentinel);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* node-&gt;key &lt;= ngx_current_time */&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#22914;&#26524;&#24050;&#32463;&#36229;&#26102;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((ngx_msec_int_t) (node-&gt;key - ngx_current_msec) &lt;= 0) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev = (ngx_event_t *) ((char *) node - offsetof(ngx_event_t, timer));&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev-&gt;log, 0,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;event timer del: %d: %M&quot;,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_ident(ev-&gt;data), ev-&gt;timer.key);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#20174;&#32418;&#40657;&#26641;&#20013;&#31227;&#38500;&#36825;&#20010;&#24050;&#36229;&#26102;&#30340;&#36229;&#26102;&#20107;&#20214;&#23545;&#35937;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_rbtree_delete(&amp;ngx_event_timer_rbtree, &amp;ev-&gt;timer);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_mutex_unlock(ngx_event_timer_mutex);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;#if (NGX_DEBUG)&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev-&gt;timer.left = NULL;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev-&gt;timer.right = NULL;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev-&gt;timer.parent = NULL;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;#endif&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#26631;&#35760;&#65306;&#26159;&#21542;&#24050;&#21152;&#20837;&#32418;&#40657;&#26641;&#36229;&#26102;&#31649;&#29702;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev-&gt;timer_set = 0;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#26631;&#35760;&#65306;&#26159;&#21542;&#36229;&#26102;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev-&gt;timedout = 1;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#35843;&#29992;&#22238;&#35843;&#20989;&#25968;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev-&gt;handler(ev);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_mutex_unlock(ngx_event_timer_mutex);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1388930308705" FOLDED="true" MODIFIED="1389084874018" TEXT="ngx_worker_process_exit">
<node CREATED="1388930358778" ID="ID_1476584593" LINK="#ID_1607511909" MODIFIED="1389070595779" STYLE="fork">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;&#25152;&#26377;&#27169;&#22359;&#30340;&#38057;&#23376;exit_process
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;exit_process) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_modules[i]-&gt;<font color="#f10a0a">exit_process</font>(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1388932110474" FOLDED="true" MODIFIED="1389103018113" TEXT="ngx_pass_open_channel">
<node CREATED="1388932114658" FOLDED="true" MODIFIED="1389103016874" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388932128026" MODIFIED="1389063880319">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#25226;ngx_pass_open_channel&#23637;&#24320;&#22914;&#19979;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      static void
    </p>
    <p>
      ngx_pass_open_channel(ngx_cycle_t *cycle, ngx_channel_t *ch)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;i;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; i &lt; ngx_last_process; i++) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#36339;&#36807;&#33258;&#24049;&#21644;&#24322;&#24120;&#30340;worker
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (i == ngx_process_slot
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|| ngx_processes[i].pid == -1
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|| ngx_processes[i].channel[0] == -1)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug6(NGX_LOG_DEBUG_CORE, cycle-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;pass channel s:%d pid:%P fd:%d to s:%i pid:%P fd:%d&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ch-&gt;slot, ch-&gt;pid, ch-&gt;fd,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i, ngx_processes[i].pid,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].channel[0]);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* TODO: NGX_AGAIN */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21457;&#36865;&#28040;&#24687;&#32473;&#20854;&#20182;&#30340;worker
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_write_channel(ngx_processes[i].channel[0],
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ch, sizeof(ngx_channel_t), cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1388930255282" FOLDED="true" MODIFIED="1389082281186" TEXT="ngx_master_process_exit">
<node CREATED="1388930391394" ID="ID_929255851" MODIFIED="1389082171646">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_master_process_exit
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;&#25152;&#26377;&#27169;&#22359;&#30340;&#38057;&#23376;exit_master
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;exit_master) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <b><font color="#f30404">ngx_modules[i]-&gt;exit_master</font></b>(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_close_listening_sockets
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389098899238" MODIFIED="1389098902151" TEXT="ngx_signal_worker_processes">
<node CREATED="1388932028178" FOLDED="true" MODIFIED="1389107171355" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388932040042" ID="ID_1256679313" MODIFIED="1389107120723">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static void
    </p>
    <p>
      ngx_signal_worker_processes(ngx_cycle_t *cycle, int signo)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;i;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_err_t&#160;&#160;&#160;&#160;&#160;&#160;err;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_channel_t&#160;&#160;ch;
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_BROKEN_SCM_RIGHTS)
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ch.command = 0;
    </p>
    <p>
      
    </p>
    <p>
      #else
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;switch (signo) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case ngx_signal_value(NGX_SHUTDOWN_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ch.command = NGX_CMD_QUIT;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case ngx_signal_value(NGX_TERMINATE_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ch.command = NGX_CMD_TERMINATE;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case ngx_signal_value(NGX_REOPEN_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ch.command = NGX_CMD_REOPEN;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;default:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ch.command = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ch.fd = -1;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; i &lt; ngx_last_process; i++) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug7(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;child: %d %P e:%d t:%d d:%d r:%d j:%d&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].pid,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].exiting,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].exited,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].detached,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].respawn,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].just_spawn);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_processes[i].detached || ngx_processes[i].pid == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_processes[i].just_spawn) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].just_spawn = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_processes[i].exiting
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&amp; signo == ngx_signal_value(NGX_SHUTDOWN_SIGNAL))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ch.command) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f50606">ngx_write_channel</font>(ngx_processes[i].channel[0],
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;ch, sizeof(ngx_channel_t), cycle-&gt;log)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;== NGX_OK)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (signo != ngx_signal_value(NGX_REOPEN_SIGNAL)) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].exiting = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug2(NGX_LOG_DEBUG_CORE, cycle-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;kill (%P, %d)&quot; , ngx_processes[i].pid, signo);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (kill(ngx_processes[i].pid, signo) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;err = ngx_errno;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, err,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;kill(%P, %d) failed&quot;, ngx_processes[i].pid, signo);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (err == NGX_ESRCH) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].exited = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].exiting = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reap = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (signo != ngx_signal_value(NGX_REOPEN_SIGNAL)) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[i].exiting = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1389099012319" MODIFIED="1389099014420" TEXT="ngx_start_cache_manager_processes"/>
</node>
</node>
</node>
<node CREATED="1388816679113" FOLDED="true" MODIFIED="1389150154774" POSITION="left" TEXT="&#x5168;&#x5c40;&#x53d8;&#x91cf;">
<node CREATED="1388816693569" MODIFIED="1388816695882" TEXT="ngx_dump_config"/>
<node CREATED="1389063190084" FOLDED="true" MODIFIED="1389105502690" TEXT="&#x8fdb;&#x7a0b;&#x76f8;&#x5173;">
<node CREATED="1389063202261" FOLDED="true" MODIFIED="1389107681387" TEXT="ngx_last_process">
<node CREATED="1389098087008" MODIFIED="1389098101627">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_last_process&#26159;&#36827;&#31243;&#34920;&#20013;
    </p>
    <p>
      &#26368;&#21518;&#19968;&#20010;&#23384;&#37327;&#36827;&#31243;&#30340;&#19979;&#19968;&#20010;&#20301;&#32622;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389063038507" FOLDED="true" MODIFIED="1389107680579" TEXT="ngx_processes">
<node CREATED="1389065279013" MODIFIED="1389098037590">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#36827;&#31243;&#20449;&#24687;&#38431;&#21015;
    </p>
    <p>
      master&#27599;&#21019;&#24314;&#19968;&#20010;worker&#37117;&#20250;&#25226;&#19968;&#20010;
    </p>
    <p>
      &#35774;&#32622;&#22909;&#30340;ngx_process_t&#32467;&#26500;&#21464;&#37327;&#25918;&#20837;
    </p>
    <p>
      ngx_processes&#20013;&#65292;&#36827;&#31243;&#34920;&#38271;&#24230;&#20026;1024
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389063217892" FOLDED="true" MODIFIED="1389107682140" TEXT="ngx_process_slot">
<node CREATED="1389065264039" MODIFIED="1389098062292">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#24403;&#21069;&#36827;&#31243;&#32034;&#24341;
    </p>
    <p>
      &#21018;&#21019;&#24314;&#30340;&#36827;&#31243;&#23384;&#25918;&#22312;ngx_process_slot&#20301;&#32622;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389063262403" FOLDED="true" MODIFIED="1389144359124" TEXT="ngx_channel">
<node CREATED="1389065217030" MODIFIED="1389065219571" TEXT="// &#x7528;&#x4e8e;&#x76d1;&#x542c;&#x53ef;&#x8bfb;&#x4e8b;&#x4ef6;&#x7684;socket"/>
</node>
<node CREATED="1389244249178" FOLDED="true" LINK="#ID_1961689213" MODIFIED="1389702972756" TEXT="ngx_process">
<node CREATED="1389244258209" MODIFIED="1389702972755" TEXT="&#x6307;&#x793a;&#x8fdb;&#x7a0b;&#x7c7b;&#x522b;"/>
</node>
<node CREATED="1389245186936" FOLDED="true" LINK="#ID_1502592810" MODIFIED="1389702972757" TEXT="ngx_channel">
<node CREATED="1389245224142" MODIFIED="1389702972755" TEXT="&#x7528;&#x4e8e;&#x76d1;&#x542c;&#x53ef;&#x8bfb;&#x4e8b;&#x4ef6;&#x7684;socket"/>
</node>
</node>
<node CREATED="1389105507572" FOLDED="true" MODIFIED="1389105518458" TEXT="&#x4e8b;&#x4ef6;&#x76f8;&#x5173;">
<node CREATED="1389105522876" LINK="#ID_1076558626" MODIFIED="1389105726262" TEXT="ngx_event_actions"/>
<node CREATED="1390377526957" MODIFIED="1390517590080" TEXT="epoll&#x76f8;&#x5173;">
<node CREATED="1390013550536" LINK="#ID_402061381" MODIFIED="1390517645005" TEXT="event_list"/>
<node CREATED="1390377545706" LINK="#ID_517518143" MODIFIED="1390517681333" TEXT="nevents"/>
<node CREATED="1390377689261" LINK="#ID_517518143" MODIFIED="1390517698797" TEXT="ep&#xff08;epoll&#x7684;id&#xff09;"/>
<node CREATED="1390518031931" LINK="#ID_449834385" MODIFIED="1390522735791" TEXT="ngx_event_flags"/>
</node>
<node CREATED="1390378978278" MODIFIED="1390378979949" TEXT="ngx_posted_accept_events"/>
<node CREATED="1390378990806" MODIFIED="1390378992341" TEXT="ngx_posted_events"/>
</node>
<node CREATED="1389242555502" MODIFIED="1389702972755" TEXT="signals">
<node CREATED="1389242576749" ID="ID_1345550578" LINK="#ID_1118410517" MODIFIED="1389702972756" TEXT="ngx_signal_handler"/>
</node>
<node CREATED="1390523423453" FOLDED="true" MODIFIED="1390523435621" TEXT="&#x8ba1;&#x65f6;&#x5668;">
<node CREATED="1390523344244" MODIFIED="1390523347411" TEXT="ngx_event_timer_rbtree">
<node CREATED="1390523386524" MODIFIED="1390523389275" TEXT="ngx_thread_volatile ngx_rbtree_t  ngx_event_timer_rbtree;//&#x8d85;&#x65f6;&#x7ba1;&#x7406;&#x7684;&#x7ea2;&#x9ed1;&#x6811;&#x7ed3;&#x6784;  "/>
</node>
<node CREATED="1390523417229" MODIFIED="1390523419058" TEXT="ngx_event_timer_sentinel">
<node CREATED="1390523401709" MODIFIED="1390523407780" TEXT="static ngx_rbtree_node_t          ngx_event_timer_sentinel;//&#x7ea2;&#x9ed1;&#x6811;&#x4e2d;&#x7684;&#x54e8;&#x5175;&#x8282;&#x70b9;  "/>
</node>
<node CREATED="1390522743836" MODIFIED="1390527990228" TEXT="ngx_event_timer_alarm">
<node CREATED="1390527968278" LINK="#ID_332607311" MODIFIED="1390527995459" TEXT="set"/>
<node CREATED="1390527974854" LINK="#ID_62070090" MODIFIED="1390528149679" TEXT="get"/>
</node>
<node CREATED="1390526400757" LINK="#ID_1648342452" MODIFIED="1390527857302" TEXT="ngx_timer_resolution"/>
</node>
<node CREATED="1390389260732" FOLDED="true" MODIFIED="1390389266773" TEXT="&#x542f;&#x52a8;&#x76f8;&#x5173;">
<node CREATED="1390389270112" MODIFIED="1390389271520" TEXT="ngx_argc"/>
<node CREATED="1390389282096" MODIFIED="1390389283100" TEXT="ngx_argv"/>
</node>
</node>
<node CREATED="1389106372749" FOLDED="true" MODIFIED="1389151945772" POSITION="left" TEXT="&#x7ed3;&#x6784;&#x4f53;&#x5b9e;&#x4f8b;">
<node CREATED="1389088285082" FOLDED="true" ID="ID_824770665" LINK="#ID_13477724" MODIFIED="1389150160271" TEXT="ngx_events_commands">
<icon BUILTIN="full-2"/>
<node CREATED="1389088290682" LINK="#ID_1463245406" MODIFIED="1389088503998">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_command_t&#160;&#160;ngx_events_commands[] = {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;{ ngx_string(&quot;events&quot;),
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;NGX_MAIN_CONF|NGX_CONF_BLOCK|NGX_CONF_NOARGS,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;<font color="#f60909">ngx_events_block</font>,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;NULL },
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;ngx_null_command
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389448454650" FOLDED="true" ID="ID_708401246" MODIFIED="1389448491989" TEXT="ngx_http_commands">
<icon BUILTIN="full-2"/>
<node CREATED="1389448512762" ID="ID_333242358" LINK="#ID_642383791" MODIFIED="1389448555083">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_command_t&#160;&#160;ngx_http_commands[] = {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;{ ngx_string(&quot;http&quot;),
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;NGX_MAIN_CONF|NGX_CONF_BLOCK|NGX_CONF_NOARGS,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160; <font color="#ef0303">ngx_http_block</font>,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;NULL },
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;ngx_null_command
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node BACKGROUND_COLOR="#9c7b7b" CREATED="1389087106865" FOLDED="true" LINK="#ID_708401246" MODIFIED="1389448466539" TEXT="ngx_events_module">
<icon BUILTIN="full-0"/>
<node CREATED="1389088339104" MODIFIED="1389088375313">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_module_t&#160;&#160;ngx_events_module = {
    </p>
    <p>
      &#160;&#160;&#160;&#160;NGX_MODULE_V1,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&amp;ngx_events_module_ctx,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* module context */
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#fc0b0b">ngx_events_commands</font>,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* module directives */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NGX_CORE_MODULE,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* module type */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init master */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init module */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init process */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init thread */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* exit thread */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* exit process */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* exit master */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NGX_MODULE_V1_PADDING
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node BACKGROUND_COLOR="#9c7b7b" CREATED="1389084135274" LINK="#ID_552558133" MODIFIED="1389150823772" TEXT="ngx_event_core_module">
<icon BUILTIN="full-0"/>
<node CREATED="1390252440495" FOLDED="true" MODIFIED="1390252448220" TEXT="&#x7ed3;&#x6784;&#x4f53;">
<node CREATED="1389084139984" MODIFIED="1389084669333">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_module_t&#160;&#160;ngx_event_core_module = {
    </p>
    <p>
      &#160;&#160;&#160;&#160;NGX_MODULE_V1,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&amp;ngx_event_core_module_ctx,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* module context */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_core_commands,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* module directives */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NGX_EVENT_MODULE,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* module type */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init master */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_module_init,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init module */
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#f70404">ngx_event_process_init</font>,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init process */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init thread */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* exit thread */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* exit process */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* exit master */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NGX_MODULE_V1_PADDING
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389084640567" ID="ID_440555041" LINK="#ID_579592898" MODIFIED="1389591865631" TEXT="ngx_event_process_init"/>
<node CREATED="1389145452145" MODIFIED="1389145453718" TEXT="ngx_event_module_init"/>
</node>
<node CREATED="1389145685692" LINK="#ID_552558133" MODIFIED="1389145814075" TEXT="ngx_mail_module">
<icon BUILTIN="full-0"/>
</node>
<node CREATED="1389145670892" FOLDED="true" LINK="#ID_552558133" MODIFIED="1389145817963" TEXT="ngx_http_module">
<icon BUILTIN="full-0"/>
<node CREATED="1389448377956" MODIFIED="1389448397849">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_module_t&#160;&#160;ngx_http_module = {
    </p>
    <p>
      &#160;&#160;&#160;&#160;NGX_MODULE_V1,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&amp;ngx_http_module_ctx,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* module context */
    </p>
    <p>
      &#160;&#160;&#160; <font color="#f00b0b">ngx_http_commands</font>,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* module directives */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NGX_CORE_MODULE,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* module type */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init master */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init module */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init process */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init thread */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* exit thread */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* exit process */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* exit master */
    </p>
    <p>
      &#160;&#160;&#160;&#160;NGX_MODULE_V1_PADDING
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1389448447082" LINK="#ID_708401246" MODIFIED="1389448475939" TEXT="ngx_http_commands"/>
</node>
<node CREATED="1389145661380" LINK="#ID_552558133" MODIFIED="1389145833709" TEXT="ngx_core_module">
<icon BUILTIN="full-0"/>
</node>
<node BACKGROUND_COLOR="#9c7b7b" CREATED="1389145641588" LINK="#ID_552558133" MODIFIED="1389149840804" TEXT="ngx_epoll_module">
<icon BUILTIN="full-0"/>
</node>
<node CREATED="1389145716852" LINK="#ID_552558133" MODIFIED="1389145828876" TEXT="ngx_openssl_module">
<icon BUILTIN="full-0"/>
</node>
<node CREATED="1389145850457" MODIFIED="1389145852148" TEXT="ngx_conf_module"/>
<node CREATED="1389239835167" FOLDED="true" MODIFIED="1389448052694" TEXT="ngx_http_core_module">
<node CREATED="1389239707484" MODIFIED="1389448052694" TEXT="ngx_http_core_module&#x4e2d;&#x7684;ctx">
<node CREATED="1389239408855" MODIFIED="1389448052694" TEXT="ngx_http_core_main_conf_t"/>
<node CREATED="1389239243340" MODIFIED="1389448052694" TEXT="ngx_http_core_srv_conf_t"/>
<node CREATED="1389239294195" MODIFIED="1389448052693" TEXT="ngx_http_core_loc_conf_t"/>
</node>
</node>
</node>
<node CREATED="1388928033225" MODIFIED="1389151944412" POSITION="left" TEXT="&#x7ed3;&#x6784;&#x4f53;">
<node CREATED="1388928059241" FOLDED="true" ID="ID_552558133" MODIFIED="1389149735662" TEXT="ngx_module_t">
<icon BUILTIN="full-0"/>
<node CREATED="1388928269427" FOLDED="true" LINK="http://blog.csdn.net/kenbinzhang/article/details/4656815" MODIFIED="1389146397452" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388928091633" MODIFIED="1388928246439" TEXT="#define NGX_MODULE_V1          0, 0, 0, 0, 0, 0, 1&#xa;#define NGX_MODULE_V1_PADDING  0, 0, 0, 0, 0, 0, 0, 0&#xa;&#xa;struct ngx_module_s {&#xa;    ngx_uint_t            ctx_index;&#xa;    ngx_uint_t            index;&#xa;&#xa;    ngx_uint_t            spare0;&#xa;    ngx_uint_t            spare1;&#xa;    ngx_uint_t            spare2;&#xa;    ngx_uint_t            spare3;&#xa;&#xa;    ngx_uint_t            version;&#xa;&#xa;    void                 *ctx;&#xa;    ngx_command_t        *commands;&#xa;    ngx_uint_t            type;&#xa;&#xa;    ngx_int_t           (*init_master)(ngx_log_t *log);&#xa;&#xa;    ngx_int_t           (*init_module)(ngx_cycle_t *cycle);&#xa;&#xa;    ngx_int_t           (*init_process)(ngx_cycle_t *cycle);&#xa;    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);&#xa;    void                (*exit_thread)(ngx_cycle_t *cycle);&#xa;    void                (*exit_process)(ngx_cycle_t *cycle);&#xa;&#xa;    void                (*exit_master)(ngx_cycle_t *cycle);&#xa;&#xa;    uintptr_t             spare_hook0;&#xa;    uintptr_t             spare_hook1;&#xa;    uintptr_t             spare_hook2;&#xa;    uintptr_t             spare_hook3;&#xa;    uintptr_t             spare_hook4;&#xa;    uintptr_t             spare_hook5;&#xa;    uintptr_t             spare_hook6;&#xa;    uintptr_t             spare_hook7;&#xa;};&#xa;&#xa;index&#x662f;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x8ba1;&#x6570;&#x5668;&#xff0c;&#x6309;&#x7167;&#x6bcf;&#x4e2a;&#x6a21;&#x5757;&#x5728;ngx_modules[]&#x6570;&#x7ec4;&#x4e2d;&#x7684;&#x58f0;&#x660e;&#x987a;&#x5e8f;&#xff08;&#x89c1;objs/ngx_modules.c&#xff09;&#xff0c;&#x4ece;0&#x5f00;&#x59cb;&#x4f9d;&#x6b21;&#x7ed9;&#x6bcf;&#x4e2a;&#x6a21;&#x5757;&#x8fdb;&#x884c;&#x7f16;&#x53f7;&#xff1a;&#xa;&#xa;    ngx_max_module = 0;&#xa;    for (i = 0; ngx_modules[i]; i++) {&#xa;        ngx_modules[i]-&gt;index = ngx_max_module++;&#xa;    }&#xa;&#xff08;&#x89c1;src/core/nginx.c&#xff09;&#xa;&#xa;ctx_index&#x662f;&#x5206;&#x7c7b;&#x7684;&#x6a21;&#x5757;&#x8ba1;&#x6570;&#x5668;&#xff0c;nginx&#x7684;&#x6a21;&#x5757;&#x53ef;&#x4ee5;&#x5206;&#x4e3a;&#x56db;&#x79cd;&#xff1a;core&#x3001;event&#x3001;http&#x548c;mail&#xff0c;&#x6bcf;&#x4e00;&#x79cd;&#x7684;&#x6a21;&#x5757;&#x53c8;&#x4f1a;&#x5404;&#x81ea;&#x8ba1;&#x6570;&#x4e00;&#x4e0b;&#xff0c;&#x8fd9;&#x4e2a;ctx_index&#x5c31;&#x662f;&#x6bcf;&#x4e2a;&#x6a21;&#x5757;&#x5728;&#x5176;&#x6240;&#x5c5e;&#x7c7b;&#x7ec4;&#x7684;&#x8ba1;&#x6570;&#x503c;:&#xa;&#xa;    ngx_event_max_module = 0;&#xa;    for (i = 0; ngx_modules[i]; i++) {&#xa;        if (ngx_modules[i]-&gt;type != NGX_EVENT_MODULE) {&#xa;            continue;&#xa;        }&#xa;&#xa;        ngx_modules[i]-&gt;ctx_index = ngx_event_max_module++;&#xa;    }&#xa;&#xff08;&#x89c1;src/event/ngx_event.c&#xff09;&#xa;&#xa;    ngx_http_max_module = 0;&#xa;    for (m = 0; ngx_modules[m]; m++) {&#xa;        if (ngx_modules[m]-&gt;type != NGX_HTTP_MODULE) {&#xa;            continue;&#xa;        }&#xa;&#xa;        ngx_modules[m]-&gt;ctx_index = ngx_http_max_module++;&#xa;    }&#xa;&#xff08;&#x89c1;src/http/ngx_http.c&#xff09;&#xa;&#xa;    ngx_mail_max_module = 0;&#xa;    for (m = 0; ngx_modules[m]; m++) {&#xa;        if (ngx_modules[m]-&gt;type != NGX_MAIL_MODULE) {&#xa;            continue;&#xa;        }&#xa;&#xa;        ngx_modules[m]-&gt;ctx_index = ngx_mail_max_module++;&#xa;    }&#xa;&#xff08;&#x89c1;src/mail/ngx_mail.c&#xff09;&#xa;&#xa;ctx&#x662f;&#x6a21;&#x5757;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#xff0c;&#x4e0d;&#x540c;&#x79cd;&#x7c7b;&#x7684;&#x6a21;&#x5757;&#x6709;&#x4e0d;&#x540c;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#xff0c;&#x56db;&#x7c7b;&#x6a21;&#x5757;&#x5c31;&#x6709;&#x56db;&#x79cd;&#x6a21;&#x5757;&#x4e0a;&#x4e0b;&#x6587;&#xff0c;&#x5b9e;&#x73b0;&#x4e3a;&#x56db;&#x4e2a;&#x4e0d;&#x540c;&#x7684;&#x7ed3;&#x6784;&#x4f53;&#xff0c;&#x6240;&#x4ee5;ctx&#x662f;void *&#x3002;&#x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x5f88;&#x91cd;&#x8981;&#x7684;&#x5b57;&#x6bb5;&#xff0c;&#x540e;&#x9762;&#x4f1a;&#x8be6;&#x7ec6;&#x5256;&#x6790;&#x3002;&#xa;&#xa;commands &#x662f;&#x6a21;&#x5757;&#x7684;&#x6307;&#x4ee4;&#x96c6;&#xff0c;nginx&#x7684;&#x6bcf;&#x4e2a;&#x6a21;&#x5757;&#x90fd;&#x53ef;&#x4ee5;&#x5b9e;&#x73b0;&#x4e00;&#x4e9b;&#x81ea;&#x5b9a;&#x4e49;&#x7684;&#x6307;&#x4ee4;&#xff0c;&#x8fd9;&#x4e9b;&#x6307;&#x4ee4;&#x5199;&#x5728;&#x914d;&#x7f6e;&#x6587;&#x4ef6;&#x7684;&#x9002;&#x5f53;&#x914d;&#x7f6e;&#x9879;&#x4e2d;&#xff0c;&#x6bcf;&#x4e00;&#x4e2a;&#x6307;&#x4ee4;&#x5728;&#x6e90;&#x7801;&#x4e2d;&#x5bf9;&#x5e94;&#x7740;&#x4e00;&#x4e2a; ngx_command_t&#x7ed3;&#x6784;&#x7684;&#x53d8;&#x91cf;&#xff0c;nginx&#x4f1a;&#x4ece;&#x914d;&#x7f6e;&#x6587;&#x4ef6;&#x4e2d;&#x628a;&#x6a21;&#x5757;&#x7684;&#x6307;&#x4ee4;&#x8bfb;&#x53d6;&#x51fa;&#x6765;&#x653e;&#x5230;&#x6a21;&#x5757;&#x7684;commands&#x6307;&#x4ee4;&#x6570;&#x7ec4;&#x4e2d;&#xff0c;&#x8fd9;&#x4e9b;&#x6307;&#x4ee4;&#x4e00;&#x822c;&#x662f;&#x628a;&#x914d;&#x7f6e;&#x9879;&#x7684; &#x53c2;&#x6570;&#x503c;&#x8d4b;&#x7ed9;&#x4e00;&#x4e9b;&#x7a0b;&#x5e8f;&#x4e2d;&#x7684;&#x53d8;&#x91cf;&#x6216;&#x8005;&#x662f;&#x5728;&#x4e0d;&#x540c;&#x7684;&#x53d8;&#x91cf;&#x4e4b;&#x95f4;&#x5408;&#x5e76;&#x6216;&#x8f6c;&#x6362;&#x6570;&#x636e;&#xff08;&#x4f8b;&#x5982;include&#x6307;&#x4ee4;&#xff09;&#xff0c;&#x6307;&#x4ee4;&#x53ef;&#x4ee5;&#x5e26;&#x53c2;&#x6570;&#x4e5f;&#x53ef;&#x4ee5;&#x4e0d;&#x5e26;&#x53c2;&#x6570;&#xff0c;&#x4f60;&#x53ef;&#x4ee5;&#x628a;&#x8fd9;&#x4e9b;&#x6307;&#x4ee4;&#x60f3;&#x8c61;&#x4e3a; unix&#x7684;&#x547d;&#x4ee4;&#x884c;&#x6216;&#x8005;&#x662f;&#x4e00;&#x79cd;&#x6a21;&#x677f;&#x8bed;&#x8a00;&#x7684;&#x6307;&#x4ee4;&#x3002;&#x5728;nginx&#x7684;wiki&#x4e0a;&#x6709;&#x6bcf;&#x4e2a;&#x7cfb;&#x7edf;&#x5185;&#x7f6e;&#x6a21;&#x5757;&#x7684;&#x6307;&#x4ee4;&#x8bf4;&#x660e;&#x3002;&#x6307;&#x4ee4;&#x96c6;&#x4f1a;&#x5728;&#x4e0b;&#x4e00;&#x7bc7;&#x4e2d;&#x8be6;&#x7ec6;&#x5256;&#x6790;&#x3002;&#xa;&#xa;type&#x5c31;&#x662f;&#x6a21;&#x5757;&#x7684;&#x79cd;&#x7c7b;&#xff0c;&#x524d;&#x9762;&#x5df2;&#x7ecf;&#x8bf4;&#x8fc7;&#xff0c;nginx&#x6a21;&#x5757;&#x5206;&#x4e3a;core&#x3001;event&#x3001;http&#x548c;mail&#x56db;&#x7c7b;&#xff0c;type&#x7528;&#x5b8f;&#x5b9a;&#x4e49;&#x6807;&#x8bc6;&#x56db;&#x4e2a;&#x5206;&#x7c7b;&#x3002;&#xa;&#xa;init_master&#x3001; init_module&#x3001;init_process&#x3001;init_thread&#x3001;exit_thread&#x3001;exit_process&#x3001; exit_master&#x662f;&#x51fd;&#x6570;&#x6307;&#x9488;&#xff0c;&#x6307;&#x5411;&#x6a21;&#x5757;&#x5b9e;&#x73b0;&#x7684;&#x81ea;&#x5b9a;&#x4e49;&#x56de;&#x8c03;&#x51fd;&#x6570;&#xff0c;&#x8fd9;&#x4e9b;&#x56de;&#x8c03;&#x51fd;&#x6570;&#x5206;&#x522b;&#x5728;&#x521d;&#x59cb;&#x5316;master&#x3001;&#x521d;&#x59cb;&#x5316;&#x6a21;&#x5757;&#x3001;&#x521d;&#x59cb;&#x5316;&#x5de5;&#x4f5c;&#x8fdb;&#x7a0b;&#x3001;&#x521d;&#x59cb;&#x5316;&#x7ebf;&#x7a0b;&#x3001;&#x9000; &#x51fa;&#x7ebf;&#x7a0b;&#x3001;&#x9000;&#x51fa;&#x5de5;&#x4f5c;&#x8fdb;&#x7a0b;&#x548c;&#x9000;&#x51fa;master&#x7684;&#x65f6;&#x5019;&#x88ab;&#x8c03;&#x7528;&#xff0c;&#x5982;&#x679c;&#x6a21;&#x5757;&#x9700;&#x8981;&#x5728;&#x8fd9;&#x4e9b;&#x65f6;&#x673a;&#x505a;&#x5904;&#x7406;&#xff0c;&#x5c31;&#x53ef;&#x4ee5;&#x5b9e;&#x73b0;&#x5bf9;&#x5e94;&#x7684;&#x51fd;&#x6570;&#xff0c;&#x5e76;&#x628a;&#x5b83;&#x8d4b;&#x503c;&#x7ed9;&#x5bf9;&#x5e94;&#x7684;&#x51fd;&#x6570;&#x6307;&#x9488;&#x6765;&#x6ce8;&#x518c;&#x4e00;&#x4e2a;&#x56de;&#x8c03; &#x51fd;&#x6570;&#x63a5;&#x53e3;&#x3002;&#xa;&#xa;&#x5176;&#x4f59;&#x7684;&#x53c2;&#x6570;&#x6ca1;&#x7814;&#x7a76;&#x8fc7;&#xff0c;&#x8c8c;&#x4f3c;&#x4ece;&#x6765;&#x6ca1;&#x6709;&#x7528;&#x8fc7;&#xff0c;&#x5728;&#x5b9a;&#x4e49;&#x6a21;&#x5757;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x6700;&#x524d;&#x9762;&#x7684;7&#x4e2a;&#x5b57;&#x6bb5;&#x548c;&#x6700;&#x540e;&#x9762;&#x7684;8&#x4e2a;&#x5b57;&#x6bb5;&#x7684;&#x521d;&#x59cb;&#x5316;&#x662f;&#x4f7f;&#x7528;&#x5b8f;NGX_MODULE_V1&#x548c;NGX_MODULE_V1_PADDING&#x5b8c;&#x6210;&#x7684;&#xff0c;&#x4f8b;&#x5982;&#xff1a;&#xa;&#xa;ngx_module_t  ngx_core_module = {&#xa;    NGX_MODULE_V1,&#xa;    &amp;ngx_core_module_ctx,                  /* module context */&#xa;    ngx_core_commands,                     /* module directives */&#xa;    NGX_CORE_MODULE,                       /* module type */&#xa;    NULL,                                  /* init master */&#xa;    NULL,                                  /* init module */&#xa;    NULL,                                  /* init process */&#xa;    NULL,                                  /* init thread */&#xa;    NULL,                                  /* exit thread */&#xa;    NULL,                                  /* exit process */&#xa;    NULL,                                  /* exit master */&#xa;    NGX_MODULE_V1_PADDING&#xa;};&#xff08;&#x89c1;src/core/nginx.c&#xff09;&#xa;&#xa;&#x63a5; &#x4e0b;&#x6765;&#x5256;&#x6790;&#x4e00;&#x4e0b;ngx_module_t&#x7684;ctx&#x6210;&#x5458;&#xff0c;&#x8fd9;&#x4e2a;&#x6210;&#x5458;&#x7684;&#x610f;&#x4e49;&#x662f;&#x6bcf;&#x4e2a;&#x6a21;&#x5757;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#xff0c;&#x6240;&#x8c13;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#xff0c;&#x4e5f;&#x5c31;&#x662f;&#x8fd9;&#x4e2a;&#x6a21;&#x5757;&#x7a76;&#x7adf;&#x53ef;&#x4ee5;&#x505a;&#x4ec0;&#x4e48;&#xff0c;&#x4ece;&#x524d;&#x9762;&#x7684;&#x5206;&#x6790;&#x53ef;&#x4ee5; &#x77e5;&#x9053;nginx&#x628a;&#x6240;&#x6709;&#x6a21;&#x5757;&#x5206;&#x4e3a;&#x56db;&#x7c7b;&#xff08;core/event/http/mail&#xff09;&#xff0c;&#x5bf9;&#x5e94;&#x7684;&#xff0c;nginx&#x4e5f;&#x8ba4;&#x4e3a;&#x6a21;&#x5757;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#x662f;&#x56db;&#x79cd;&#xff0c;&#x5206;&#x522b;&#x7528;&#x56db;&#x4e2a;&#x7ed3;&#x6784;&#x4f53;&#x8868; &#x793a;&#xff1a;ngx_core_module_t&#x3001;ngx_event_module_t&#x3001;ngx_http_module_t&#x3001; ngx_mail_module_t&#x3002;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x5c5e;&#x4e8e;core&#x5206;&#x7c7b;&#xff0c;&#x90a3;&#x4e48;&#x5176;&#x4e0a;&#x4e0b;&#x6587;&#x5c31;&#x662f;ngx_core_module_t&#x7ed3;&#x6784;&#x7684;&#x53d8;&#x91cf;&#xff0c;&#x5176;&#x4ed6;&#x7c7b; &#x63a8;&#x3002;&#x8fd9;&#x56db;&#x4e2a;&#x7ed3;&#x6784;&#x4f53;&#x7c7b;&#x4f3c;&#x4e8e;ngx_module_t&#xff0c;&#x4e5f;&#x662f;&#x4e00;&#x4e9b;&#x51fd;&#x6570;&#x6307;&#x9488;&#x7684;&#x96c6;&#x5408;&#xff0c;&#x6bcf;&#x4e2a;&#x6a21;&#x5757;&#x6839;&#x636e;&#x81ea;&#x5df1;&#x6240;&#x5c5e;&#x7684;&#x5206;&#x7c7b;&#xff0c;&#x81ea;&#x5b9a;&#x4e49;&#x4e00;&#x4e9b;&#x64cd;&#x4f5c;&#x51fd;&#x6570;&#xff0c;&#x901a;&#x8fc7;&#x628a;&#x8fd9;&#x4e9b;&#x64cd;&#x4f5c;&#x51fd;&#x6570;&#x8d4b;&#x503c;&#x4e3a; &#x5bf9;&#x5e94;&#x5206;&#x7c7b;&#x7ed3;&#x6784;&#x4f53;&#x4e2d;&#x7684;&#x51fd;&#x6570;&#x6307;&#x9488;&#xff0c;&#x8fd9;&#x5c31;&#x6ce8;&#x518c;&#x4e86;&#x4e00;&#x4e2a;&#x56de;&#x8c03;&#x51fd;&#x6570;&#x63a5;&#x53e3;&#xff0c;&#x4ece;&#x800c;&#x5c31;&#x53ef;&#x4ee5;&#x5b9e;&#x73b0;&#x66f4;&#x7ec6;&#x81f4;&#x7684;&#x529f;&#x80fd;&#x4e86;&#xff0c;&#x4f8b;&#x5982;&#x53ef;&#x4ee5;&#x4e3a;event&#x6a21;&#x5757;&#x6dfb;&#x52a0;&#x4e8b;&#x4ef6;&#x5904;&#x7406;&#x51fd;&#x6570;&#xff0c;&#x53ef;&#x4ee5;&#x4e3a;http&#x6a21;&#x5757;&#x6dfb;&#x52a0;&#x8fc7;&#x6ee4;&#x51fd;&#x6570;&#x7b49;&#x3002;&#xa;&#xa;&#x8fd9;&#x56db;&#x4e2a;&#x7ed3;&#x6784;&#x4f53;&#x548c;commands&#x4f1a;&#x5728;&#x4e0b;&#x4e00;&#x7bc7;&#x4e2d;&#x8be6;&#x7ec6;&#x5256;&#x6790;&#xff0c;&#x73b0;&#x5728;&#x628a;&#x6ce8;&#x610f;&#x529b;&#x8f6c;&#x79fb;&#x4e00;&#x4e0b;&#xff0c;&#x6765;&#x54c1;&#x5473;&#x4e00;&#x4e0b;nginx&#x7684;&#x547d;&#x540d;&#xff0c;&#x627e;&#x51fa;&#x5176;&#x89c4;&#x5f8b;&#xff0c;&#x8fd9;&#x5bf9;&#x9605;&#x8bfb;&#x6e90;&#x7801;&#x7684;&#x5e2e;&#x52a9;&#x662f;&#x975e;&#x5e38;&#x5927;&#x7684;&#x3002;&#xa;&#xa;&#x9996;&#x5148;&#x662f;&#x6a21;&#x5757;&#xff0c;&#x6a21;&#x5757;&#x662f;ngx_module_t&#x7ed3;&#x6784;&#x7684;&#x53d8;&#x91cf;&#xff0c;&#x5176;&#x547d;&#x540d;&#x683c;&#x5f0f;&#x4e3a;&#xff1a;ngx_&lt;module name&gt;_module&#x3002;&#xa;&#x7136;&#x540e;&#x662f;&#x6a21;&#x5757;&#x4e0a;&#x4e0b;&#x6587;&#xff0c;&#x6a21;&#x5757;&#x4e0a;&#x4e0b;&#x6587;&#x6839;&#x636e;&#x4e0d;&#x540c;&#x7684;&#x6a21;&#x5757;&#x5206;&#x7c7b;&#x5206;&#x522b;&#x662f;ngx_core_module_t&#x3001;ngx_event_module_t&#x3001; ngx_http_module_t&#x548c;ngx_mail_module_t&#x7ed3;&#x6784;&#x7684;&#x53d8;&#x91cf;&#xff0c;&#x5176;&#x547d;&#x540d;&#x683c;&#x5f0f;&#x4e3a;&#xff1a;ngx_&lt;module name&gt;_module_ctx&#x3002;&#xa;&#x63a5;&#x7740;&#x662f;&#x6a21;&#x5757;&#x547d;&#x4ee4;&#x96c6;&#xff0c;&#x6a21;&#x5757;&#x547d;&#x4ee4;&#x96c6;&#x662f;ngx_command_t&#x7684;&#x6307;&#x9488;&#x6570;&#x7ec4;&#xff0c;&#x5176;&#x547d;&#x540d;&#x683c;&#x5f0f;&#x4e3a;&#xff1a;ngx_&lt;module name&gt;_commands&#x3002;"/>
</node>
<node CREATED="1388928539349" FOLDED="true" LINK="http://blog.csdn.net/kenbinzhang/article/details/4663258" MODIFIED="1389146390413" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388928543889" MODIFIED="1389072245712">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#27169;&#22359;&#30340;&#19978;&#19979;&#25991;&#26159;&#22235;&#20010;&#32467;&#26500;&#20307;&#23450;&#20041;&#30340;&#65306;ngx_core_module_t&#12289;ngx_event_module_t&#12289;ngx_http_module_t&#12289;ngx_mail_module_t&#65292;&#20998;&#21035;&#23545;&#24212;&#20110;&#22235;&#31867;&#27169;&#22359;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#36825; &#22235;&#20010;&#32467;&#26500;&#20307;&#37117;&#25552;&#20379;&#20102;&#38057;&#23376;&#20379;&#27169;&#22359;&#27880;&#20876;&#19982;&#19978;&#19979;&#25991;&#26377;&#20851;&#30340;&#25805;&#20316;&#65292;&#26680;&#24515;&#27169;&#22359;&#25552;&#20379;&#20102;create_conf&#21644;init_conf&#20004;&#20010;&#38057;&#23376;&#65307;event&#27169;&#22359;&#20063;&#25552;&#20379;&#20102; create_conf&#21644;init_conf&#20004;&#20010;&#38057;&#23376;&#65292;&#38500;&#27492;&#20043;&#22806;&#36824;&#25552;&#20379;&#20102;&#19968;&#38598;&#25805;&#20316;&#20107;&#20214;&#30340;&#38057;&#23376;&#65307;http&#27169;&#22359;&#25552;&#20379;&#20102;&#20960;&#20010;&#22312;&#35835;&#21462;&#37197;&#32622;&#25991;&#20214;&#21069;&#21518;&#21644;&#25805;&#20316; mail/srv/loc&#37197;&#32622;&#39033;&#26102;&#20505;&#25191;&#34892;&#30340;&#38057;&#23376;&#65307;mail&#27169;&#22359;&#20063;&#25552;&#20379;&#19968;&#20123;&#31867;&#20284;&#20110;http&#27169;&#22359;&#30340;&#38057;&#23376;&#65292;&#19981;&#36807;&#27604;http&#27169;&#22359;&#31616;&#21333;&#19968;&#20123;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#21482;&#35201;&#35774; &#32622;&#20102;&#38057;&#23376;&#65292;&#36825;&#20123;&#38057;&#23376;&#23601;&#20250;&#22312;&#29305;&#23450;&#30340;&#26102;&#26426;&#34987;&#27491;&#30830;&#35843;&#29992;&#65292;&#21482;&#19981;&#36807;&#27169;&#22359;&#30340;&#31181;&#31867;&#19981;&#21516;&#65292;&#20854;&#38057;&#23376;&#35843;&#29992;&#30340;&#26102;&#26426;&#20063;&#23601;&#22823;&#19981;&#21516;&#65292;&#36825;&#26159;&#30001;&#20110;nginx&#30340;&#22235;&#31181;&#27169;&#22359;&#20043;&#38388;&#30340;&#24046;&#21035;&#24456;&#22823;&#65306;&#26680;&#24515; &#31867;&#27169;&#22359;&#19968;&#33324;&#26159;&#20840;&#23616;&#24615;&#30340;&#27169;&#22359;&#65292;&#23427;&#20204;&#20250;&#22312;&#31995;&#32479;&#30340;&#35768;&#22810;&#37096;&#20998;&#34987;&#20351;&#29992;&#65292;&#27604;&#22914;errlog&#27169;&#22359;&#36127;&#36131;&#20889;&#38169;&#35823;&#26085;&#24535;&#65292;&#23427;&#34987;&#20351;&#29992;&#22312;&#35768;&#22810;&#22320;&#26041;&#65307;event&#31867;&#27169;&#22359;&#26159;&#20107;&#20214;&#39537;&#21160;&#30456;&#20851;&#30340; &#27169;&#22359;&#65292;nginx&#22312;&#19981;&#21516;&#25805;&#20316;&#31995;&#32479;&#19978;&#37117;&#20250;&#26377;&#32467;&#21512;&#35813;&#25805;&#20316;&#31995;&#32479;&#29305;&#26377;&#25509;&#21475;&#30340;&#20107;&#20214;&#22788;&#29702;&#27169;&#22359;&#65292;&#27604;&#22914;&#22312;linux&#20013;&#21487;&#20197;&#20351;&#29992;epoll&#27169;&#22359;&#65292;&#22312;freebsd&#20013;&#21487;&#20197;&#20351;&#29992; kqueue&#27169;&#22359;&#65292;&#22312;solaris&#20013;&#21487;&#20197;&#20351;&#29992;devpoll&#20107;&#20214;&#31561;&#65307;http&#31867;&#27169;&#22359;&#26159;&#29992;&#20110;&#22788;&#29702;http&#36755;&#20837;&#65292;&#20135;&#29983;&#36755;&#20986;&#65292;&#36807;&#28388;&#36755;&#20986;&#65292;&#36127;&#36733;&#22343;&#34913;&#31561;&#30340;&#27169;&#22359;&#65292;&#36825; &#26159;nginx&#20316;&#20026;web&#26381;&#21153;&#22120;&#30340;&#26680;&#24515;&#37096;&#20998;&#65292;Emiller&#30340;&#35770;&#25991;&#23601;&#26159;&#20851;&#20110;http&#27169;&#22359;&#30340;&#24320;&#21457;&#25351;&#24341;&#65307;mail&#31867;&#27169;&#22359;&#26159;&#23454;&#29616;&#37038;&#20214;&#20195;&#29702;&#30340;&#27169;&#22359;&#65292;&#23454;&#29616;&#20102; smtp/pop3/imap&#31561;&#21327;&#35758;&#30340;&#37038;&#20214;&#20195;&#29702;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#21040;&#36825;&#37324;&#65292;&#24050;&#32463;&#25226;nginx&#25286;&#24320;&#20026;&#19968;&#20010;&#20010;&#30340;&#27169;&#22359;&#65292;&#21518;&#38754;&#30340;&#20998;&#26512;&#23601;&#21487;&#20197;&#23545;&#27599;&#20010;&#27169;&#22359;&#36827;&#34892;&#35814;&#32454;&#30340;&#21078;&#26512;&#65292;&#20063;&#23601;&#21487;&#20197;&#36827;&#20837;&#38405;&#35835;&#28304;&#30721;&#30340;&#31934;&#35835;&#38454;&#27573;&#20102;&#12290;&#22312;&#36825;&#20043;&#21069;&#65292;&#20877;&#23581;&#35797;&#25226;&#36825;&#20123;&#29420;&#31435;&#30340;&#27169;&#22359;&#20018;&#19968;&#19979;&#65292;&#20174;main&#24320;&#22987;&#65292;&#30475;&#30475;nginx&#26159;&#20309;&#26102;&#22312;&#20309;&#22320;&#35843;&#24230;&#36825;&#20123;&#27169;&#22359;&#24178;&#27963;&#30340;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      <font color="#080bfb"><b>main</b></font>
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#25152;&#26377;&#27169;&#22359;&#28857;&#19968;&#19979;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_max_module = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color="#f80707">ngx_modules[i]-&gt;index</font>&#160; = ngx_max_module++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#20027;&#35201;&#30340;&#21021;&#22987;&#21270;&#36807;&#31243;&#65292;&#20840;&#23616;&#30340;&#25968;&#25454;&#23384;&#25918;&#21040;ngx_cycle_t&#32467;&#26500;&#30340;&#21464;&#37327;&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;cycle = ngx_init_cycle(&amp;init_cycle);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#21551;&#21160;&#36827;&#31243;&#24178;&#27963;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_process == NGX_PROCESS_SINGLE) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_single_process_cycle(cycle);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_master_process_cycle(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return 0;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      <font color="#260bee"><b>ngx_init_cycle</b></font>
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;core&#27169;&#22359;&#30340;&#38057;&#23376;create_conf&#65292;&#24182;&#19988;&#25226;&#21019;&#24314;&#30340;&#37197;&#32622;&#32467;&#26500;&#20307;&#21464;&#37327;&#23384;&#25918;&#21040;cyclep-&gt;conf_ctx&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#ec0707">ngx_modules[i]-&gt;type</font>&#160; != NGX_CORE_MODULE) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;module = ngx_modules[i]-&gt;ctx;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (module-&gt;create_conf) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rv = module-&gt;create_conf(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rv == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_destroy_pool(pool);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle-&gt;conf_ctx[ngx_modules[i]-&gt;index] = rv;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_conf_parse
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;core&#27169;&#22359;&#30340;&#38057;&#23376;init_conf&#65292;&#35774;&#32622;&#21018;&#25165;&#21019;&#24314;&#30340;&#37197;&#32622;&#32467;&#26500;&#20307;&#21464;&#37327;&#65288;&#29992;&#20174;&#37197;&#32622;&#25991;&#20214;&#20013;&#35835;&#21462;&#30340;&#25968;&#25454;&#36171;&#20540;&#65289;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;type != NGX_CORE_MODULE) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;module = ngx_modules[i]-&gt;ctx;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f90a0a">module-&gt;init_conf</font>) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (module-&gt;init_conf(cycle, cycle-&gt;conf_ctx[ngx_modules[i]-&gt;index])
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;== NGX_CONF_ERROR)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_destroy_cycle_pools(&amp;conf);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;&#25152;&#26377;&#27169;&#22359;&#30340;init_module&#38057;&#23376;&#65292;&#21021;&#22987;&#21270;&#27169;&#22359;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;init_module) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f30404">ngx_modules[i]-&gt;init_module</font>(cycle) != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* fatal */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit(1);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      <font color="#0e0af6"><b>ngx_conf_parse</b></font>
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_conf_handler
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      <font color="#0925fd"><b>ngx_conf_handler</b></font>
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22788;&#29702;&#27169;&#22359;&#30340;&#25351;&#20196;&#38598;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* look up the directive in the appropriate modules */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f80707">ngx_modules[i]-&gt;type</font>&#160; != NGX_CONF_MODULE
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&amp; ngx_modules[i]-&gt;type != cf-&gt;module_type)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cmd = <font color="#fb0404">ngx_modules[i]-&gt;commands</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cmd == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for ( /* void */ ; cmd-&gt;name.len; cmd++) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (name-&gt;len != cmd-&gt;name.len) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_strcmp(name-&gt;data, cmd-&gt;name.data) != 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* is the directive's location right ? */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!(cmd-&gt;type &amp; cf-&gt;cmd_type)) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cmd-&gt;type &amp; NGX_CONF_MULTI) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multi = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto not_allowed;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!(cmd-&gt;type &amp; NGX_CONF_BLOCK) &amp;&amp; last != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;directive /&quot;%s/&quot; is not terminated by /&quot;;/&quot;&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name-&gt;data);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((cmd-&gt;type &amp; NGX_CONF_BLOCK) &amp;&amp; last != NGX_CONF_BLOCK_START) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;directive /&quot;%s/&quot; has no opening /&quot;{/&quot;&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name-&gt;data);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* is the directive's argument count right ? */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!(cmd-&gt;type &amp; NGX_CONF_ANY)) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cmd-&gt;type &amp; NGX_CONF_FLAG) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cf-&gt;args-&gt;nelts != 2) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto invalid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (cmd-&gt;type &amp; NGX_CONF_1MORE) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cf-&gt;args-&gt;nelts &lt; 2) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto invalid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (cmd-&gt;type &amp; NGX_CONF_2MORE) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cf-&gt;args-&gt;nelts &lt; 3) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto invalid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (cf-&gt;args-&gt;nelts &gt; NGX_CONF_MAX_ARGS) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto invalid;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (!(cmd-&gt;type &amp; argument_number[cf-&gt;args-&gt;nelts - 1]))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goto invalid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* set up the directive's configuration context */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf = NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cmd-&gt;type &amp; NGX_DIRECT_CONF) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf = ((void **) cf-&gt;ctx)[ngx_modules[i]-&gt;index];
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (cmd-&gt;type &amp; NGX_MAIN_CONF) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf = &amp;(((void **) cf-&gt;ctx)[ngx_modules[i]-&gt;index]);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (cf-&gt;ctx) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;confp = *(void **) ((char *) cf-&gt;ctx + cmd-&gt;conf);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (confp) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf = confp[ngx_modules[i]-&gt;ctx_index];
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#35843;&#24230;&#25351;&#20196;&#30340;&#38057;&#23376;set
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rv = <font color="#f70404">cmd-&gt;set</font>(cf, cmd, conf);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rv == NGX_CONF_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rv == NGX_CONF_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/&quot;%s/&quot; directive %s&quot;, name-&gt;data, rv);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      ngx_master_process_cycle
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_start_worker_processes
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_master_process_exit
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      ngx_start_worker_processes
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// for i = 0 to n
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_worker_process_cycle
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      ngx_worker_process_cycle
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_worker_process_init
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_worker_process_exit
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      ngx_worker_process_init
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;&#25152;&#26377;&#27169;&#22359;&#30340;&#38057;&#23376;init_process
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;init_process) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;<font color="#fa0909">init_process</font>(cycle) == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* fatal */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit(2);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      ngx_worker_process_exit
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;&#25152;&#26377;&#27169;&#22359;&#30340;&#38057;&#23376;exit_process
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;exit_process) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_modules[i]-&gt;<font color="#fb0808">exit_process</font>(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      ngx_master_process_exit
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#24230;&#25152;&#26377;&#27169;&#22359;&#30340;&#38057;&#23376;exit_master
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;exit_master) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_modules[i]-&gt;<font color="#fb0404">exit_master</font>(cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      &#22312;&#36825;&#20010;&#35843;&#24230;&#27969;&#20013;&#65292;&#25105;&#20204;&#24182;&#27809;&#26377;&#30475;&#21040;event&#31867;&#27169;&#22359;&#12289;http&#31867;&#27169;&#22359;&#21644;mail&#31867;&#27169;&#22359;&#38057;&#23376;&#30340;&#35843;&#24230;&#65292;&#37027;&#26159;&#30001;&#20110;&#36825;&#19977;&#31867;&#27169;&#22359;&#27880;&#20876;&#21040;ngx_module_t&#30340;&#38057;&#23376;&#21644;ngx_command_t&#30340;&#38057;&#23376;&#19978;&#30340;&#25805;&#20316;&#20013;&#35843;&#24230;&#20102;&#36825;&#20123;&#29420;&#29305;&#30340;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;&#38057;&#23376;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388928539349" FOLDED="true" LINK="http://www.pagefault.info/?p=188" MODIFIED="1389590357303" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388928543889" MODIFIED="1389590349822">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22312;nginx&#20013;&#65292;&#27169;&#22359;&#30340;&#32467;&#26500;&#26159;&#36825;&#26679;&#23376;&#30340;&#65292;&#39318;&#20808;&#25152;&#26377;&#30340;&#27169;&#22359;&#37117;&#26159;&#29992;ngx_module_t&#26469;&#34920;&#31034;&#65292;&#32780;&#27169;&#22359;&#21448;&#20998;&#20026;&#19977;&#31867;&#65292;&#20998;&#21035;&#26159;ngx_core_module_t&#21644;ngx_http_module_t&#65292;&#32780;&#22312;ngx_module_t&#20013;&#20250;&#21253;&#21547;&#36825;&#20004;&#20010;&#32467;&#26500;&#65292;&#21482;&#19981;&#36807;&#19981;&#21516;&#31867;&#30340;&#27169;&#22359;&#21253;&#21547;&#19981;&#21516;&#30340;&#32467;&#26500;&#12290;&#19968;&#33324;&#26469;&#35828;&#36825;&#37096;&#20998;&#23601;&#21483;&#20570;ctx&#65292;&#25105;&#20204;&#20889;&#27169;&#22359;&#37117;&#20250;&#20808;&#23450;&#20041;&#19968;&#20010;ctx&#65292;&#28982;&#21518;&#21253;&#21547;&#21040;ngx_module_t&#20013;&#12290;&#36825;&#37324;&#26377;&#20010;type&#22495;&#29992;&#26469;&#26631;&#35782;&#27169;&#22359;&#30340;&#31867;&#22411;&#12290;
    </p>
    <p>
      struct ngx_module_s {
    </p>
    <p>
      void&#160;&#160;****conf_ctx;
    </p>
    <p>
      //ctx&#32034;&#24341;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ctx_index;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;index;
    </p>
    <p>
      ........................................................
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version;
    </p>
    <p>
      //ctx
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*ctx;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_command_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*commands;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(*init_master)(ngx_log_t *log);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(*init_module)(ngx_cycle_t *cycle);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(*init_process)(ngx_cycle_t *cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(*init_thread)(ngx_cycle_t *cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(*exit_thread)(ngx_cycle_t *cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(*exit_process)(ngx_cycle_t *cycle);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(*exit_master)(ngx_cycle_t *cycle);
    </p>
    <p>
      .............................................................
    </p>
    <p>
      };
    </p>
    <p>
      &#36825;&#37324;&#30475;&#21040;&#26377;&#20004;&#20010;index&#65292;&#20998;&#21035;&#26159;ctx_index&#21644;index&#65292;&#20182;&#20204;&#30340;&#21306;&#21035;&#26159;&#36825;&#26679;&#23376;&#30340;&#65292;ctx_index&#20445;&#23384;&#20102;&#27599;&#19968;&#20010;http module&#30340;config&#30340;&#32034;&#24341;&#65292;&#32780;&#25152;&#26377;&#30340;http module config&#26159;&#20998;&#21035;&#20445;&#23384;&#22312;nginx_conf_t&#30340;ctx&#25968;&#32452;&#20013;&#30340;.&#32780;index&#20445;&#23384;&#20102;&#27599;&#19968;&#20010;core module&#30340;config&#65292;&#32780;&#27599;&#20010;core module&#30340;config&#37117;&#26159;&#20445;&#23384;&#22312;cycle&#30340;conf_ctx&#20013;&#30340;&#65292;&#19979;&#38754;&#30340;&#20195;&#30721;&#33021;&#22815;&#24456;&#26126;&#26174;&#30475;&#20986;&#20182;&#20204;&#30340;&#19981;&#21516;&#12290;
    </p>
    <p>
      #define ngx_http_conf_get_module_main_conf(cf, module)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;\
    </p>
    <p>
      &#160;&#160;&#160;&#160;((ngx_http_conf_ctx_t *) cf-&gt;ctx)-&gt;main_conf[module.ctx_index]
    </p>
    <p>
      &#160;
    </p>
    <p>
      #define ngx_get_conf(conf_ctx, module)&#160;&#160;conf_ctx[module.index]
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389071862448" MODIFIED="1390524683668" TEXT="0.init_master"/>
<node CREATED="1389071898360" FOLDED="true" LINK="#ID_1428001477" MODIFIED="1390525881653" TEXT="1.init_module">
<node CREATED="1389593983132" MODIFIED="1389594144566" TEXT="&#x5728;ngx_init_cycle&#x4e2d;&#x8c03;&#x7528;"/>
</node>
<node COLOR="#080d06" CREATED="1388930930010" FOLDED="true" LINK="#ID_721758468" MODIFIED="1390525992134" TEXT="2.init_process">
<node CREATED="1389593983132" MODIFIED="1389594153978" TEXT="&#x5728;ngx_worker_process_init&#x4e2d;&#x8c03;&#x7528;"/>
</node>
<node CREATED="1389070521808" FOLDED="true" ID="ID_1607511909" LINK="#ID_1476584593" MODIFIED="1390524704375" TEXT="3.exit_process">
<node CREATED="1389593983132" MODIFIED="1389594177413" TEXT="&#x5728;ngx_worker_process_exit&#x4e2d;&#x8c03;&#x7528;"/>
</node>
<node COLOR="#990000" CREATED="1389071881236" FOLDED="true" LINK="#ID_929255851" MODIFIED="1390524822209">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font color="#050505">4.exit_master</font>
    </p>
  </body>
</html></richcontent>
<node CREATED="1389593983132" MODIFIED="1389594226391" TEXT="&#x5728;ngx_master_process_exit&#x4e2d;&#x8c03;&#x7528;"/>
</node>
<node CREATED="1389071735683" LINK="#ID_1428001477" MODIFIED="1389073332593" TEXT="ctx"/>
<node CREATED="1389072414336" LINK="#ID_1428001477" MODIFIED="1389072478077" TEXT="type"/>
<node CREATED="1389072543587" MODIFIED="1389072547340" TEXT="index"/>
<node CREATED="1389072558267" MODIFIED="1389072564991" TEXT="ctx_index"/>
</node>
<node CREATED="1389070818829" FOLDED="true" MODIFIED="1389149737862" TEXT="ngx_core_module_t">
<icon BUILTIN="full-3"/>
<node CREATED="1389146489892" FOLDED="true" MODIFIED="1389146502340" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389070919651" LINK="#ID_1428001477" MODIFIED="1389071131905">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typedef struct {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name;
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*<font color="#f40707">create_conf</font>)(ngx_cycle_t *cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*<font color="#f60101">init_conf</font>)(ngx_cycle_t *cycle, void *conf);
    </p>
    <p>
      } ngx_core_module_t;&#65288;&#35265;src/core/ngx_conf_file.h&#65289;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389146057229" FOLDED="true" MODIFIED="1389149612512" TEXT="&#x5b50;ctx&#x5206;&#x6790;">
<node CREATED="1389146065581" MODIFIED="1389149610444">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26680;&#24515;&#31867;&#27169;&#22359;&#65292;&#21363;&#19978;&#19979;&#25991;&#20026;ngx_core_module_t&#32467;&#26500;&#30340;&#27169;&#22359;&#26377;&#20197;&#19979;&#20960;&#20010;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      ngx_module_t ngx_core_module;
    </p>
    <p>
      ngx_module_t ngx_errlog_module;
    </p>
    <p>
      ngx_module_t ngx_events_module;
    </p>
    <p>
      ngx_module_t ngx_http_module;
    </p>
    <p>
      ngx_module_t ngx_mail_module;
    </p>
    <p>
      ngx_module_t ngx_openssl_module;
    </p>
    <p>
      ngx_module_t ngx_google_perftools_module;
    </p>
    <p>
      ngx_module_t ngx_conf_module;(&#27809;&#26377;&#27169;&#22359;&#19978;&#19979;&#25991;&#65292;&#36825;&#37324;&#25226;&#23427;&#24402;&#31867;&#21040;&#26680;&#24515;&#31867;&#65292;&#20415;&#20110;&#21518;&#38754;&#20998;&#26512;)
    </p>
    <p>
      
    </p>
    <p>
      <font color="#f80707">ngx_events_module</font>&#65292;ngx_http_module&#65292;ngx_mail_module &#36825;&#19977;&#20010;&#27169;&#22359;&#20027;&#35201;&#26159;&#23454;&#29616;&#20102;&#23545;&#37197;&#32622;&#25991;&#20214;&#20013;events {...},http {...},mail {...}/imap {...}&#37197;&#32622;&#22495;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#23427;&#20204;&#23884;&#22871;&#35843;&#29992;event&#31867;&#27169;&#22359;&#12289;http&#31867;&#27169;&#22359;&#21644;mail&#31867;&#27169;&#22359;&#23454;&#29616;&#30340;&#25351;&#20196;&#35299;&#26512;&#38057;&#23376;&#35299;&#26512;{}&#20013;&#30340;&#20855;&#20307;&#25351;&#20196;&#65292;&#23427;&#20204;&#27809;&#26377;&#23454;&#29616;&#27169;&#22359; &#19978;&#19979;&#25991;&#30340;create_conf&#21644;init_conf&#38057;&#23376;&#65288;&#20063;&#19981;&#38656;&#35201;&#65292;&#22240;&#20026;&#23427;&#20204;&#21482;&#26159;&#19968;&#20010;&#20013;&#36716;&#32780;&#24050;&#65292;&#19981;&#20570;&#23454;&#38469;&#30340;&#20107;&#24773;&#65289;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_core_module &#23454;&#29616;&#20102;&#37197;&#32622;&#25991;&#20214;&#20013;&#20840;&#23616;&#22495;&#30340;&#22823;&#37096;&#20998;&#25351;&#20196;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#23427;&#20204;&#20063;&#23454;&#29616;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;create_conf&#38057;&#23376;&#21644;init_conf&#38057;&#23376;&#65292;&#21019;&#24314;&#21644;&#21021;&#22987;&#21270; ngx_core_conf_t&#37197;&#32622;&#32467;&#26500;&#65292;&#36825;&#20010;&#32467;&#26500;&#21487;&#20197;&#36890;&#36807;cycle-&gt;conf_ctx[module.index]&#24341;&#29992;&#21040;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_errlog_module&#23454;&#29616;&#20102;&#37197;&#32622;&#25991;&#20214;&#20013;&#20840;&#23616;&#22495;&#30340;error_log&#25351;&#20196;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#27809;&#26377;&#23454;&#29616;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;create_conf&#21644;init_conf&#38057;&#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_conf_module&#23454;&#29616;&#20102;&#20840;&#23616;&#22495;&#30340;include&#25351;&#20196;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#27809;&#26377;&#23454;&#29616;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;create_conf&#21644;init_conf&#38057;&#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_openssl_module &#23454;&#29616;&#20102;&#20840;&#23616;&#22495;&#30340;ssl_engine&#25351;&#20196;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#23454;&#29616;&#20102;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;create_conf&#38057;&#23376;&#65292;&#21019;&#24314;ngx_openssl_conf_t&#37197;&#32622;&#32467; &#26500;&#65292;&#36825;&#20010;&#32467;&#26500;&#21487;&#20197;&#36890;&#36807;cycle-&gt;conf_ctx[module.index]&#24341;&#29992;&#21040;&#65292;&#20063;&#23454;&#29616;&#20102;&#27169;&#22359;&#30340;exit_master&#38057;&#23376;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389593983132" MODIFIED="1389594007644" TEXT="&#x5728;ngx_init_cycle&#x4e2d;&#x521d;&#x59cb;&#x5316;"/>
</node>
<node CREATED="1388928664866" FOLDED="true" MODIFIED="1389107626790" TEXT="ngx_http_module_t">
<icon BUILTIN="full-3"/>
<node CREATED="1389592562109" FOLDED="true" MODIFIED="1389592568403" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389071288907" MODIFIED="1389071304304">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      
    </p>
    <p>
      typedef struct {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;(*preconfiguration)(ngx_conf_t *cf);
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;(*postconfiguration)(ngx_conf_t *cf);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*create_main_conf)(ngx_conf_t *cf);
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*init_main_conf)(ngx_conf_t *cf, void *conf);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*create_srv_conf)(ngx_conf_t *cf);
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*create_loc_conf)(ngx_conf_t *cf);
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*merge_loc_conf)(ngx_conf_t *cf, void *prev, void *conf);
    </p>
    <p>
      } ngx_http_module_t;&#65288;&#35265;src/http/ngx_http_config.h&#65289;
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389146057229" MODIFIED="1389149612512" TEXT="&#x5b50;ctx&#x5206;&#x6790;">
<node CREATED="1389146065581" MODIFIED="1389592721839">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22823;&#37096;&#20998;http&#30340;module&#37117;&#26159;&#27492;&#31181;&#31867;&#22411;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1388928654001" FOLDED="true" MODIFIED="1390395372699" TEXT="ngx_event_module_t">
<icon BUILTIN="full-3"/>
<node CREATED="1389146454989" FOLDED="true" MODIFIED="1389146530362" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389071198024" MODIFIED="1389599930590">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      typedef struct {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*name;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*create_conf)(ngx_cycle_t *cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*init_conf)(ngx_cycle_t *cycle, void *conf);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_actions_t&#160;&#160;&#160;&#160;&#160;actions;
    </p>
    <p>
      } ngx_event_module_t;&#65288;&#35265;src/event/ngx_event.h&#65289;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389146057229" MODIFIED="1389149645519" TEXT="&#x5b50;ctx&#x5206;&#x6790;">
<node CREATED="1390008512902" FOLDED="true" MODIFIED="1390008529085" TEXT="&#x6982;&#x8ff0;">
<node CREATED="1389146065581" MODIFIED="1389147271465">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20107;&#20214;&#31867;&#27169;&#22359;&#65292;&#21363;&#27169;&#22359;&#19978;&#19979;&#25991;&#20026;ngx_event_module_t&#32467;&#26500;&#30340;&#27169;&#22359;&#26377;&#20197;&#19979;&#20960;&#20010;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      ngx_module_t ngx_event_core_module;
    </p>
    <p>
      ngx_module_t ngx_select_module;
    </p>
    <p>
      ngx_module_t ngx_poll_module;
    </p>
    <p>
      ngx_module_t ngx_eventport_module;
    </p>
    <p>
      ngx_module_t ngx_aio_module;
    </p>
    <p>
      ngx_module_t ngx_epoll_module;
    </p>
    <p>
      ngx_module_t ngx_kqueue_module;
    </p>
    <p>
      ngx_module_t ngx_devpoll_module;
    </p>
    <p>
      ngx_module_t ngx_rtsig_module;
    </p>
    <p>
      
    </p>
    <p>
      ngx_event_core_module &#23454;&#29616;&#20102;&#37197;&#32622;&#25991;&#20214;events&#22495;&#30340; worker_connections,connections,use,multi_accept,accept_mutex,accept_mutex_delay &#21644;debug_connection&#25351;&#20196;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#20063;&#23454;&#29616;&#20102;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;create_conf&#21644;init_conf&#38057;&#23376;&#65292;&#21019;&#24314;&#21644;&#21021;&#22987;&#21270; ngx_event_conf_t&#37197;&#32622;&#32467;&#26500;&#65292;&#36825;&#20010;&#32467;&#26500;&#21487;&#20197;&#36890;&#36807;cycle-&gt;conf_ctx[module.index]&#24341;&#29992;&#21040;&#65292;&#21478;&#22806;&#36824;&#23454;&#29616;&#20102;&#27169; &#22359;&#30340;init_module&#21644;init_process&#38057;&#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ================================
    </p>
    <p>
      ngx_select_module&#23454;&#29616;&#20102;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;init_conf &#21021;&#22987;&#21270;&#37197;&#32622;&#38057;&#23376;&#21644;actions.add&#12289;actions.del&#12289;actions.enable&#12289;actions.disable&#12289; actions.process_events&#12289;actions.init&#12289;actions.done&#36825;&#20960;&#20010;&#20107;&#20214;&#22788;&#29702;&#38057;&#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_poll_module &#23454;&#29616;&#20102;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;init_conf&#21021;&#22987;&#21270;&#37197;&#32622;&#38057;&#23376;&#21644;actions.add&#12289;actions.del&#12289;actions.enable&#12289; actions.disable&#12289;actions.process_events&#12289;actions.init&#12289;actions.done&#36825;&#20960;&#20010;&#20107;&#20214;&#22788;&#29702;&#38057; &#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_eventport_module&#23454;&#29616;&#20102;&#37197;&#32622;&#25991;&#20214;events&#22495;&#30340;eventport_events&#25351;&#20196;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#23454;&#29616;&#20102; &#27169;&#22359;&#19978;&#19979;&#25991;&#30340;create_conf&#21644;init_conf&#38057;&#23376;&#65292;&#21019;&#24314;&#21644;&#21021;&#22987;&#21270;ngx_eventport_conf_t&#37197;&#32622;&#32467;&#26500;&#20307;&#65292;&#36825;&#20010;&#32467;&#26500;&#21487;&#20197;&#36890;&#36807; cycle-&gt;conf_ctx[module.index]&#24341;&#29992;&#21040;&#65292;&#20063;&#23454;&#29616;&#20102;actions.add&#12289;actions.del&#12289; actions.enable&#12289;actions.disable&#12289;actions.process_events&#12289;actions.init&#12289; actions.done&#36825;&#20960;&#20010;&#20107;&#20214;&#22788;&#29702;&#38057;&#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_aio_module&#23454;&#29616;&#20102;actions.add&#12289;actions.del&#12289;actions.del_conn&#12289;actions.process_events&#12289;actions.init&#12289;actions.done&#36825;&#20960;&#20010;&#20107;&#20214;&#22788;&#29702;&#38057;&#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      <font color="#f90606">ngx_epoll_module</font>&#23454;&#29616;&#20102;&#37197;&#32622;&#25991;&#20214;events&#22495;&#30340;epoll_events&#25351;&#20196;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#23454;&#29616;&#20102;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;create_conf&#21644;init_conf&#38057;&#23376;&#65292;&#21019;&#24314;&#21644;&#21021; &#22987;&#21270;ngx_epoll_conf_t&#37197;&#32622;&#32467;&#26500;&#65292;&#36825;&#20010;&#32467;&#26500;&#21487;&#20197;&#36890;&#36807;cycle-&gt;conf_ctx[module.index]&#24341;&#29992;&#21040;&#65292;&#20063;&#23454;&#29616;&#20102; actions.add&#12289;actions.del&#12289;actions.enable&#12289;actions.disable&#12289;actions.add_conn&#12289; actions.del_conn&#12289;actions.process_events&#12289;actions.init&#12289;actions.done&#36825;&#20960;&#20010;&#20107;&#20214;&#22788;&#29702; &#38057;&#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_kqueue_module&#23454;&#29616;&#20102;&#37197;&#32622;&#25991;&#20214;events&#22495;&#30340;kqueue_changes&#21644;kqueue_events&#25351; &#20196;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#23454;&#29616;&#20102;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;create_conf&#21644;init_conf&#38057;&#23376;&#65292;&#21019;&#24314;&#21644;&#21021;&#22987;&#21270;ngx_kqueue_conf_t&#37197;&#32622;&#32467;&#26500;&#65292;&#36825;&#20010;&#32467;&#26500; &#21487;&#20197;&#36890;&#36807;cycle-&gt;conf_ctx[module.index]&#24341;&#29992;&#21040;&#65292;&#20063;&#23454;&#29616;&#20102;actions.add&#12289;actions.del&#12289; actions.enable&#12289;actions.disable&#12289;actions.process_changes&#12289; actions.process_events&#12289;actions.init&#12289;actions.done&#36825;&#20960;&#20010;&#20107;&#20214;&#22788;&#29702;&#38057;&#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_devpoll_module &#23454;&#29616;&#20102;&#37197;&#32622;&#25991;&#20214;events&#22495;&#30340;devpoll_changes&#21644;devpoll_events&#25351;&#20196;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#23454;&#29616;&#20102;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340; create_conf&#21644;init_conf&#38057;&#23376;&#65292;&#21019;&#24314;&#21644;&#21021;&#22987;&#21270;ngx_devpoll_conf_t&#37197;&#32622;&#32467;&#26500;&#65292;&#36825;&#20010;&#32467;&#26500;&#21487;&#20197;&#36890;&#36807; cycle-&gt;conf_ctx[module.index]&#24341;&#29992;&#21040;&#65292;&#20063;&#23454;&#29616;&#20102;actions.add&#12289;actions.del&#12289; actions.enable&#12289;actions.disable&#12289;actions.process_events&#12289;actions.init&#12289; actions.done&#36825;&#20960;&#20010;&#20107;&#20214;&#22788;&#29702;&#38057;&#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_rtsig_module&#23454;&#29616;&#20102;&#37197;&#32622;&#25991;&#20214;events&#22495;&#30340;rtsig_&#21069;&#32512;&#30340;&#20960;&#20010; &#25351;&#20196;&#30340;&#35299;&#26512;&#38057;&#23376;&#65292;&#23454;&#29616;&#20102;&#27169;&#22359;&#19978;&#19979;&#25991;&#30340;create_conf&#21644;init_conf&#38057;&#23376;&#65292;&#21019;&#24314;&#21644;&#21021;&#22987;&#21270;ngx_rtsig_conf_t&#37197;&#32622;&#32467;&#26500;&#65292;&#36825;&#20010;&#32467;&#26500; &#21487;&#20197;&#36890;&#36807;cycle-&gt;conf_ctx[module.index]&#24341;&#29992;&#21040;&#65292;&#20063;&#23454;&#29616;&#20102;actions.add_conn&#12289; actions.del_conn&#12289;actions.process_events&#12289;actions.init&#12289;actions.done&#36825;&#20960;&#20010;&#20107;&#20214;&#22788;&#29702; &#38057;&#23376;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#38500;&#20102;ngx_event_core_module&#20043;&#22806;&#65292;&#20854;&#20313;&#30340;&#27169;&#22359;&#26159;&#26681;&#25454;&#20855;&#20307;&#30340;&#25805;&#20316;&#31995;&#32479;&#21644;IO&#27169;&#22411;&#23450;&#21046;&#30340;&#20107;&#20214;&#22788;&#29702;&#26426;&#21046;&#65292;&#22312;&#25903;&#25345;epoll&#30340;linux&#31995;&#32479;&#19978;&#65292;nginx&#40664;&#35748;&#20250;&#36873;&#25321;epoll&#27169;&#22359;&#12290;
    </p>
    <p>
      ========================
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389600380879" MODIFIED="1389600406222" TEXT="ngx_epoll_module_ctx">
<node CREATED="1390013633409" FOLDED="true" MODIFIED="1390013642320" TEXT="&#x7ed3;&#x6784;">
<node CREATED="1389600389330" MODIFIED="1389600400731">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_event_module_t&#160;&#160;ngx_epoll_module_ctx = {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&amp;epoll_name,
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_epoll_create_conf,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* create configuration */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_epoll_init_conf,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init configuration */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_add_event,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* add an event */&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_del_event,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* delete an event */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_add_event,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* enable an event */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_del_event,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* disable an event */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_add_connection,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* add an connection */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_del_connection,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* delete an connection */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* process the changes */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_process_events,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* process the events */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_init,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* init the events */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_done,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* done the events */
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390400530243" ID="ID_564489032" LINK="#ID_1076558626" MODIFIED="1390400550455" TEXT="ngx_event_action_t"/>
</node>
</node>
<node CREATED="1389595291407" LINK="#ID_1712714867" MODIFIED="1389603010441" TEXT="actions.init"/>
</node>
<node CREATED="1388928672641" FOLDED="true" MODIFIED="1389107626790" TEXT="ngx_mail_module_t">
<icon BUILTIN="full-3"/>
<node CREATED="1389071313931" MODIFIED="1389071331162">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typedef struct {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_mail_protocol_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*protocol;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*create_main_conf)(ngx_conf_t *cf);
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*init_main_conf)(ngx_conf_t *cf, void *conf);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*create_srv_conf)(ngx_conf_t *cf);
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*merge_srv_conf)(ngx_conf_t *cf, void *prev,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void *conf);
    </p>
    <p>
      } ngx_mail_module_t;&#65288;&#35265;src/mail/ngx_mail.h&#65289;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389098396486" FOLDED="true" MODIFIED="1390381532165" TEXT=" ngx_channel_t">
<icon BUILTIN="full-4"/>
<node CREATED="1389098399966" MODIFIED="1389098582120">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      
    </p>
    <p>
      typedef struct {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;command;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;ngx_pid_t&#160;&#160;&#160;pid;<font color="#ef0303">//pid&#26159;&#21457;&#36865;&#26041;&#36827;&#31243;&#30340;&#36827;&#31243;id&#65307;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;slot;<font color="#ef0303">//slot&#26159;&#21457;&#36865;&#26041;&#36827;&#31243;&#22312;&#36827;&#31243;&#34920;&#20013;&#20559;&#31227;&#20301;&#32622;&#65307;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;ngx_fd_t&#160;&#160;&#160;&#160;fd;<font color="#ef0303">//fd&#26159;&#21457;&#36865;&#32473;&#23545;&#26041;&#30340;&#21477;&#26564;&#12290;</font>
    </p>
    <p>
      }&#160;ngx_channel_t;(src/os/unix/ngx_channel.h)
    </p>
    <p>
      <font color="#ef0303">command&#26159;&#35201;&#21457;&#36865;&#30340;&#21629;&#20196;&#65292;&#26377;5&#31181;&#65306; </font>
    </p>
    <p>
      
    </p>
    <p>
      <font color="#ef0303">#define NGX_CMD_OPEN_CHANNEL&#160;&#160;&#160;1 </font>
    </p>
    <p>
      <font color="#ef0303">#define NGX_CMD_CLOSE_CHANNEL&#160;&#160;2 </font>
    </p>
    <p>
      <font color="#ef0303">#define NGX_CMD_QUIT&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3 </font>
    </p>
    <p>
      <font color="#ef0303">#define NGX_CMD_TERMINATE&#160;&#160;&#160;&#160;&#160;&#160;4 </font>
    </p>
    <p>
      <font color="#ef0303">#define NGX_CMD_REOPEN&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5 </font>
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1389104087091" FOLDED="true" MODIFIED="1389104095842" TEXT="&#x64cd;&#x4f5c;&#x51fd;&#x6570;">
<node CREATED="1389104099563" LINK="#ID_280816995" MODIFIED="1389104169798" TEXT="ngx_read_channel">
<node BACKGROUND_COLOR="#ffff00" CREATED="1389240535359" MODIFIED="1389240547187">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_read_channel
    </p>
    <p>
      &#26159;&#21033;&#29992;recvmsg&#23454;&#29616;&#65292;&#35814;&#32454;&#20171;&#32461;&#35265;&#12298;unix&#32593;&#32476;&#32534;&#31243;&#12299;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389104107483" LINK="#ID_1256679313" MODIFIED="1389107155638" TEXT="ngx_write_channel">
<node BACKGROUND_COLOR="#ffff00" CREATED="1389240502751" MODIFIED="1389240514427">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20989;&#25968;ngx_write_channel&#26159;&#21033;&#29992;sendmsg&#26469;&#23436;&#25104;&#65292;
    </p>
    <p>
      &#12298;Unix&#32593;&#32476;&#32534;&#31243;&#12299;&#21487;&#20197;&#35814;&#32454;&#20102;&#35299;sendmsg&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1389082295120" FOLDED="true" ID="ID_951469658" MODIFIED="1389107602567" TEXT="ngx_connection_s">
<icon BUILTIN="full-4"/>
<node CREATED="1389080693298" FOLDED="true" MODIFIED="1389098608813" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389082303128" MODIFIED="1391783092166">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct ngx_connection_s {
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*<font color="#f80b0b">data</font>; // next connection | ...
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*<font color="#f20909">read</font>; // &#35835;&#20107;&#20214;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*<font color="#fa0909">write</font>; // &#20889;&#20107;&#20214;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_socket_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fd; // &#36830;&#25509;&#22871;&#25509;&#21475;&#30340;&#22871;&#25509;&#21475;&#25551;&#36848;&#23383;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_recv_pt&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;recv;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_send_pt&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;send;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_recv_chain_pt&#160;&#160;&#160;recv_chain;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_send_chain_pt&#160;&#160;&#160;send_chain;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_listening_t&#160;&#160;&#160;&#160;*listening; // &#35813;&#36830;&#25509;&#23545;&#24212;&#30340;&#30417;&#21548;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;off_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sent;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*log;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_pool_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*pool;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct sockaddr&#160;&#160;&#160;&#160;*sockaddr;
    </p>
    <p>
      &#160;&#160;&#160;&#160;socklen_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;socklen;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;addr_text;
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_SSL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_ssl_connection_t&#160;&#160;*ssl;
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct sockaddr&#160;&#160;&#160;&#160;*local_sockaddr;
    </p>
    <p>
      &#160;&#160;&#160;&#160;socklen_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local_socklen;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_buf_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*buffer;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_atomic_uint_t&#160;&#160;&#160;number;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;requests;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;buffered:8;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log_error:3;&#160;&#160;&#160;&#160;&#160;/* ngx_connection_log_error_e */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;single_connection:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unexpected_eof:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timedout:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destroyed:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;idle:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;close:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sendfile:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sndlowat:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tcp_nodelay:2;&#160;&#160;&#160;/* ngx_connection_tcp_nodelay_e */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tcp_nopush:2;&#160;&#160;&#160;&#160;/* ngx_connection_tcp_nopush_e */
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1389080781400" FOLDED="true" MODIFIED="1389082557027" TEXT="&#x64cd;&#x4f5c;&#x51fd;&#x6570;">
<node CREATED="1389080684894" FOLDED="true" LINK="#ID_1606222132" MODIFIED="1389106817573" TEXT="ngx_get_connection">
<node CREATED="1389080728395" MODIFIED="1389082595243">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1&#12289;ngx_connection_t *ngx_get_connection(ngx_socket_t s, ngx_log_t *log);
    </p>
    <p>
      
    </p>
    <p>
      &#20174;cycle-&gt;connections&#38142;&#34920;&#20013;&#25688;&#21462;&#19968;&#20010;&#31354;&#38386;&#30340;&#36830;&#25509;&#32467;&#26500;&#21464;&#37327;&#24182;&#20462;&#25913;&#31354;&#38386;&#38142;&#65292;&#28982;&#21518;&#35774;&#32622;&#36830;&#25509;&#36164;&#28304;&#30340;&#35835;&#20889;&#20107;&#20214;&#30340;&#21021;&#22987;&#29366;&#24577;&#20449;&#24687;&#65307;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1389579213030" FOLDED="true" LINK="http://www.pagefault.info/?p=46" MODIFIED="1389579575947" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389579219454" MODIFIED="1389579557791">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#36825;&#37324;&#20107;&#20214;&#32467;&#26500;&#26377;&#20010;&#24456;&#20851;&#38190;&#30340;&#21464;&#37327;instance&#65292;&#23427;&#23601;&#26159;&#19968;&#20010;&#26631;&#35760;&#65292;&#29992;&#26469;&#26631;&#35760;&#20004;&#20010;&#36830;&#25509;&#30340;&#65292;&#22240;&#20026;nginx&#20013;&#21018;&#21018;&#37322;&#25918;&#30340;&#36830;&#25509;&#26377;&#21487;&#33021;&#20250;&#34987;&#39532;&#19978;&#20351;&#29992;&#30340;&#65292;&#22240;&#20026;free_connections&#23427;&#26159;&#19968;&#20010;&#31867;&#20284;&#19982;&#26632;&#30340;&#19996;&#35199;&#65292;&#20063;&#23601;&#26159;&#22312;&#24490;&#29615;&#20013;&#26377;&#21487;&#33021;&#20250;&#36935;&#21040;&#21018;&#37322;&#25918;&#30340;&#36830;&#25509;&#21448;&#34987;&#20351;&#29992;&#65288;fd&#30456;&#21516;)&#65292;&#32780;&#25105;&#20204;&#27492;&#26102;&#24182;&#19981;&#30693;&#36947;&#65292;&#22240;&#27492;&#36825;&#37324;&#36825;&#20010;instance&#23601;&#26159;&#29992;&#26469;&#21028;&#26029;&#36825;&#20010;&#30340;&#12290;
    </p>
    <p>
      ngx_connection_t *
    </p>
    <p>
      ngx_get_connection(ngx_socket_t s, ngx_log_t *log)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;instance;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;*rev, *wev;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_t&#160;&#160;*c;
    </p>
    <p>
      &#160;&#160;&#160;.........................................................
    </p>
    <p>
      //&#21487;&#20197;&#30475;&#21040;&#33719;&#21462;&#21040;&#30340;&#26159;&#26368;&#26032;&#34987;&#37322;&#25918;&#30340;&#36830;&#25509;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cycle-&gt;free_connections = c-&gt;data;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cycle-&gt;free_connection_n--;
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* ngx_mutex_unlock */
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_cycle-&gt;files) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_cycle-&gt;files[s] = c;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      //&#20445;&#23384;&#23545;&#24212;&#30340;event&#65292;&#36991;&#20813;&#20869;&#23384;&#20877;&#27425;&#20998;&#37197;
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev = c-&gt;read;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev = c-&gt;write;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_memzero(c, sizeof(ngx_connection_t));
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;read = rev;
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;write = wev;
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;fd = s;
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;log = log;
    </p>
    <p>
      //&#33719;&#21462;instance
    </p>
    <p>
      &#160;&#160;&#160;&#160;instance = rev-&gt;instance;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_memzero(rev, sizeof(ngx_event_t));
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_memzero(wev, sizeof(ngx_event_t));
    </p>
    <p>
      //&#36825;&#37324;&#21487;&#20197;&#30475;&#21040;&#23558;instance&#21435;&#21453;&#65292;&#29992;&#20197;&#21306;&#20998;&#26159;&#21542;&#26159;&#21018;&#25165;&#34987;&#37322;&#25918;&#30340;<font color="#fb0c0c">????????</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev-&gt;instance = !instance;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev-&gt;instance = !instance;
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev-&gt;index = NGX_INVALID_INDEX;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev-&gt;index = NGX_INVALID_INDEX;
    </p>
    <p>
      //data&#20013;&#20445;&#23384;&#36830;&#25509;
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev-&gt;data = c;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev-&gt;data = c;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev-&gt;write = 1;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return c;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1389080908949" FOLDED="true" LINK="#ID_280816995" MODIFIED="1389106919029" TEXT="ngx_close_connection">
<node CREATED="1389080787544" MODIFIED="1389082674982">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2&#12289;void ngx_close_connection(ngx_connection_t *c);
    </p>
    <p>
      
    </p>
    <p>
      &#20851;&#38381;&#36830;&#25509;&#65292;&#39318;&#20808;&#28165;&#29702;&#36830;&#25509;&#19978;&#30340;&#35835;&#20889;&#20107;&#20214;&#65292;&#36825;&#21487;&#33021;&#20250;&#21024;&#38500;&#23450;&#26102;&#22120;&#12289;&#21024;&#38500;&#31561;&#24453;&#20107;&#20214;&#65292;&#28982;&#21518;&#37322;&#25918;&#36830;&#25509;&#36164;&#28304;&#65292;&#24182;&#20851;&#38381;&#36830;&#25509;&#23545;&#24212;&#30340;&#22871;&#25509;&#21475;&#65307;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080858663" FOLDED="true" LINK="#ID_1606222132" MODIFIED="1389106828190" TEXT="ngx_free_connection">
<node CREATED="1389579213030" FOLDED="true" LINK="http://www.pagefault.info/?p=46" MODIFIED="1389579581915" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389579219454" MODIFIED="1389579260123">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#39318;&#20808;&#35201;&#30693;&#36947;&#22312;nginx&#20013;&#26159;&#23384;&#22312;&#19968;&#20010;&#36830;&#25509;&#27744;&#30340;&#65292;&#25152;&#26377;&#30340;&#36830;&#25509;&#30340;&#33719;&#21462;&#21644;&#37322;&#25918;&#37117;&#26159;&#36890;&#36807;&#36830;&#25509;&#27744;&#26469;&#36827;&#34892;&#30340;&#65292;nginx&#20013;&#36830;&#25509;&#27744;&#24456;&#31616;&#21333;&#65292;&#23601;&#26159;&#19968;&#20010;&#31616;&#21333;&#30340;&#25968;&#32452;&#65292;&#26377;&#19968;&#20010;free_connections&#21464;&#37327;&#20445;&#23384;&#20102;&#25152;&#26377;&#21487;&#20197;&#20351;&#29992;&#30340;&#36830;&#25509;&#65292;&#23427;&#26159;&#19968;&#20010;&#38142;&#34920;&#65292;&#23427;&#30340;&#26500;&#36896;&#26159;&#36825;&#26679;&#23376;&#30340;&#65292;&#27599;&#20010;&#36830;&#25509;&#37117;&#26377;&#19968;&#20010;&#22495;data&#65292;&#22914;&#26524;&#37322;&#25918;&#19968;&#20010;&#36830;&#25509;&#65292;&#21017;&#36825;&#20010;&#36830;&#25509;&#30340;data&#23601;&#25351;&#21521;&#24403;&#21069;&#30340;free_connects,&#28982;&#21518;&#24403;&#21069;&#30340;&#37322;&#25918;&#30340;&#36830;&#25509;&#30452;&#25509;&#25351;&#21521;free_connections,&#20063;&#23601;&#26159;&#19968;&#20010;&#23558;&#36830;&#25509;&#21152;&#20837;free&#38142;&#34920;&#30340; &#21160;&#20316;&#12290;
    </p>
    <p>
      void
    </p>
    <p>
      ngx_free_connection(ngx_connection_t *c)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* ngx_mutex_lock */
    </p>
    <p>
      //&#20445;&#23384;&#24403;&#21069;&#30340;free_connections.
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;data = ngx_cycle-&gt;free_connections;
    </p>
    <p>
      //&#23558;&#37322;&#25918;&#30340;&#36830;&#25509;&#21152;&#20837;&#21040;free connections
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cycle-&gt;free_connections = c;
    </p>
    <p>
      //&#21487;&#29992;&#36830;&#25509;&#25968;&#21152;1
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cycle-&gt;free_connection_n++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* ngx_mutex_unlock */
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_cycle-&gt;files) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_cycle-&gt;files[c-&gt;fd] = NULL;
    </p>
    <p>
      &#160;}
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1390381641183" LINK="#ID_1606222132" MODIFIED="1391782026228" TEXT="&#x521d;&#x59cb;&#x5316;1"/>
<node CREATED="1390381641183" LINK="#ID_579592898" MODIFIED="1391782093003" TEXT="&#x521d;&#x59cb;&#x5316;2"/>
</node>
<node CREATED="1389077677218" FOLDED="true" MODIFIED="1389107602567" TEXT="ngx_listening_s">
<icon BUILTIN="full-4"/>
<node CREATED="1389080693298" FOLDED="true" MODIFIED="1389098616925" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389077685514" MODIFIED="1389077702504">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct ngx_listening_s {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_socket_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fd; // &#30417;&#21548;&#22871;&#25509;&#21475;&#30340;&#22871;&#25509;&#23383;&#25551;&#36848;&#31526;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct sockaddr&#160;&#160;&#160;&#160;*sockaddr; // &#30417;&#21548;&#22871;&#25509;&#21475;&#22320;&#22336;&#32467;&#26500;
    </p>
    <p>
      &#160;&#160;&#160;&#160;socklen_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;socklen;&#160;&#160;&#160;&#160;/* size of sockaddr */
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;addr_text_max_len;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;addr_text;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;int&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type; // SOCK_STREAM
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;int&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backlog; // listen backlog
    </p>
    <p>
      &#160;&#160;&#160;&#160;int&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rcvbuf; // &#30417;&#21548;&#22871;&#25509;&#21475;&#30340;&#25509;&#25910;&#32531;&#20914;&#21306;&#38271;&#24230;
    </p>
    <p>
      &#160;&#160;&#160;&#160;int&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sndbuf; // &#30417;&#21548;&#22871;&#25509;&#21475;&#30340;&#21457;&#36865;&#32531;&#20914;&#21306;&#38271;&#24230;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* handler of accepted connection */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_handler_pt&#160;&#160;&#160;handler;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*servers;&#160;&#160;/* array of ngx_http_in_addr_t, for example */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*logp;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pool_size;
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* should be here because of the AcceptEx() preread */
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;post_accept_buffer_size;
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* should be here because of the deferred accept */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;post_accept_timeout;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_listening_t&#160;&#160;&#160;&#160;*previous;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_t&#160;&#160;&#160;*connection; // &#30417;&#21548;&#20063;&#26159;&#19968;&#20010;&#36830;&#25509;&#65292;&#35201;&#20998;&#37197;&#32473;&#30417;&#21548;&#19968;&#20010;&#36830;&#25509;&#36164;&#28304;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;open:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;remain:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ignore:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bound:1;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* already bound */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;inherited:1;&#160;&#160;&#160;/* inherited from previous process */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nonblocking_accept:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;listen:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nonblocking:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;shared:1;&#160;&#160;&#160;&#160;/* shared between threads or processes */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;addr_ntop:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080781400" MODIFIED="1389082420027" TEXT="&#x64cd;&#x4f5c;&#x51fd;&#x6570;">
<node CREATED="1389080684894" FOLDED="true" LINK="#ID_1693925617" MODIFIED="1389081059845" TEXT="ngx_set_inherited_sockets">
<node CREATED="1389080728395" MODIFIED="1389080775776">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1&#12289;ngx_int_t ngx_set_inherited_sockets(ngx_cycle_t *cycle);
    </p>
    <p>
      
    </p>
    <p>
      nginx &#21551;&#21160;&#30340;&#26102;&#20505;&#20250;&#23581;&#35797;&#20174;&#29615;&#22659;&#21464;&#37327;&#20013;&#35835;&#21462;&#21069;&#27425;&#25191;&#34892;&#26102;&#20505;&#30340;&#30417;&#21548;&#22871;&#25509;&#21475;&#30340;id&#65292;&#24182;&#20250;&#21019;&#24314;&#23545;&#24212;&#25968;&#37327;&#30340;ngx_listening_t&#32467;&#26500;&#21464;&#37327;&#65288;&#23384;&#20110; cycle-&gt;listening&#25968;&#32452;&#20013;&#65289;&#65292;&#28982;&#21518;&#35843;&#29992;&#36825;&#20010;&#25509;&#21475;&#36890;&#36807;getsockname,getsockopt&#31561;&#31995;&#32479;&#35843;&#29992;&#25226;&#21407;&#26469;&#22871;&#25509;&#21475;&#30340;&#23646;&#24615;&#20449;&#24687; &#21644;&#35774;&#32622;&#21442;&#25968;&#35835;&#21462;&#20986;&#26469;&#21435;&#35774;&#32622;&#37027;&#20123;&#26032;&#21019;&#24314;&#30340;ngx_listening_t&#32467;&#26500;&#21464;&#37327;&#65292;&#36825;&#26679;&#23601;&#32487;&#25215;&#20102;&#21069;&#27425;&#25191;&#34892;&#26102;&#20505;&#30340;&#30417;&#21548;&#22871;&#25509;&#21475;&#20102;&#65292;&#36825;&#20010;&#25509;&#21475;&#26159;&#22312; ngx_init_cycle&#20043;&#21069;&#35843;&#29992;&#30340;&#65307;
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080908949" FOLDED="true" ID="ID_866878198" LINK="#ID_1397106292" MODIFIED="1389081821886" TEXT="ngx_create_listening">
<node CREATED="1389080787544" MODIFIED="1389080804951">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2&#12289;ngx_listening_t *ngx_create_listening(ngx_conf_t *cf, void *sockaddr,
    </p>
    <p>
      &#160;&#160;&#160;&#160;socklen_t socklen);
    </p>
    <p>
      
    </p>
    <p>
      &#21019; &#24314;&#19968;&#20010;ngx_listening_t&#32467;&#26500;&#65292;&#36825;&#20010;&#20989;&#25968;&#22312;ngx_init_cycle&#35299;&#26512;http&#30340;server&#37197;&#32622;&#39033;&#30340;&#26102;&#20505;&#20250;&#35843;&#29992;&#65292;&#23427;&#21019;&#24314;&#19968;&#20010; ngx_listening_t&#32467;&#26500;&#21464;&#37327;&#65288;&#23384;&#20110;cycle-&gt;listening&#25968;&#32452;&#20013;&#65289;&#65292;&#24182;&#35774;&#32622;&#20854;&#22320;&#22336;&#21644;&#19968;&#20123;&#22522;&#26412;&#30340;&#20449;&#24687;&#65292;&#27604;&#22914;backlog&#31561;&#65307;
    </p>
    <p>
      &#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080858663" FOLDED="true" LINK="#ID_429337595" MODIFIED="1389081154663" TEXT="ngx_open_listening_sockets">
<node CREATED="1389080811624" MODIFIED="1389080832403">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      
    </p>
    <p>
      3&#12289;ngx_int_t ngx_open_listening_sockets(ngx_cycle_t *cycle);
    </p>
    <p>
      
    </p>
    <p>
      ngx_init_cycle &#22312;&#35299;&#26512;&#23436;&#37197;&#32622;&#25991;&#20214;&#20043;&#21518;&#65292;&#20250;&#35843;&#29992;&#36825;&#20010;&#25509;&#21475;&#25171;&#24320;cycle-&gt;listening&#25968;&#32452;&#20013;&#30340;&#25152;&#26377;&#30417;&#21548;&#22871;&#25509;&#21475;&#65292;&#20854;&#23454;&#23601;&#26159;&#39034;&#24207;&#35843;&#29992;socket&#12289; setsockopt&#12289;bind&#12289;listen&#20960;&#20010;&#31995;&#32479;&#35843;&#29992;&#65292;&#22914;&#26524;&#20107;&#20214;&#39537;&#21160;&#19981;&#26159;&#21033;&#29992;&#24322;&#27493;IO&#27169;&#22411;&#65292;&#36824;&#20250;&#25226;&#36825;&#20123;&#30417;&#21548;&#22871;&#25509;&#21475;&#35774;&#32622;&#20026;&#38750;&#38459;&#22622;&#26041;&#24335;&#65307;
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080861998" FOLDED="true" LINK="#ID_1158710083" MODIFIED="1389081719061" TEXT="ngx_configure_listening_sockets">
<node CREATED="1389080814871" MODIFIED="1389080842922">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      
    </p>
    <p>
      4&#12289;void ngx_configure_listening_sockets(ngx_cycle_t *cycle);
    </p>
    <p>
      
    </p>
    <p>
      ngx_init_cycle&#20013;&#32039;&#25509;&#30528;ngx_open_listening_sockets&#25509;&#21475;&#20043;&#21518;&#35843;&#29992;&#36825;&#20010;&#25509;&#21475;&#21033;&#29992;setsockopt&#31995;&#32479;&#35843;&#29992;&#37197;&#32622;&#36825;&#20123;&#30417;&#21548;&#22871;&#25509;&#21475;&#65307;
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080864942" FOLDED="true" LINK="#ID_929255851" MODIFIED="1389082421847" TEXT="ngx_close_listening_sockets">
<node CREATED="1389080818378" MODIFIED="1389080850236">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      
    </p>
    <p>
      5&#12289;void ngx_close_listening_sockets(ngx_cycle_t *cycle);
    </p>
    <p>
      
    </p>
    <p>
      &#19978;&#38754;&#30340;&#20960;&#20010;&#25509;&#21475;&#37117;&#26159;&#22312;master&#36827;&#31243;&#35843;&#29992;&#30340;&#65292;&#32780;worker&#36827;&#31243;&#20250;&#32487;&#25215;master&#20013;&#35774;&#32622;&#22909;&#30340;&#36825;&#20123;&#30417;&#21548;&#22871;&#25509;&#21475;&#65292;&#24403;worker&#36827;&#31243;&#36864;&#20986;&#30340;&#26102;&#20505;&#65292;&#20250;&#35843;&#29992;&#36825;&#20010;&#25509;&#21475;&#20851;&#38381;&#30417;&#21548;&#22871;&#25509;&#21475;&#65292;&#20851;&#38381;&#20043;&#21069;&#20250;&#21024;&#38500;&#19982;&#20854;&#20851;&#32852;&#30340;&#36830;&#25509;&#19978;&#30340;&#35835;&#20107;&#20214;&#24182;&#37322;&#25918;&#36825;&#20010;&#36830;&#25509;&#36164;&#28304;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1388928654001" FOLDED="true" MODIFIED="1390381536512" TEXT="ngx_event_conf_t">
<icon BUILTIN="full-4"/>
<node CREATED="1389146454989" FOLDED="true" MODIFIED="1389146530362" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389071198024" MODIFIED="1389600236116">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typedef struct {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;connections;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;use;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;multi_accept;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;accept_mutex;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;&#160;&#160;accept_mutex_delay;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_char&#160;&#160;&#160;&#160;&#160;&#160;&#160;*name;
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_DEBUG)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;&#160;debug_connection;
    </p>
    <p>
      #endif
    </p>
    <p>
      } ngx_event_conf_t;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1389082295120" FOLDED="true" MODIFIED="1390381539909" TEXT="ngx_event_s">
<icon BUILTIN="full-4"/>
<node CREATED="1389080693298" MODIFIED="1390015861014" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389082303128" MODIFIED="1390015873119">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;* ngx_event_t&#12288;&#12288;&#12288; : &#20107;&#20214;&#32467;&#26500;&#20307;&#65292;&#26377;&#20010;&#37325;&#35201;&#30340;&#20989;&#25968;&#25351;&#38024;handler&#65292;fd&#20107;&#20214;&#34987;&#39537;&#21160;&#26102;&#65292;&#23558;&#35843;&#29992;&#36825;&#20010;&#20989;&#25968;&#12290;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#23427;&#26377;&#20960;&#20010;&#37325;&#35201;&#25104;&#21592;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timer_set&#160;&#160;: &#27599;&#20010;event&#22312;epoll_wait&#21069;&#65292;&#35201;&#20808;&#36827;&#20837;&#23450;&#26102;&#22120;&#32418;&#40657;&#26641;&#65292;&#36825;&#20010;&#26631;&#35760;&#23601;&#26159;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#26631;&#35760;&#26159;&#21542;&#22312;&#23450;&#26102;&#22120;&#37324;&#65292; &#36229;&#26102;&#22788;&#29702;&#29992;&#30340;.
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;active&#160;&#160;&#160;&#160;&#160;&#160;&#160;: &#24403;ngx_add_event&#37324;(&#28155;&#21152;&#25110;&#26356;&#26032;&#20107;&#20214;) &#36827;&#20837;epoll&#26102;&#65292;&#20250;&#32622;&#20026;1.
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ready&#160;&#160;&#160;&#160;&#160;&#160;&#160;: &#36827;&#20837;&#20107;&#20214;&#38431;&#21015;&#37324;&#65292;&#23558;&#32622;&#20026;1&#65292;&#21482;&#26377;&#20026;&#65297;&#65292;&#23427;&#23545;&#24212;&#30340;socket fd&#25165;&#21487;&#20197;&#35835;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timedout&#160;&#160;&#160;: &#27492;&#20107;&#20214;&#23545;&#24212;&#30340;socket fd&#23558;&#35270;&#20026;&#36229;&#26102;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080693298" FOLDED="true" LINK="#ID_280816995" MODIFIED="1389105613298" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389082303128" MODIFIED="1390379205913">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20107;&#20214;&#32467;&#26500;&#20307;&#21253;&#21547;&#20102;&#23545;&#24212;&#30340;&#36830;&#25509;&#36164;&#28304;&#12289;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#21644;&#33509;&#24178;&#20107;&#20214;&#29366;&#24577;&#26631;&#24535;&#20301;&#31561;&#25104;&#21592;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      struct ngx_event_s {
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*<font color="#fa0909">data; // ngx_conncection_t | </font>...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#eb0404">accept</font>:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* used to detect the stale events in kqueue, rtsig, and epoll */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;instance:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/*
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* the event was passed or would be passed to a kernel;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* in aio mode - operation was posted.
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;active:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;disabled:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* the ready event; in aio mode 0 means that no operation can be posted */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ready:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oneshot:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* aio operation is complete */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;complete:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;eof:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#fa0505">timedout</font>:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timer_set:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delayed:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;read_discarded:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unexpected_eof:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;deferred_accept:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* the pending eof reported by kqueue or in aio chain operation */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pending_eof:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_HAVE_KQUEUE) || (NGX_HAVE_IOCP)
    </p>
    <p>
      &#160;&#160;&#160;&#160;int&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;available;
    </p>
    <p>
      #else
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;available:1;
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_handler_pt&#160;<font color="#ef0808">&#160;handler</font>;123 126 33.253
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;index;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#f90a0a">ngx_log_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;*log;</font>
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_rbtree_node_t&#160;&#160;&#160;timer;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;closed:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* to test on worker exit */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;channel:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;resolver:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* the links of the posted queue */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;*next;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;**prev;
    </p>
    <p>
      &#160;&#160;&#160;&#160;...
    </p>
    <p>
      }
    </p>
    <p>
      &#20851;&#20110;&#20107;&#20214;&#30340;&#20960;&#20010;&#25805;&#20316;&#25509;&#21475;&#23601;&#26159;&#21069;&#38754;&#21453;&#22797;&#25552;&#21040;&#36807;&#30340;10&#20010;actions&#38057;&#23376;&#65292;&#36825;&#20123;&#38057;&#23376;&#23553;&#35013;&#20102;&#19968;&#22871;&#20107;&#20214;&#39537;&#21160;&#30340;&#25509;&#21475;&#65292;&#19981;&#21516;&#30340;IO&#27169;&#22411;&#19981;&#21516;&#30340;&#23454;&#29616;&#26041;&#24335;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080781400" FOLDED="true" MODIFIED="1389103767538" TEXT="epoll&#x64cd;&#x4f5c;&#x51fd;&#x6570;">
<node CREATED="1389080781400" FOLDED="true" LINK="#ID_435219623" MODIFIED="1389591955116" TEXT="ngx_epoll_init">
<node CREATED="1389080728395" MODIFIED="1389083591770">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1&#12289;static ngx_int_t ngx_epoll_init(ngx_cycle_t *cycle, ngx_msec_t timer);
    </p>
    <p>
      
    </p>
    <p>
      init&#38057;&#23376;&#65292;&#21019;&#24314;&#19968;&#20010;epoll&#21477;&#26564;ep&#65292;&#25351;&#23450;&#22312;&#20854;&#19978;&#30340;&#30417;&#25511;&#22871;&#25509;&#23383;&#25968;&#37327;&#20026;&#27599;&#20010;worker&#26368;&#22823;&#36830;&#25509;&#25968;&#30340;&#19968;&#21322;&#65292;&#24182;&#20998;&#37197;&#36275;&#22815;&#30340;epoll_event&#32467;&#26500;&#25968;&#32452;event_list&#29992;&#20110;&#19982;&#20869;&#26680;&#38388;&#20256;&#36882;&#20107;&#20214;&#65292;&#25968;&#37327;nevents&#21487;&#20197;&#37197;&#32622;&#25991;&#20214;&#25351;&#23450;&#65292;&#40664;&#35748;&#20026;512&#65307;
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080781400" FOLDED="true" MODIFIED="1389083831186" TEXT=" ngx_epoll_done">
<node CREATED="1389080728395" MODIFIED="1389083532013">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2&#12289;static void ngx_epoll_done(ngx_cycle_t *cycle);
    </p>
    <p>
      
    </p>
    <p>
      done&#38057;&#23376;&#65292;&#37322;&#25918;epoll&#21477;&#26564;&#36164;&#28304;&#21644;event_list&#65307;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080781400" FOLDED="true" MODIFIED="1389084395082" TEXT="ngx_epoll_add_event">
<node CREATED="1389080728395" MODIFIED="1389083501114">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      3&#12289;static ngx_int_t ngx_epoll_add_event(ngx_event_t *ev, ngx_int_t event,
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t flags);
    </p>
    <p>
      
    </p>
    <p>
      add &#21644;enable&#38057;&#23376;&#65292;&#35843;&#29992;epoll_ctl(ep, EPOLL_CTL_MOD/EPOLL_CTL_ADD, c-&gt;fd, &amp;ee)&#28155;&#21152;&#23545;&#36830;&#25509;&#22871;&#25509;&#21475;&#30340;&#35835;&#20107;&#20214;&#25110;&#32773;&#20889;&#20107;&#20214;&#30417;&#25511;&#65292;&#24182;&#19988;&#35774;&#32622;&#20107;&#20214;&#30340;&#29366;&#24577;&#20301;&#65306;ev-&gt;action = 1&#65292;&#24403;&#28155;&#21152;&#35835;&#20107;&#20214;&#30340;&#26102;&#20505;&#20250;&#21028;&#26029;&#20889;&#20107;&#20214;&#26159;&#21542;&#24050;&#32463;&#35774;&#32622;&#65288;wev-&gt;action=1?&#65289;&#65292;&#20174;&#32780;&#20915;&#23450;op&#26159;&#21542;&#20351;&#29992;EPOLL_CTL_MOD&#65292;&#28155;&#21152;&#20889;&#20107;&#20214; &#20063;&#35201;&#21028;&#26029;&#35835;&#20107;&#20214;&#30340;&#29366;&#24577;&#65307;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1389579213030" LINK="http://www.pagefault.info/?p=46" MODIFIED="1389579581915" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389579219454" MODIFIED="1389579847878">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#36825;&#20010;&#20989;&#25968;&#23601;&#26159;&#21152;&#20107;&#20214;&#21040;epoll&#20013;&#12290;&#28982;&#21518;&#35774;&#32622;&#23545;&#24212;&#30340;epoll data
    </p>
    <p>
      static ngx_int_t
    </p>
    <p>
      ngx_epoll_add_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;int&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;op;
    </p>
    <p>
      &#160;&#160;&#160;&#160;uint32_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;events, prev;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*e;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_t&#160;&#160;&#160;&#160;*c;
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct epoll_event&#160;&#160;&#160;ee;
    </p>
    <p>
      ............................................
    </p>
    <p>
      &#160;&#160;&#160;&#160;ee.events = events | (uint32_t) flags;
    </p>
    <p>
      //&#26368;&#20851;&#38190;&#30340;&#19968;&#37096;&#20998;&#65292;&#21487;&#20197;&#30475;&#21040;&#35774;&#32622;connect &#25351;&#38024;&#30340;&#26368;&#21518;&#19968;&#20301;&#20026;ev-&gt;instance.
    </p>
    <p>
      &#160;&#160;&#160;&#160;ee.data.ptr = (void *) ((uintptr_t) c | ev-&gt;instance);
    </p>
    <p>
      ............................
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1389080781400" FOLDED="true" MODIFIED="1389084395859" TEXT="ngx_epoll_del_event">
<node CREATED="1389080728395" MODIFIED="1389083477414">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      4&#12289;static ngx_int_t ngx_epoll_del_event(ngx_event_t *ev, ngx_int_t event,
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t flags);
    </p>
    <p>
      
    </p>
    <p>
      del &#21644;disable&#38057;&#23376;&#65292;&#35843;&#29992;epoll_ctl(ep, EPOLL_CTL_MOD/EPOLL_CTL_DEL, c-&gt;fd, &amp;ee)&#21024;&#38500;&#23545;&#36830;&#25509;&#22871;&#25509;&#21475;&#30340;&#35835;&#20107;&#20214;&#25110;&#32773;&#20889;&#20107;&#20214;&#30340;&#30417;&#25511;&#65292;&#24182;&#19988;&#35774;&#32622;&#20107;&#20214;&#30340;&#29366;&#24577;&#20301;&#65306;ev-&gt;action = 0&#65292;&#24403;&#21024;&#38500;&#35835;&#20107;&#20214;&#30340;&#26102;&#20505;&#20250;&#21028;&#26029;&#20889;&#20107;&#20214;&#26159;&#21542;&#24050;&#32463;&#35774;&#32622;&#65288;wev-&gt;action=1?&#65289;&#65292;&#20174;&#32780;&#20915;&#23450;op&#26159;&#21542;&#20351;&#29992;EPOLL_CTL_MOD&#65292;&#21024;&#38500;&#20889;&#20107;&#20214; &#20063;&#35201;&#21028;&#26029;&#35835;&#20107;&#20214;&#30340;&#29366;&#24577;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389080781400" FOLDED="true" MODIFIED="1389084397075" TEXT="ngx_epoll_add_connection">
<node CREATED="1389080728395" MODIFIED="1389083268383">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      5&#12289;static ngx_int_t ngx_epoll_add_connection(ngx_connection_t *c);
    </p>
    <p>
      
    </p>
    <p>
      add_conn&#38057;&#23376;&#65292;&#35843;&#29992;epoll_ctl(ep, EPOLL_CTL_ADD, c-&gt;fd, &amp;ee)&#21516;&#26102;&#28155;&#21152;&#23545;&#19968;&#26465;&#36830;&#25509;&#30340;&#35835;&#20889;&#20107;&#20214;&#30340;&#30417;&#25511;&#65292;&#24182;&#35774;&#32622;&#20854;&#35835;&#20889;&#20107;&#20214;&#30340;&#29366;&#24577;active = 1&#65307;
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1389579213030" FOLDED="true" LINK="http://www.pagefault.info/?p=46" MODIFIED="1389579581915" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389579219454" MODIFIED="1389580125988">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_epoll_add_connection(ngx_connection_t *c)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct epoll_event&#160;&#160;ee;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ee.events = EPOLLIN|EPOLLOUT|EPOLLET;
    </p>
    <p>
      //&#21516;&#26679;&#26159;&#23558;&#36830;&#25509;&#30340;read&#20107;&#20214;&#30340;instance&#26631;&#35760;&#21152;&#21040;&#25351;&#38024;&#30340;&#26411;&#23614;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ee.data.ptr = (void *) ((uintptr_t) c | c-&gt;read-&gt;instance);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_debug2(NGX_LOG_DEBUG_EVENT, c-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;epoll add connection: fd:%d ev:%08XD&quot;, c-&gt;fd, ee.events);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (epoll_ctl(ep, EPOLL_CTL_ADD, c-&gt;fd, &amp;ee) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;epoll_ctl(EPOLL_CTL_ADD, %d) failed&quot;, c-&gt;fd);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;read-&gt;active = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;write-&gt;active = 1;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1389083333281" FOLDED="true" MODIFIED="1389084397858" TEXT="ngx_epoll_del_connection">
<node CREATED="1389080811624" MODIFIED="1389083095381">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      6&#12289;static ngx_int_t ngx_epoll_del_connection(ngx_connection_t *c,
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t flags);
    </p>
    <p>
      
    </p>
    <p>
      del_conn&#38057;&#23376;&#65292;&#35843;&#29992;epoll_ctl(ep, EPOLL_CTL_DEL, c-&gt;fd, &amp;ee)&#21516;&#26102;&#21024;&#38500;&#23545;&#19968;&#26465;&#36830;&#25509;&#30340;&#35835;&#20889;&#20107;&#20214;&#30340;&#30417;&#25511;&#65292;&#24182;&#35774;&#32622;&#20854;&#35835;&#20889;&#20107;&#20214;&#30340;&#29366;&#24577;active = 0&#65307;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389083356719" FOLDED="true" MODIFIED="1389084398655" TEXT="ngx_epoll_process_events">
<node CREATED="1389080787544" MODIFIED="1389082962080">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      7&#12289;static ngx_int_t ngx_epoll_process_events(ngx_cycle_t *cycle, ngx_msec_t timer,
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t flags);
    </p>
    <p>
      
    </p>
    <p>
      process_events &#38057;&#23376;&#65292;&#35843;&#29992;events = epoll_wait(ep, event_list, (int) nevents, timer)&#36718;&#35810;&#20107;&#20214;&#65292;&#36229;&#26102;&#20540;&#20026;timer&#65292;&#20107;&#20214;&#23384;&#25918;&#20110;event_list&#25968;&#32452;&#20013;&#65292;&#26368;&#22823;&#25968;&#37327;&#20026;nevents&#12290;&#23545;&#20110;&#21457;&#29983;&#30340;&#35835;&#20107;&#20214;&#65292;&#33509;flags&#20013;&#32622;&#20301;&#20102; NGX_POST_EVENTS&#65292;&#20877;&#26681;&#25454;&#34987;&#30417;&#25511;&#30340;&#22871;&#25509;&#21475;&#26159;&#30417;&#21548;&#22871;&#25509;&#21475;&#36824;&#26159;&#25968;&#25454;&#22871;&#25509;&#21475;&#20915;&#23450;&#26242;&#26102;&#25237;&#36882;&#21040;&#20107;&#20214;&#38431;&#21015; ngx_posted_accept_events&#36824;&#26159;ngx_posted_events&#31561;&#24453;&#36827;&#31243;&#22788;&#29702;&#65292;&#21542;&#21017;&#23601;&#30452;&#25509;&#35843;&#29992;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968; rev-&gt;handler&#22788;&#29702;&#20107;&#20214;&#65307;&#23545;&#20110;&#21457;&#29983;&#30340;&#20889;&#20107;&#20214;&#65292;&#33509;flags&#32622;&#20301;&#20102;NGX_POST_EVENTS&#65292;&#25237;&#36882;&#21040;&#20107;&#20214;&#38431;&#21015; ngx_posted_events&#31561;&#24453;&#22788;&#29702;&#65292;&#21542;&#21017;&#23601;&#30452;&#25509;&#35843;&#29992;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;wev-&gt;handler&#22788;&#29702;&#20107;&#20214;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1389579213030" FOLDED="true" LINK="http://www.pagefault.info/?p=46" MODIFIED="1389579581915" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389579219454" MODIFIED="1389580140151">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_int_t
    </p>
    <p>
      ngx_epoll_process_events(ngx_cycle_t *cycle, ngx_msec_t timer, ngx_uint_t flags)
    </p>
    <p>
      {
    </p>
    <p>
      ...............................................
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; i &lt; events; i++) {&#160;&#160;
    </p>
    <p>
      //&#20808;&#20174;epoll&#28155;&#21152;&#20107;&#20214;&#26102;&#20256;&#36882;&#30340;&#25968;&#25454;&#20013;&#21462;&#20986;connect&#30340;&#22320;&#22336;&#12290;&#160;&#160;
    </p>
    <p>
      &#160;c = event_list[i].data.ptr;
    </p>
    <p>
      &#160;//&#28982;&#21518;&#21462;&#20986;&#26469;&#23545;&#24212;&#30340;instance&#20540;
    </p>
    <p>
      instance = (uintptr_t) c &amp; 1;
    </p>
    <p>
      //&#28982;&#21518;&#21462;&#20986;&#26469;&#23545;&#24212;&#30340;connect&#25351;&#38024;(&#30001;&#20110;&#22312;&#28155;&#21152;&#26159;&#35774;&#32622;&#20102;&#26368;&#21518;&#19968;&#20301;&#25351;&#38024;&#65292;&#22240;&#27492;&#36825;&#37324;&#38656;&#35201;&#23631;&#34109;&#25481;&#26368;&#21518;&#19968;&#20301;).&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;c = (ngx_connection_t *) ((uintptr_t) c &amp; (uintptr_t) ~1);&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;rev = c-&gt;read;
    </p>
    <p>
      //&#28982;&#21518;&#22914;&#26524;c-fd&#20026;&#65293;1&#21017;&#35828;&#26126;fd&#34987;&#20851;&#38381;&#65292;&#22914;&#26524;rev-&gt;instance != instance&#21017;&#34920;&#31034;&#24403;&#21069;&#30340;fd&#24050;&#32463;&#34987;&#37325;&#26032;&#20351;&#29992;&#36807;&#20102;&#65292;&#20063;&#23601;&#26159;&#35828;&#36825;&#20010;event&#24050;&#32463;&#26159;stale&#30340;&#20102;&#65292;&#25152;&#20197;&#36339;&#36807;&#36825;&#20010;&#20107;&#20214;&#65292;&#28982;&#21518;&#36827;&#34892;&#19979;&#19968;&#20010;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (c-&gt;fd == -1 || rev-&gt;instance != instance) {
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* the stale event from a file descriptor
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* that was just closed in this iteration
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;epoll: stale event %p&quot;, c);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      ........................................
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1389579959520" MODIFIED="1389579967041" TEXT="epoll_event">
<node CREATED="1389579992231" FOLDED="true" MODIFIED="1389580000420" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389580009103" MODIFIED="1389580026912">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typedef union epoll_data {
    </p>
    <p>
      //&#20445;&#23384;&#36830;&#25509;&#25351;&#38024;&#30340;&#32452;&#21512;
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*ptr;
    </p>
    <p>
      //&#21477;&#26564;
    </p>
    <p>
      &#160;&#160;&#160;&#160;int&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fd;
    </p>
    <p>
      &#160;&#160;&#160;&#160;uint32_t&#160;&#160;&#160;&#160;&#160;&#160;u32;
    </p>
    <p>
      &#160;&#160;&#160;&#160;uint64_t&#160;&#160;&#160;&#160;&#160;&#160;u64;
    </p>
    <p>
      } epoll_data_t;
    </p>
    <p>
      struct epoll_event {
    </p>
    <p>
      &#160;&#160;&#160;&#160;uint32_t&#160;&#160;&#160;&#160;&#160;&#160;events;
    </p>
    <p>
      &#160;&#160;&#160;&#160;epoll_data_t&#160;&#160;data;
    </p>
    <p>
      };
    </p>
    <p>
      epoll_event&#26159;&#27599;&#20010;epoll&#20107;&#20214;&#37117;&#20250;&#26377;&#19968;&#20010;&#36825;&#26679;&#30340;&#32467;&#26500;&#65292;&#23427;&#21253;&#21547;&#20102;epoll_data,&#23427;&#20445;&#23384;&#20102;&#30456;&#20851;&#30340;&#25968;&#25454;&#65292;&#20854;&#20013;&#25105;&#20204;&#20851;&#27880;epoll_data,&#23427;&#26377;&#19968;&#20010;&#22495;ptr&#26159;&#25105;&#20204;&#38656;&#35201;&#20851;&#27880;&#30340;&#65292;&#23427;&#20445;&#23384;&#20102;&#24403;&#21069;&#20107;&#20214;&#27880;&#20876;&#30340;&#36830;&#25509;&#12290;&#20854;&#23454;&#20005;&#26684;&#26469;&#35828;&#36825;&#20010;&#25351;&#38024;&#20445;&#23384;&#30340;&#26159;&#24403;&#21069;&#20107;&#20214;&#30340;&#36830;&#25509;&#25351;&#38024;&#30340;&#21644;&#20107;&#20214;instance&#22495;&#30340;&#19968;&#20010;&#32452;&#21512;&#20540;&#65292;&#36825;&#26159;&#22240;&#20026;&#23545;&#20110;&#22823;&#37096;&#20998;&#24179;&#21488;&#26469;&#35828;&#25351;&#38024;&#30001;&#20110;&#20250;&#23545;&#40784;&#65292;&#22240;&#27492;&#26368;&#21518;&#20960;&#20301;&#37117;&#26159;0(&#20063;&#23601;&#26159;&#19981;&#20351;&#29992;&#30340;)&#65292;&#22240;&#27492;nginx&#23601;&#21033;&#29992;&#21040;&#36830;&#25509;&#25351;&#38024;&#30340;&#26368;&#21518;&#19968;&#20301;&#26469;&#20445;&#23384;&#20107;&#20214;&#30340;instance&#22495;.
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1389105695555" FOLDED="true" ID="ID_1076558626" MODIFIED="1389145636228" TEXT="ngx_event_actions_t">
<icon BUILTIN="full-4"/>
<node CREATED="1389146454989" FOLDED="true" MODIFIED="1389146530362" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389071198024" MODIFIED="1389599899989">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typedef struct {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;(*add)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);&#160;&#160;//&#23558;&#26576;&#25551;&#36848;&#31526;&#30340;&#26576;&#20010;&#20107;&#20214;&#65288;&#21487;&#35835;&#65295;&#21487;&#20889;&#65289;&#28155;&#21152;&#21040;&#22810;&#36335;&#22797;&#29992;&#30417;&#25511;&#37324;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;(*del)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);&#160;&#160;//&#23558;&#26576;&#25551;&#36848;&#31526;&#30340;&#26576;&#20010;&#20107;&#20214;&#65288;&#21487;&#35835;/&#21487;&#20889;&#65289;&#20174;&#22810;&#36335;&#22797;&#29992;&#30417;&#25511;&#37324;&#21024;&#38500;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;(*enable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);&#160;&#160;//&#21551;&#21160;&#23545;&#26576;&#20010;&#20107;&#20214;&#30340;&#30417;&#25511;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;(*disable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);&#160;&#160;//&#31105;&#27490;&#23545;&#26576;&#20010;&#20107;&#20214;&#30340;&#30417;&#25511;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;(*add_conn)(ngx_connection_t *c);&#160;&#160;&#160; //&#23558;&#25351;&#23450;&#30340;&#36830;&#25509;&#20851;&#32852;&#30340;&#25551;&#36848;&#31526;&#28155;&#21152;&#21040;&#22810;&#36335;&#22797;&#29992;&#30340;&#30417;&#25511;&#37324;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;(*del_conn)(ngx_connection_t *c, ngx_uint_t flags);//&#23558;&#25351;&#23450;&#30340;&#36830;&#25509;&#20851;&#32852;&#30340;&#25551;&#36848;&#31526;&#20174;&#22810;&#36335;&#22797;&#29992;&#30340;&#30417;&#25511;&#37324;&#21024;&#38500;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t (*process_changes)(ngx_cycle_t *cycle, ngx_uint_t nowait);//&#21482;&#26377;kqueue&#29992;&#21040;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t (*process_events)(ngx_cycle_t *cycle, ngx_msec_t timer, ngx_uint_t flags);&#160;&#160;//&#38459;&#22622;&#31561;&#24453;&#20107;&#20214;&#21457;&#29983;,&#23545;&#21457;&#29983;&#30340;&#20107;&#20214;&#36827;&#34892;&#36880;&#20010;&#22788;&#29702;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t (*init)(ngx_cycle_t *cycle, ngx_msec_t timer); //&#21021;&#22987;&#21270;
    </p>
    <p>
      &#160;&#160;&#160;&#160;void (*done)(ngx_cycle_t *cycle);//&#22238;&#25910;&#36164;&#28304;
    </p>
    <p>
      
    </p>
    <p>
      } ngx_event_actions_t;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390396614740" FOLDED="true" MODIFIED="1390396620655" TEXT="&#x7ed3;&#x6784;&#x5206;&#x6790;">
<node CREATED="1389105668972" MODIFIED="1389105681442" TEXT="typedef struct {&#xa;    ngx_int_t  (*add)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);&#xa;    ngx_int_t  (*del)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);&#xa;&#xa;    ngx_int_t  (*enable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);&#xa;    ngx_int_t  (*disable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);&#xa;&#xa;    ngx_int_t  (*add_conn)(ngx_connection_t *c);&#xa;    ngx_int_t  (*del_conn)(ngx_connection_t *c, ngx_uint_t flags);&#xa;&#xa;    ngx_int_t  (*process_changes)(ngx_cycle_t *cycle, ngx_uint_t nowait);&#xa;    ngx_int_t  (*process_events)(ngx_cycle_t *cycle, ngx_msec_t timer,&#xa;                   ngx_uint_t flags);&#xa;&#xa;    ngx_int_t  (*init)(ngx_cycle_t *cycle, ngx_msec_t timer);&#xa;    void       (*done)(ngx_cycle_t *cycle);&#xa;} ngx_event_actions_t;&#xa;"/>
</node>
<node CREATED="1388928654001" LINK="#ID_590008386" MODIFIED="1390396609452" TEXT="&#x5b9e;&#x4f8b;">
<node CREATED="1389600032611" MODIFIED="1390009808675">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      #define ngx_process_changes&#160;&#160;ngx_event_actions.process_changes
    </p>
    <p>
      #define ngx_process_events&#160;&#160;&#160;ngx_event_actions.process_events
    </p>
    <p>
      #define ngx_done_events&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_actions.done
    </p>
    <p>
      
    </p>
    <p>
      #define ngx_add_event&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_actions.add
    </p>
    <p>
      #define ngx_del_event&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_actions.del
    </p>
    <p>
      #define ngx_add_conn&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_actions.add_conn
    </p>
    <p>
      #define ngx_del_conn&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_actions.del_conn
    </p>
    <p>
      
    </p>
    <p>
      &#160;<font color="#fc0b0b">ngx_event_actions&#20026;&#20840;&#23616;&#21464;&#37327;&#65292;&#22312;nginx_epoll_init &#22788;&#21021;&#22987;&#21270;</font>
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1389603041244" LINK="#ID_1712714867" MODIFIED="1389603090743" TEXT="ngx_add_conn"/>
<node CREATED="1389603041244" MODIFIED="1389603062311" TEXT="ngx_del_conn"/>
<node CREATED="1389603041244" LINK="#ID_1712714867" MODIFIED="1389603096847" TEXT="ngx_add_event"/>
<node CREATED="1389603041244" MODIFIED="1389603083305" TEXT="ngx_del_event"/>
<node CREATED="1390012012224" ID="ID_458451428" LINK="#ID_476761845" MODIFIED="1390380496799" TEXT="ngx_process_events"/>
<node CREATED="1390524157270" ID="ID_1213533210" LINK="#ID_656889216" MODIFIED="1390524197308" TEXT="actions.init"/>
</node>
</node>
<node CREATED="1388928327257" FOLDED="true" ID="ID_13477724" MODIFIED="1390381616156" TEXT="ngx_command_t">
<icon BUILTIN="full-2"/>
<node CREATED="1389150403890" FOLDED="true" MODIFIED="1389150477119" TEXT="&#x7ed3;&#x6784;&#x4f53;">
<node CREATED="1389150422386" MODIFIED="1390274984137">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct ngx_command_s {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color="#f10a0a">type</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color="#f50606">conf</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;offset;
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*post;
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390274754869" LINK="#ID_1418391254" MODIFIED="1390274920479" TEXT="type"/>
<node CREATED="1390274754869" LINK="#ID_1418391254" MODIFIED="1390274927729" TEXT="conf"/>
<node CREATED="1388928340305" FOLDED="true" LINK="http://blog.csdn.net/kenbinzhang/article/details/4658085" MODIFIED="1389105627234" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1388928363577" MODIFIED="1388928399963" TEXT="&#x6a21;&#x5757;&#x7684;&#x6307;&#x4ee4;&#x5728;&#x6e90;&#x7801;&#x4e2d;&#x662f;ngx_command_t&#x7ed3;&#x6784;&#x7684;&#x53d8;&#x91cf;&#xff0c;ngx_command_t&#x7684;&#x58f0;&#x660e;&#x5728;src/core/ngx_conf_file.h&#x4e2d;:&#xa;&#xa;struct ngx_command_s {&#xa;    ngx_str_t             name;&#xa;    ngx_uint_t            type;&#xa;    char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);&#xa;    ngx_uint_t            conf;&#xa;    ngx_uint_t            offset;&#xa;    void                 *post;&#xa;};&#xa;&#xa;name&#x662f;&#x6307;&#x4ee4;&#x540d;&#x79f0;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#xff0c;&#x4e0d;&#x5305;&#x542b;&#x7a7a;&#x683c;&#x3002;&#xa;&#xa;type&#x662f;&#x6807;&#x8bc6;&#x7b26;&#x96c6;&#xff0c;&#x6807;&#x8bc6;&#x6307;&#x4ee4;&#x5728;&#x914d;&#x7f6e;&#x6587;&#x4ef6;&#x4e2d;&#x7684;&#x5408;&#x6cd5;&#x4f4d;&#x7f6e;&#x548c;&#x6307;&#x4ee4;&#x7684;&#x53c2;&#x6570;&#x4e2a;&#x6570;&#x3002;&#x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x81f3;&#x5c11;&#x6709;32bit&#x7684;&#x65e0;&#x7b26;&#x53f7;&#x6574;&#x5f62;&#xff0c;&#x524d;16bit&#x7528;&#x4e8e;&#x6807;&#x8bc6;&#x4f4d;&#x7f6e;&#xff0c;&#x540e;16bit&#x7528;&#x4e8e;&#x6807;&#x8bc6;&#x53c2;&#x6570;&#x3002;&#xa;&#xa;&#x5148;&#x770b;&#x770b;&#x53c2;&#x6570;&#x7684;&#x6807;&#x8bc6;&#xff0c;&#x5b8f;&#x5b9a;&#x4e49;&#x5728;src/core/ngx_conf_file.h&#x4e2d;:&#xa;&#xa;#define NGX_CONF_NOARGS      0x00000001 &#xff08;&#x6ca1;&#x6709;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_TAKE1       0x00000002 &#xff08;&#x6709;1&#x4e2a;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_TAKE2       0x00000004 &#xff08;&#x6709;2&#x4e2a;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_TAKE3       0x00000008 &#xff08;&#x6709;3&#x4e2a;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_TAKE4       0x00000010 &#xff08;&#x6709;4&#x4e2a;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_TAKE5       0x00000020 &#xff08;&#x6709;5&#x4e2a;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_TAKE6       0x00000040 &#xff08;&#x6709;6&#x4e2a;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_TAKE7       0x00000080 &#xff08;&#x6709;7&#x4e2a;&#x53c2;&#x6570;&#xff09;&#xa;&#xa;#define NGX_CONF_MAX_ARGS    8&#xa;&#xa;#define NGX_CONF_TAKE12      (NGX_CONF_TAKE1|NGX_CONF_TAKE2) &#xff08;&#x6709;1&#x4e2a;&#x6216;&#x8005;&#x6709;2&#x4e2a;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_TAKE13      (NGX_CONF_TAKE1|NGX_CONF_TAKE3)&#xa;&#xa;#define NGX_CONF_TAKE23      (NGX_CONF_TAKE2|NGX_CONF_TAKE3)&#xa;&#xa;#define NGX_CONF_TAKE123     (NGX_CONF_TAKE1|NGX_CONF_TAKE2|NGX_CONF_TAKE3)&#xa;#define NGX_CONF_TAKE1234    (NGX_CONF_TAKE1|NGX_CONF_TAKE2|NGX_CONF_TAKE3   /&#xa;                              |NGX_CONF_TAKE4)&#xa;&#xa;#define NGX_CONF_ARGS_NUMBER 0x000000ff&#xa;#define NGX_CONF_BLOCK       0x00000100  (&#x5757;&#x57df;&#xff0c;&#x540e;&#x9762;&#x8ddf;{...}&#xff0c;&#x4f8b;&#x5982;:events {...})&#xa;#define NGX_CONF_FLAG        0x00000200 &#xff08;&#x6709;&#x4e00;&#x4e2a;&#x5e03;&#x5c14;&#x578b;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_ANY         0x00000400&#xa;#define NGX_CONF_1MORE       0x00000800 &#xff08;&#x81f3;&#x591a;&#x6709;1&#x4e2a;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_2MORE       0x00001000 &#xff08;&#x81f3;&#x591a;&#x6709;2&#x4e2a;&#x53c2;&#x6570;&#xff09;&#xa;#define NGX_CONF_MULTI       0x00002000&#xa;&#xa;&#x518d;&#x770b;&#x770b;&#x4f4d;&#x7f6e;&#x7684;&#x6807;&#x8bc6;&#xff0c;&#x4f4d;&#x7f6e;&#x7684;&#x6807;&#x8bc6;&#x5b8f;&#x5b9a;&#x4e49;&#x5728;&#x51e0;&#x4e2a;&#x6587;&#x4ef6;&#x4e2d;:&#xa;&#xa;src/core/ngx_conf_file.h:&#xa;#define NGX_DIRECT_CONF      0x00010000&#xa;&#xa;#define NGX_MAIN_CONF        0x01000000&#xa;#define NGX_ANY_CONF         0x0F000000&#xa;&#xa;src/event/ngx_event.h:&#xa;#define NGX_EVENT_CONF        0x02000000&#xa;&#xa;src/http/ngx_http_config.h:&#xa;#define NGX_HTTP_MAIN_CONF        0x02000000&#xa;#define NGX_HTTP_SRV_CONF         0x04000000&#xa;#define NGX_HTTP_LOC_CONF         0x08000000&#xa;#define NGX_HTTP_UPS_CONF         0x10000000&#xa;#define NGX_HTTP_SIF_CONF         0x20000000&#xa;#define NGX_HTTP_LIF_CONF         0x40000000&#xa;#define NGX_HTTP_LMT_CONF         0x80000000&#xa;&#xa;src/mail/ngx_mail.h:&#xa;#define NGX_MAIL_MAIN_CONF      0x02000000&#xa;#define NGX_MAIL_SRV_CONF       0x04000000&#xa;&#xa;&#x8981;&#x7406;&#x89e3;&#x4e0a;&#x9762;&#x6240;&#x8c13;&#x7684;&#x5408;&#x6cd5;&#x4f4d;&#x7f6e;&#x7684;&#x771f;&#x6b63;&#x542b;&#x4e49;&#xff0c;&#x5c31;&#x8981;&#x4e86;&#x89e3;&#x4e00;&#x4e0b;nginx&#x7684;&#x914d;&#x7f6e;&#x6587;&#x4ef6;&#x4e86;&#xff0c;&#x8fd9;&#x91cc;&#x5c31;&#x4e0d;&#x7d2f;&#x8ff0;&#x4e86;&#xff0c;&#x4e0d;&#x5f71;&#x54cd;&#x4e0b;&#x9762;&#x7684;&#x5206;&#x6790;&#xff0c;&#x6211;&#x4f1a;&#x5728;&#x5f88;&#x540e;&#x9762;&#x7684;&#x65f6;&#x5019;&#x5206;&#x6790;&#x4e00;&#x4e0b;nginx&#x7684;&#x914d;&#x7f6e;&#x6587;&#x4ef6;&#xff0c;&#x56e0;&#x4e3a;&#x90a3;&#x662f;&#x4e00;&#x4e2a;big topic&#x3002;&#xa;&#xa;set&#x662f;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x6307;&#x9488;&#xff0c;&#x8fd9;&#x4e2a;&#x51fd;&#x6570;&#x4e3b;&#x8981;&#x662f;&#x4ece;&#x914d;&#x7f6e;&#x6587;&#x4ef6;&#x4e2d;&#x628a;&#x8be5;&#x6307;&#x4ee4;&#x7684;&#x53c2;&#x6570;&#xff08;&#x5b58;&#x653e;&#x5728;ngx_conf_t&#x4e2d;&#xff09;&#x8f6c;&#x6362;&#x4e3a;&#x5408;&#x9002;&#x7684;&#x6570;&#x636e;&#x7c7b;&#x578b;&#x5e76;&#x5c06;&#x8f6c;&#x6362;&#x540e;&#x7684;&#x503c;&#x4fdd;&#x5b58;&#x5230;&#x6a21;&#x5757;&#x7684;&#x914d;&#x7f6e;&#x7ed3;&#x6784;&#x4f53;&#x4e2d;&#xff08;void *conf&#xff09;&#xff0c;&#x8fd9;&#x4e2a;&#x914d;&#x7f6e;&#x7ed3;&#x6784;&#x4f53;&#x53c8;&#x662f;&#x7528;void *&#x6307;&#x5411;&#x7684;&#xff0c;&#x5e94;&#x8be5;&#x53ef;&#x4ee5;&#x6599;&#x5230;&#x8fd9;&#x8bf4;&#x660e;&#x6bcf;&#x4e2a;&#x6a21;&#x5757;&#x7684;&#x914d;&#x7f6e;&#x7ed3;&#x6784;&#x4f53;&#x662f;&#x4e0d;&#x540c;&#x7684;&#xff0c;&#x8fd9;&#x4e9b;&#x7ed3;&#x6784;&#x4f53;&#x547d;&#x540d;&#x683c;&#x5f0f;&#x4e3a;:ngx_&lt;module name&gt;_conf_t&#xff0c;&#x81f3;&#x4e8e;&#x8981;&#x628a;&#x8f6c;&#x6362;&#x540e;&#x7684;&#x503c;&#x653e;&#x5230;&#x914d;&#x7f6e;&#x7ed3;&#x6784;&#x4f53;&#x7684;&#x4ec0;&#x4e48;&#x4f4d;&#x7f6e;&#xff0c;&#x5c31;&#x8981;&#x4f9d;&#x9760;offset&#x4e86;&#xff0c;offset&#x662f;&#x8c03;&#x7528;&#x4e86;offsetof&#x51fd;&#x6570;&#x8ba1;&#x7b97;&#x51fa;&#x7684;&#x7ed3;&#x6784;&#x4f53;&#x4e2d;&#x67d0;&#x4e2a;&#x6210;&#x5458;&#x7684;&#x504f;&#x79fb;&#x4f4d;&#x7f6e;&#x3002;&#xa;&#xa;&#x5e76;&#x4e0d;&#x662f;&#x6240;&#x6709;&#x7684;&#x6a21;&#x5757;&#x90fd;&#x8981;&#x5b9a;&#x4e49;&#x4e00;&#x4e2a;&#x914d;&#x7f6e;&#x7ed3;&#x6784;&#x4f53;&#xff0c;&#x56e0;&#x4e3a;set&#x4e5f;&#x53ef;&#x80fd;&#x662f;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x64cd;&#x4f5c;&#x51fd;&#x6570;&#xff0c;&#x5b83;&#x53ef;&#x80fd;&#x53ea;&#x662f;&#x4ece;&#x914d;&#x7f6e;&#x4e2d;&#xff08;ngx_conf_t&#xff09;&#x8bfb;&#x53d6;&#x4e00;&#x4e9b;&#x6570;&#x636e;&#x8fdb;&#x884c;&#x7b80;&#x5355;&#x7684;&#x64cd;&#x4f5c;&#xff0c;&#x6bd4;&#x5982;errlog&#x6a21;&#x5757;&#x7684;&#x201c;error_log&#x201d;&#x6307;&#x4ee4;&#x5c31;&#x662f;&#x8c03;&#x7528;ngx_error_log&#x5199;&#x4e00;&#x6761;&#x65e5;&#x5fd7;&#xff0c;&#x5e76;&#x4e0d;&#x9700;&#x8981;&#x5b58;&#x50a8;&#x4ec0;&#x4e48;&#x914d;&#x7f6e;&#x6570;&#x636e;&#x3002;&#xa;&#xa;conf&#x548c;offset&#xff0c;offset&#x524d;&#x9762;&#x5df2;&#x7ecf;&#x63d0;&#x5230;&#xff0c;&#x5b83;&#x662f;&#x914d;&#x7f6e;&#x7ed3;&#x6784;&#x4f53;&#x4e2d;&#x6210;&#x5458;&#x7684;&#x504f;&#x79fb;&#x3002;conf&#x4e5f;&#x662f;&#x4e00;&#x4e2a;&#x504f;&#x79fb;&#x503c;&#xff0c;&#x4e0d;&#x8fc7;&#x5b83;&#x662f;&#x914d;&#x7f6e;&#x6587;&#x4ef6;&#x7ed3;&#x6784;&#x4f53;&#x7684;&#xff08;ngx_conf_t&#xff09;&#x6210;&#x5458;ctx&#x7684;&#x6210;&#x5458;&#x7684;&#x504f;&#x79fb;&#xff0c;&#x4e00;&#x822c;&#x662f;&#x7528;&#x6765;&#x628a;ctx&#x4e2d;&#x6307;&#x5b9a;&#x504f;&#x79fb;&#x4f4d;&#x7f6e;&#x7684;&#x6210;&#x5458;&#x8d4b;&#x503c;&#x7ed9;void *conf&#x3002;&#xa;&#xa;post&#x6307;&#x5411;&#x6a21;&#x5757;&#x8bfb;&#x914d;&#x7f6e;&#x7684;&#x65f6;&#x5019;&#x9700;&#x8981;&#x7684;&#x4e00;&#x4e9b;&#x96f6;&#x788e;&#x53d8;&#x91cf;&#x3002;&#xa;&#xa;&#x4ece;&#x4e0a;&#x9762;&#x7684;&#x5206;&#x6790;&#x53ef;&#x4ee5;&#x770b;&#x51fa;&#xff0c;&#x6bcf;&#x4e2a;&#x6a21;&#x5757;&#x4f1a;&#x6620;&#x5c04;&#x5230;&#x914d;&#x7f6e;&#x6587;&#x4ef6;&#x4e2d;&#x7684;&#x67d0;&#x4e2a;&#x4f4d;&#x7f6e;&#xff0c;&#x5168;&#x5c40;&#x4f4d;&#x7f6e;&#x7684;&#x914d;&#x7f6e;&#x4f1a;&#x88ab;&#x4e0b;&#x4e00;&#x7ea7;&#x7684;&#x914d;&#x7f6e;&#x7ee7;&#x627f;&#xff0c;&#x6bd4;&#x5982;http_main&#x4f1a;&#x88ab;http_svr&#x7ee7;&#x627f;&#xff0c;http_svr&#x4f1a;&#x88ab;http_loc&#x7ee7;&#x627f;&#xff0c;&#x8fd9;&#x4e9b;&#x7ee7;&#x627f;&#x5728;&#x6e90;&#x7801;&#x4e2d;&#x662f;&#x8c03;&#x7528;&#x6a21;&#x5757;&#x4e0a;&#x4e0b;&#x6587;&#x7684;&#x5408;&#x5e76;&#x914d;&#x7f6e;&#x7684;&#x63a5;&#x53e3;&#x5b8c;&#x6210;&#x7684;&#x3002;&#xa;&#xa;ngx_command_t&#x7684;set&#x6210;&#x5458;&#x4e5f;&#x53ef;&#x4ee5;&#x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x56de;&#x8c03;&#x51fd;&#x6570;&#xff0c;&#x901a;&#x8fc7;&#x628a;&#x81ea;&#x5b9a;&#x4e49;&#x7684;&#x64cd;&#x4f5c;&#x51fd;&#x6570;&#x8d4b;&#x503c;&#x7ed9;set&#x6765;&#x6ce8;&#x518c;&#x4e00;&#x4e9b;&#x64cd;&#x4f5c;&#x3002;&#xa;&#xa;&#x5230;&#x76ee;&#x524d;&#x4e3a;&#x6b62;&#xff0c;&#x5df2;&#x7ecf;&#x4e86;&#x89e3;&#x4e0d;&#x5c11;&#x56de;&#x8c03;&#x51fd;&#x6570;&#x4e86;&#xff0c;&#x8fd9;&#x4e9b;&#x56de;&#x8c03;&#x51fd;&#x6570;&#x7528;&#x6765;&#x6ce8;&#x518c;&#x6a21;&#x5757;&#x7684;&#x81ea;&#x5b9a;&#x4e49;&#x64cd;&#x4f5c;&#xff0c;&#x6211;&#x6709;&#x65f6;&#x79f0;&#x5b83;&#x4e3a;&#x63a5;&#x53e3;&#xff0c;&#x6709;&#x65f6;&#x79f0;&#x5b83;&#x4e3a;&#x56de;&#x8c03;&#x51fd;&#x6570;&#xff0c;&#x6709;&#x70b9;&#x6df7;&#x4e71;&#xff0c;&#x63a5;&#x4e0b;&#x6765;&#x7684;&#x5206;&#x6790;&#x6587;&#x7ae0;&#x4e2d;&#xff0c;&#x8fdb;&#x884c;&#x4e00;&#x4e0b;&#x7edf;&#x4e00;&#xff0c;&#x5168;&#x90e8;&#x79f0;&#x4e3a;&#x94a9;&#x5b50;&#xff08;hook&#xff09;&#x3002;&#x628a;&#x73b0;&#x5728;&#x5df2;&#x7ecf;&#x5206;&#x6790;&#x8fc7;&#x7684;&#x94a9;&#x5b50;&#x7f57;&#x5217;&#x4e00;&#x4e0b;&#xff1a;&#xa;&#xa;ngx_module_t -&gt; init_master&#xa;ngx_module_t -&gt; init_module&#xa;ngx_module_t -&gt; init_process&#xa;ngx_module_t -&gt; init_thread&#xa;ngx_module_t -&gt; exit_thread&#xa;ngx_module_t -&gt; exit_process&#xa;ngx_module_t -&gt; exit_master&#xa;&#xa;ngx_command_t -&gt; set&#xa;&#xa;&#x4e0b;&#x4e00;&#x7bc7;&#x5256;&#x6790;&#x6a21;&#x5757;&#x4e0a;&#x4e0b;&#x6587;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x4f1a;&#x6709;&#x66f4;&#x591a;&#x7684;&#x94a9;&#x5b50;&#xff0c;&#x8fd9;&#x5c31;&#x662f;&#x4e3a;&#x4ec0;&#x4e48;&#x8981;&#x5bf9;c&#x8bed;&#x8a00;&#x7684;&#x6307;&#x9488;&#x6df1;&#x5165;&#x7406;&#x89e3;&#x7684;&#x539f;&#x56e0;&#x4e86;&#xff0c;nginx&#x4e2d;&#x5230;&#x5904;&#x90fd;&#x662f;&#x94a9;&#x5b50;&#xff0c;&#x5047;&#x5982;&#x8981;&#x81ea;&#x5df1;&#x5199;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#xff0c;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x8fd9;&#x4e9b;&#x94a9;&#x5b50;&#x628a;&#x81ea;&#x5df1;&#x7684;&#x6a21;&#x5757;&#x6302;&#x5230;nginx&#x7684;&#x5904;&#x7406;&#x6d41;&#x4e2d;&#xff0c;&#x53c2;&#x4e0e;&#x5230;nginx&#x8fd0;&#x884c;&#x7684;&#x6bcf;&#x4e2a;&#x7279;&#x5b9a;&#x9636;&#x6bb5;&#xff0c;&#x5f53;&#x7136;&#xff0c;&#x4e5f;&#x4e0d;&#x662f;&#x968f;&#x610f;&#x7684;&#x5d4c;&#x5165;&#xff0c;&#x8981;&#x7cbe;&#x786e;&#x5b9a;&#x4e49;&#x6a21;&#x5757;&#x4f55;&#x65f6;&#x5982;&#x4f55;&#x4ea7;&#x751f;&#x4f5c;&#x7528;&#x624d;&#x662f;&#x6709;&#x610f;&#x4e49;&#x7684;&#xff0c;&#x8fd9;&#x4e0d;&#x662f;&#x4e00;&#x4ef6;&#x8f7b;&#x677e;&#x7684;&#x4e8b;&#x60c5;&#x3002;"/>
</node>
</node>
<node CREATED="1389150266269" FOLDED="true" MODIFIED="1390274182115" TEXT="ngx_conf_t">
<icon BUILTIN="full-2"/>
<node CREATED="1389150403890" FOLDED="true" MODIFIED="1389150477119" TEXT="&#x7ed3;&#x6784;&#x4f53;">
<node CREATED="1389150422386" MODIFIED="1389601865680">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct ngx_conf_s {
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*name;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*<font color="#f50202">args</font>;//&#22312;ngx_events_block&#20013;&#26377;&#20351;&#29992;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cycle_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*cycle;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_pool_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*<font color="#f90606">pool</font>;//&#22312;ngx_events_block&#20013;&#26377;&#20351;&#29992;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_pool_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*temp_pool;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_conf_file_t&#160;&#160;&#160;&#160;&#160;&#160;*conf_file;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*log;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*<font color="#f90606">ctx</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#fb0404">module_type</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#fc0707">cmd_type</font>;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_conf_handler_pt&#160;&#160;<font color="#fd0e0e">&#160;handler</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*<font color="#f60909">handler_conf</font>;
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389150462109" LINK="#ID_260480348" MODIFIED="1389150511849" TEXT="module_type"/>
<node CREATED="1389150475025" LINK="#ID_260480348" MODIFIED="1389150519033" TEXT="cmd_type"/>
<node CREATED="1389150526944" LINK="#ID_260480348" MODIFIED="1389150536776" TEXT="ctx">
<node CREATED="1390286372956" MODIFIED="1390286374285" TEXT="ngx_http_conf_ctx_t">
<node CREATED="1390286361955" FOLDED="true" MODIFIED="1390286794952" TEXT="ngx_http_core_main_conf_t">
<node CREATED="1390286372956" MODIFIED="1390286841088">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typedef struct {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;servers;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* ngx_http_core_srv_conf_t */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_phase_engine_t&#160;&#160;&#160;&#160;phase_engine;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_hash_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;headers_in_hash;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_hash_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;variables_hash;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;variables;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* ngx_http_variable_t */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ncaptures;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_names_hash_max_size;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_names_hash_bucket_size;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;variables_hash_max_size;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;variables_hash_bucket_size;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_hash_keys_arrays_t&#160;&#160;&#160;&#160;*variables_keys;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*ports;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;try_files;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* unsigned&#160;&#160;try_files:1 */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_phase_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#ef0808">&#160;phases</font>[NGX_HTTP_LOG_PHASE + 1];
    </p>
    <p>
      } ngx_http_core_main_conf_t;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390286361955" FOLDED="true" MODIFIED="1390286826355" TEXT="ngx_http_core_srv_conf_t">
<node CREATED="1390286372956" MODIFIED="1390286820630">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typedef struct {
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* array of the ngx_http_server_name_t, &quot;server_name&quot; directive */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_names;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* server ctx */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_conf_ctx_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*ctx;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_name;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_admin;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;connection_pool_size;
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_pool_size;
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;client_header_buffer_size;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_bufs_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;large_client_header_buffers;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;client_header_timeout;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ignore_invalid_headers;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_slashes;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;underscores_in_headers;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;listen:1;
    </p>
    <p>
      #if (NGX_PCRE)
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;captures:1;
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_core_loc_conf_t&#160;&#160;**named_locations;
    </p>
    <p>
      } ngx_http_core_srv_conf_t;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390286361955" FOLDED="true" MODIFIED="1390287065783" TEXT="ngx_http_core_loc_conf_s">
<node CREATED="1390286372956" MODIFIED="1390287060018">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct ngx_http_core_loc_conf_s {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;name;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* location name */
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_PCRE)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_regex_t&#160;&#160;*regex;
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;noname:1;&#160;&#160;&#160;/* &quot;if () {}&quot; block or limit_except */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;lmt_excpt:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;named:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;exact_match:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;noregex:1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;auto_redirect:1;
    </p>
    <p>
      #if (NGX_HTTP_GZIP)
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;gzip_disable_msie6:2;
    </p>
    <p>
      #if (NGX_HTTP_DEGRADATION)
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;gzip_disable_degradation:2;
    </p>
    <p>
      #endif
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_location_tree_node_t&#160;&#160;&#160;*static_locations;
    </p>
    <p>
      #if (NGX_PCRE)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_core_loc_conf_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;**regex_locations;
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* pointer to the modules' loc_conf */
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;**loc_conf;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;uint32_t&#160;&#160;&#160;&#160;&#160;&#160;limit_except;
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;**limit_except_loc_conf;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_handler_pt&#160;&#160;handler;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* location name length for inclusive location with inherited alias */
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alias;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;root;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* root, alias */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;post_action;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;*root_lengths;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;*root_values;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;*types;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_hash_t&#160;&#160;&#160;&#160;types_hash;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;default_type;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;off_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;client_max_body_size;&#160;&#160;&#160;&#160;/* client_max_body_size */
    </p>
    <p>
      &#160;&#160;&#160;&#160;off_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;directio;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* directio */
    </p>
    <p>
      &#160;&#160;&#160;&#160;off_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;directio_alignment;&#160;&#160;&#160;&#160;&#160;&#160;/* directio_alignment */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_bufs_t&#160;&#160;&#160;&#160;client_body_buffers;
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;client_body_postpone_size;
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;client_body_buffer_size; /* client_body_buffer_size */
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;send_lowat;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* send_lowat */
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;postpone_output;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* postpone_output */
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;limit_rate;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* limit_rate */
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;limit_rate_after;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* limit_rate_after */
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sendfile_max_chunk;&#160;&#160;&#160;&#160;&#160;&#160;/* sendfile_max_chunk */
    </p>
    <p>
      &#160;&#160;&#160;&#160;size_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;read_ahead;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* read_ahead */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;&#160;&#160;client_body_timeout;&#160;&#160;&#160;&#160;&#160;/* client_body_timeout */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;&#160;&#160;send_timeout;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* send_timeout */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;&#160;&#160;keepalive_timeout;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* keepalive_timeout */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;&#160;&#160;lingering_time;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* lingering_time */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;&#160;&#160;lingering_timeout;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* lingering_timeout */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_msec_t&#160;&#160;&#160;&#160;resolver_timeout;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* resolver_timeout */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_resolver_t&#160;&#160;*resolver;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* resolver */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;time_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;keepalive_header;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* keepalive_timeout */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;keepalive_requests;&#160;&#160;&#160;&#160;&#160;&#160;/* keepalive_requests */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;keepalive_disable;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* keepalive_disable */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;satisfy;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* satisfy */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;lingering_close;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* lingering_close */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;if_modified_since;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* if_modified_since */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;max_ranges;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* max_ranges */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;client_body_in_file_only; /* client_body_in_file_only */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;client_body_in_single_buffer;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* client_body_in_singe_buffer */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;retry_cached_connection;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;internal;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* internal */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;sendfile;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* sendfile */
    </p>
    <p>
      #if (NGX_HAVE_FILE_AIO)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;aio;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* aio */
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;tcp_nopush;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* tcp_nopush */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;tcp_nodelay;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* tcp_nodelay */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;reset_timedout_connection; /* reset_timedout_connection */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;server_name_in_redirect; /* server_name_in_redirect */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;port_in_redirect;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* port_in_redirect */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;msie_padding;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* msie_padding */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;msie_refresh;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* msie_refresh */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;log_not_found;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* log_not_found */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;log_subrequest;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* log_subrequest */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;recursive_error_pages;&#160;&#160;&#160;/* recursive_error_pages */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;server_tokens;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* server_tokens */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;server_info;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* server_info */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;chunked_transfer_encoding; /* chunked_transfer_encoding */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;etag;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* etag */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;request_time_cache;&#160;&#160;&#160;&#160;&#160;&#160;/* request_time_cache */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;server_tag_type;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* server tag type */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;server_tag;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* customized server tag */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;server_tag_header;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* server tag header */
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_HTTP_GZIP)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;gzip_vary;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* gzip_vary */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;gzip_http_version;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* gzip_http_version */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;gzip_proxied;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* gzip_proxied */
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_PCRE)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;*gzip_disable;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* gzip_disable */
    </p>
    <p>
      #endif
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_HAVE_OPENAT)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;disable_symlinks;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* disable_symlinks */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_complex_value_t&#160;&#160;*disable_symlinks_from;
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;*error_pages;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* error_page */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_try_file_t&#160;&#160;&#160;&#160;*try_files;&#160;&#160;&#160;&#160;&#160;/* try_files */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_path_t&#160;&#160;&#160;*client_body_temp_path;&#160;&#160;&#160;/* client_body_temp_path */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_open_file_cache_t&#160;&#160;*open_file_cache;
    </p>
    <p>
      &#160;&#160;&#160;&#160;time_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;open_file_cache_valid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;open_file_cache_min_uses;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;open_file_cache_errors;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_flag_t&#160;&#160;&#160;&#160;open_file_cache_events;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_t&#160;&#160;&#160;&#160;*error_log;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;types_hash_max_size;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;types_hash_bucket_size;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_queue_t&#160;&#160;*locations;
    </p>
    <p>
      
    </p>
    <p>
      #if 0
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_core_loc_conf_t&#160;&#160;*prev_location;
    </p>
    <p>
      #endif
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1389591316401" LINK="#ID_922869772" MODIFIED="1389591357546">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      handler
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1389591335905" LINK="#ID_922869772" MODIFIED="1389591362445" TEXT="handler_conf"/>
<node CREATED="1389601875679" LINK="#ID_1181673648" MODIFIED="1389601900963" TEXT="args,pool"/>
</node>
<node CREATED="1389098147110" FOLDED="true" MODIFIED="1390381554013" TEXT="ngx_process_t">
<icon BUILTIN="full-5"/>
<node CREATED="1389098160431" MODIFIED="1389098355839">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typedef struct {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_pid_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pid;<font color="#fa0e0e">//pid&#26159;&#36827;&#31243;&#30340;id&#65307;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;int&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status;<font color="#f70404">//status&#26159;&#36827;&#31243;&#30340;&#36864;&#20986;&#29366;&#24577;&#65307;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_socket_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;channel[2];<font color="#fb0404">//&#26159;socketpair&#21019;&#24314;&#30340;&#19968;&#23545;socket&#21477;&#26564;&#65307;</font>
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_spawn_proc_pt&#160;&#160;&#160;proc;<font color="#f90a0a">//proc&#26159;&#36827;&#31243;&#30340;&#25191;&#34892;&#20989;&#25968;&#65292;data&#20026;proc&#30340;&#21442;&#25968;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*data;
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*name;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;respawn:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;just_spawn:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;detached:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exiting:1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exited:1;
    </p>
    <p>
      } ngx_process_t;(src/os/unix/ngx_process.h)
    </p>
    <p>
      &#26368;&#21518;&#30340;&#20960;&#20010;&#20301;&#22495;&#26159;&#36827;&#31243;&#30340;&#29366;&#24577;,
    </p>
    <p>
      <font color="#f60505">respawn:&#37325;&#26032;&#21019;&#24314;&#30340;&#12289; </font>
    </p>
    <p>
      <font color="#f60505">just_spawn:&#31532;&#19968;&#27425;&#21019;&#24314;&#30340;&#12289; </font>
    </p>
    <p>
      <font color="#f60505">detached:&#20998;&#31163;&#30340;&#12289; </font>
    </p>
    <p>
      <font color="#f60505">exiting:&#27491;&#22312;&#36864;&#20986;&#12289; </font>
    </p>
    <p>
      <font color="#f60505">exited:&#24050;&#32463;&#36864;&#20986;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389143993900" FOLDED="true" MODIFIED="1390381558601" TEXT="ngx_cycle_t">
<icon BUILTIN="full-5"/>
<node CREATED="1389144659601" FOLDED="true" MODIFIED="1389144675405" TEXT="&#x7ed3;&#x6784;&#x4f53;">
<node CREATED="1389143999413" MODIFIED="1389144012234">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct ngx_cycle_s {
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;****conf_ctx;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_pool_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*pool;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*log;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;new_log;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;**files;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*free_connections;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;free_connection_n;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;listening;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pathes;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_list_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;open_files;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_list_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;shared_memory;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;connection_n;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;files_n;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*connections;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*read_events;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*write_events;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_cycle_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*old_cycle;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf_file;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf_param;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;conf_prefix;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;prefix;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lock_file;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hostname;
    </p>
    <p>
      };&#65288;&#35265;src/core/ngx_cycle.h&#65289;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389144643593" LINK="#ID_429337595" MODIFIED="1389144653377" TEXT="listening"/>
</node>
<node CREATED="1389272924862" FOLDED="true" MODIFIED="1390381564916" TEXT="ngx_log_s">
<icon BUILTIN="full-5"/>
<node CREATED="1389272931294" MODIFIED="1389272947872">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct ngx_log_s {
    </p>
    <p>
      #if (NGX_SYSLOG)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_syslog_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*syslog;
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160; <font color="#f90101">ngx_open_file_t </font>&#160;&#160;&#160;&#160;*file;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log_level;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_atomic_uint_t&#160;&#160;&#160;&#160;connection;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_handler_pt&#160;&#160;&#160;handler;
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*data;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/*
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* we declare &quot;action&quot; as &quot;char *&quot; because the actions are usually
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* the static strings and in the &quot;u_char *&quot; case we have to override
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* their types all the time
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*action;
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389272924862" FOLDED="true" MODIFIED="1390381569009" TEXT="ngx_open_file_s">
<icon BUILTIN="full-5"/>
<node CREATED="1389272931294" MODIFIED="1389273118797">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct ngx_open_file_s {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_fd_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fd; /* &#26631;&#20934;IO&#25991;&#20214;&#25551;&#36848;&#31526; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_str_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name;/* &#25991;&#20214;&#21517;&#31216; */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(*flush)(ngx_open_file_t *file, ngx_log_t *log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*data;
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1389151355314" FOLDED="true" MODIFIED="1389151369535" POSITION="right" TEXT="&#x56de;&#x8c03;&#x51fd;&#x6570;">
<node CREATED="1389242699632" ID="ID_1118410517" LINK="#ID_1345550578" MODIFIED="1389447876152" TEXT="ngx_signal_handler">
<node CREATED="1389242707048" FOLDED="true" MODIFIED="1389447876150" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node BACKGROUND_COLOR="#ffff00" CREATED="1389242714057" MODIFIED="1389242724141">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      void
    </p>
    <p>
      ngx_signal_handler(int signo)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*action;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ignore;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_err_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;err;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_signal_t&#160;&#160;&#160;&#160;*sig;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ignore = 0;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;err = ngx_errno;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (sig = signals; sig-&gt;signo != 0; sig++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (sig-&gt;signo == signo) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_time_sigsafe_update();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;action = &quot;&quot;;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;switch (ngx_process) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case NGX_PROCESS_MASTER:
    </p>
    <p>
      &#160;&#160;&#160;&#160;case NGX_PROCESS_SINGLE:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;switch (signo) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_SHUTDOWN_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_quit = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, shutting down&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_TERMINATE_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case SIGINT:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_terminate = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, exiting&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_NOACCEPT_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_daemonized) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_noaccept = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, stop accepting connections&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_RECONFIGURE_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reconfigure = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, reconfiguring&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_REOPEN_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reopen = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, reopening logs&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_CHANGEBIN_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (getppid() &gt; 1 || ngx_new_binary &gt; 0) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* Ignore the signal in the new binary if its parent is
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* not the init process, i.e. the old binary's process
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* is still running.&#160;&#160;Or ignore the signal in the old binary's
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* process if the new binary's process is already running.
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, ignoring&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ignore = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_change_binary = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, changing binary&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case SIGALRM:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_sigalrm = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case SIGIO:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_sigio = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case SIGCHLD:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reap = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;case NGX_PROCESS_WORKER:
    </p>
    <p>
      &#160;&#160;&#160;&#160;case NGX_PROCESS_HELPER:
    </p>
    <p>
      &#160;&#160;&#160;&#160;case NGX_PROCESS_PROC:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;switch (signo) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_NOACCEPT_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!ngx_daemonized) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_debug_quit = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_SHUTDOWN_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_quit = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, shutting down&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_TERMINATE_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case SIGINT:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_terminate = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, exiting&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_REOPEN_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reopen = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, reopening logs&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_RECONFIGURE_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case ngx_signal_value(NGX_CHANGEBIN_SIGNAL):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case SIGIO:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;action = &quot;, ignoring&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_NOTICE, ngx_cycle-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;signal %d (%s) received%s&quot;, signo, sig-&gt;signame, action);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ignore) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_CRIT, ngx_cycle-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;the changing binary signal is ignored: &quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;you should shutdown or terminate &quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;before either old or new binary's process&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (signo == SIGCHLD) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_process_get_status();
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_set_errno(err);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1389594505384" FOLDED="true" MODIFIED="1389594527369" TEXT="/*command set*/">
<node CREATED="1389591191053" FOLDED="true" MODIFIED="1389591261281" TEXT="ngx_http_core_types">
<node CREATED="1389345764637" MODIFIED="1389447850946" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389345806379" ID="ID_922869772" MODIFIED="1389591658334">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static char *
    </p>
    <p>
      ngx_http_core_types(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_core_loc_conf_t *clcf = conf;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*rv;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_conf_t&#160;&#160;&#160;save;
    </p>
    <p>
      ...............................
    </p>
    <p>
      //&#20445;&#23384;conf
    </p>
    <p>
      &#160;&#160;&#160;&#160;save = *cf;
    </p>
    <p>
      //&#35774;&#32622;handler
    </p>
    <p>
      &#160;&#160;&#160;&#160;cf-&gt;<font color="#f30404">handler = ngx_http_core_type</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;cf-&gt;<font color="#ef0303">handler_conf = conf</font>;
    </p>
    <p>
      //&#32487;&#32493;&#35299;&#26512;
    </p>
    <p>
      &#160;&#160;&#160;&#160;rv =<font color="#f60505">&#160;ngx_conf_parse</font>(cf, NULL);
    </p>
    <p>
      //&#24674;&#22797;conf
    </p>
    <p>
      &#160;&#160;&#160;&#160;*cf = save;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return rv;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389591672409" LINK="#ID_1159741802" MODIFIED="1389591728633" TEXT="&#xa0;ngx_conf_parse"/>
</node>
<node CREATED="1389081320591" ID="ID_642383791" LINK="#ID_333242358" MODIFIED="1389448567915" TEXT="ngx_http_block">
<node CREATED="1389081514663" MODIFIED="1389081601261" TEXT="ngx_http_optimize_servers">
<node CREATED="1388929162025" FOLDED="true" MODIFIED="1389145398528" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;1">
<node CREATED="1388929222345" MODIFIED="1389593181195">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_int_t
    </p>
    <p>
      ngx_http_optimize_servers(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf,
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_array_t *ports)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p, a;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_conf_port_t&#160;&#160;*port;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_conf_addr_t&#160;&#160;*addr;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ports == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;port = ports-&gt;elts;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (p = 0; p &lt; ports-&gt;nelts; p++) {
    </p>
    <p>
      ..................................................
    </p>
    <p>
      //&#21021;&#22987;&#21270;listen&#32467;&#26500;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f20909">ngx_http_init_listening</font>(cf, &amp;port[p]) != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389081531098" MODIFIED="1389081590302" TEXT="ngx_http_init_listening">
<node CREATED="1388929162025" FOLDED="true" MODIFIED="1389145398528" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;1">
<node CREATED="1388929222345" MODIFIED="1389593311933">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_int_t
    </p>
    <p>
      ngx_http_init_listening(ngx_conf_t *cf, ngx_http_conf_port_t *port)
    </p>
    <p>
      {
    </p>
    <p>
      .....................................
    </p>
    <p>
      &#160;&#160;&#160;&#160;while (i &lt; last) {
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (bind_wildcard &amp;&amp; !addr[i].opt.bind) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      //&#36825;&#20010;&#20989;&#25968;&#37324;&#38754;&#23558;&#20250;&#21019;&#24314;&#65292;&#24182;&#19988;&#21021;&#22987;&#21270;listen&#32467;&#26500;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ls = <font color="#f20d0d">ngx_http_add_listening</font>(cf, &amp;addr[i]);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ls == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      ......................................................
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;switch (ls-&gt;sockaddr-&gt;sa_family) {
    </p>
    <p>
      &#160;
    </p>
    <p>
      #if (NGX_HAVE_INET6)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case AF_INET6:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_http_add_addrs6(cf, hport, addr) != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;default: /* AF_INET */
    </p>
    <p>
      //&#21021;&#22987;&#21270;&#34394;&#25311;&#20027;&#26426;&#30456;&#20851;&#30340;&#22320;&#22336;&#65292;&#35774;&#32622;hash&#31561;&#31561;.
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_http_add_addrs(cf, hport, addr) != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;addr++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last--;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      .........................
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389081652031" MODIFIED="1389081784382" TEXT="ngx_http_add_listening">
<node CREATED="1388929162025" FOLDED="true" MODIFIED="1389145398528" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;1">
<node CREATED="1388929222345" MODIFIED="1389593386738">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_listening_t *
    </p>
    <p>
      ngx_http_add_listening(ngx_conf_t *cf, ngx_http_conf_addr_t *addr)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;ngx_listening_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*ls;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_core_loc_conf_t&#160;&#160;*clcf;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_core_srv_conf_t&#160;&#160;*cscf;
    </p>
    <p>
      //&#21019;&#24314;listen&#32467;&#26500;&#20307;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ls = <font color="#fb1111">ngx_create_listening</font>(cf, &amp;addr-&gt;opt.u.sockaddr, addr-&gt;opt.socklen);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ls == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ls-&gt;addr_ntop = 1;
    </p>
    <p>
      //&#35774;&#32622;listen&#21477;&#26564;&#30340;&#22238;&#35843;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ls-&gt;handler = <font color="#f80707">ngx_http_init_connection</font>;
    </p>
    <p>
      ...............................................
    </p>
    <p>
      //&#35774;&#32622;&#23545;&#24212;&#30340;&#23646;&#24615;,backlog,&#35835;&#20889;buf.
    </p>
    <p>
      &#160;&#160;&#160;&#160;ls-&gt;backlog = addr-&gt;opt.backlog;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ls-&gt;rcvbuf = addr-&gt;opt.rcvbuf;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ls-&gt;sndbuf = addr-&gt;opt.sndbuf;
    </p>
    <p>
      ........................................................
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389081664072" ID="ID_1397106292" LINK="#ID_866878198" MODIFIED="1389081813702" TEXT="ngx_create_listening"/>
<node CREATED="1389448630667" ID="ID_64737652" LINK="#ID_113471940" MODIFIED="1390379999454" TEXT="ngx_http_init_connection">
<icon BUILTIN="back"/>
</node>
</node>
</node>
<node CREATED="1389081618658" MODIFIED="1389081620094" TEXT="ngx_http_optimize_servers"/>
</node>
</node>
<node CREATED="1389088130079" ID="ID_1463245406" LINK="#ID_824770665" MODIFIED="1389150490112" TEXT="ngx_events_block">
<node CREATED="1389149980578" FOLDED="true" LINK="http://blog.csdn.net/kenbinzhang/article/details/4737539" MODIFIED="1389151263433" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389088145645" ID="ID_260480348" MODIFIED="1389602152139">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static char *
    </p>
    <p>
      ngx_events_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*rv;
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;***ctx;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_conf_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pcf;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_module_t&#160;&#160;&#160;*m;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* count the number of the event modules and set up their indices */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23545;event&#31867;&#27169;&#22359;&#28857;&#19968;&#19979;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_max_module = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;type != NGX_EVENT_MODULE) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#fc0707">&#160;ngx_modules[i]-&gt;ctx_index = ngx_event_max_module++;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ctx = ngx_pcalloc(<font color="#f30404">cf-&gt;pool</font>, sizeof(void *));
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ctx == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_CONF_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;*ctx = ngx_pcalloc(cf-&gt;pool, ngx_event_max_module * sizeof(void *));
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (*ctx == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_CONF_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;*(void **) conf = ctx;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#29992;&#25152;&#26377;event&#31867;&#27169;&#22359;&#30340;create_conf&#38057;&#23376;&#65292;&#21019;&#24314;&#37197;&#32622;&#32467;&#26500;&#65292;&#36825;&#20123;&#37197;&#32622;&#32467;&#26500;&#24418;&#25104;&#19968;&#20010;&#25968;&#32452;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#36825;&#20010;&#25968;&#32452;&#30340;&#25351;&#38024;&#26368;&#32456;&#20250;&#36171;&#32473;cycle-&gt;conf_ctx&#65292;&#36825;&#26159;&#19968;&#20010;void ****&#25351;&#38024;&#65292;&#21487;&#20197;&#25226;&#25152;&#26377;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#27169;&#22359;&#30340;&#37197;&#32622;&#32467;&#26500;&#26377;&#23618;&#27425;&#30340;&#20445;&#23384;&#19979;&#26469;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;type != NGX_EVENT_MODULE) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m = ngx_modules[i]-&gt;ctx;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (m-&gt;create_conf) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f70404">(*ctx)[ngx_modules[i]-&gt;ctx_index] = m-&gt;create_conf(cf-&gt;cycle);</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((*ctx)[ngx_modules[i]-&gt;ctx_index] == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_CONF_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;pcf = *cf;
    </p>
    <p>
      <font color="#fa0505">&#160;&#160;&#160;&#160;cf-&gt;ctx = ctx; </font>
    </p>
    <p>
      <font color="#fa0505">&#160;&#160;&#160;&#160;cf-&gt;module_type = NGX_EVENT_MODULE; </font>
    </p>
    <p>
      <font color="#fa0505">&#160;&#160;&#160;&#160;cf-&gt;cmd_type = NGX_EVENT_CONF;</font>
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35299;&#26512;&#8220;events {}&#8221;&#22359;&#20013;&#30340;&#25351;&#20196;&#38598;
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#f10505">rv = ngx_conf_parse(cf, NULL);</font>
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;*cf = pcf;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (rv != NGX_CONF_OK)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return rv;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35843;&#29992;&#27599;&#20010;event&#31867;&#27169;&#22359;&#30340;init_conf&#38057;&#23376;&#65292;&#21021;&#22987;&#21270;&#37197;&#32622;&#32467;&#26500;&#65292;&#36825;&#20123;&#37197;&#32622;&#32467;&#26500;&#26377;&#20123;&#24050;&#32463;&#22312;&#35299;&#26512;&#25351;&#20196;&#30340;&#26102;&#20505;&#34987;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22635;&#20805;&#65292;&#36825;&#37324;&#20027;&#35201;&#26159;&#22788;&#29702;&#37027;&#20123;&#36824;&#27809;&#26377;&#34987;&#25351;&#20196;&#22635;&#20805;&#65292;&#25110;&#32773;&#22635;&#20805;&#30340;&#26377;&#38382;&#39064;&#30340;&#37027;&#20123;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;type != NGX_EVENT_MODULE) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m = ngx_modules[i]-&gt;ctx;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (m-&gt;init_conf) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f80303">rv = m-&gt;init_conf(cf-&gt;cycle, (*ctx)[ngx_modules[i]-&gt;ctx_index]);</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rv != NGX_CONF_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return rv;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return NGX_CONF_OK;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389149980578" FOLDED="true" ID="ID_1181673648" LINK="http://www.cnblogs.com/fll369/archive/2012/11/29/2794939.html" MODIFIED="1389601297396" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389088145645" MODIFIED="1389602053737">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static char *
    </p>
    <p>
      ngx_events_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*rv;
    </p>
    <p>
      &#160;&#160;&#160;&#160;void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;***ctx;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_conf_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pcf;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_module_t&#160;&#160;&#160;*m;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#20026;ctx&#20998;&#37197;&#31354;&#38388;,&#25152;&#26377;&#30340;event module&#30340;&#20840;&#23616;&#37197;&#32622;&#26159;&#19968;&#20010;&#25968;&#32452;,&#36825;&#37324;&#20063;&#20026;&#23427;&#20998;&#37197;&#31354;&#38388;&#65292;&#21516;&#26102;&#23558;&#23384;&#25918;&#22312;ngx_cycle-&gt;conf_ctx&#25968;&#32452;&#30340;ngx_events_module&#30340;&#37197;&#32622;&#32467;&#26500;&#36171;&#20540;&#20026;ctx
    </p>
    <p>
      &#160;&#160;&#160;&#160;ctx = ngx_pcalloc(cf-&gt;pool, sizeof(void *));
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ctx == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_CONF_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;*ctx = ngx_pcalloc(<font color="#f80b0b">cf-&gt;pool</font>, ngx_event_max_module * sizeof(void *));
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160; //&#23558;&#22312;ngx_cycle-&gt;conf_ctx&#25968;&#32452;&#20013;&#30340;&#23384;&#25918;&#30340;ngx_events_moudle&#30340;config&#20449;&#24687;&#36171;&#20540;&#32473;ctx&#65292;&#20063;&#23601;&#26159;event&#160; module&#37197;&#32622;&#20449;&#24687;&#30340;&#25968;&#32452;
    </p>
    <p>
      &#160;&#160;&#160;&#160;*(void **) conf = ctx;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;type != NGX_EVENT_MODULE) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m = ngx_modules[i]-&gt;ctx;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#35843;&#29992;create_conf&#22238;&#35843;&#20989;&#25968;&#21019;&#24314;&#37197;&#32622;&#20449;&#24687;&#32467;&#26500;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (m-&gt;create_conf) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(*ctx)[ngx_modules[i]-&gt;ctx_index] = m-&gt;create_conf(cf-&gt;cycle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((*ctx)[ngx_modules[i]-&gt;ctx_index] == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_CONF_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#20026;&#35299;&#26512;events&#22359;&#20934;&#22791;,&#35774;&#32622;&#35299;&#26512;&#27169;&#22359;&#30340;&#31867;&#22411;,&#160;&#160;&#22791;&#20221;cf&#65292;&#35299;&#26512;&#23436;events&#22359;&#21518;&#24674;&#22797;
    </p>
    <p>
      &#160;&#160;&#160;&#160;pcf = *cf;
    </p>
    <p>
      &#160;&#160;&#160;&#160;cf-&gt;ctx = ctx;
    </p>
    <p>
      &#160;&#160;&#160;&#160;cf-&gt;module_type = NGX_EVENT_MODULE;
    </p>
    <p>
      &#160;&#160;&#160;&#160;cf-&gt;cmd_type = NGX_EVENT_CONF;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#35299;&#26512;events&#22359;
    </p>
    <p>
      &#160;&#160;&#160;&#160;rv = ngx_conf_parse(cf, NULL);&#160;&#160;//&#36882;&#24402;&#35843;&#29992;,&#22797;&#26434;&#22359;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#24674;&#22797;cf
    </p>
    <p>
      &#160;&#160;&#160;&#160;*cf = pcf;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (rv != NGX_CONF_OK)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return rv;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; ngx_modules[i]; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[i]-&gt;type != NGX_EVENT_MODULE) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m = ngx_modules[i]-&gt;ctx;
    </p>
    <p>
      // &#35299;&#26512;&#23436;events&#22359;&#65292;&#25509;&#30528;&#35843;&#29992;&#25152;&#26377;event module&#30340;init_conf&#22238;&#35843;&#20989;&#25968;&#21021;&#22987;&#21270;&#27169;&#22359;&#30340;&#37197;&#32622;&#32467;&#26500;&#12290;&#36825;&#37324;ngx_event_core_module&#21644;ngx_epoll_module&#20250;&#23545;&#37197;&#32622;&#32467;&#26500;&#20013;&#23578;&#26410;&#21021;&#22987;&#21270;&#30340;&#19968;&#20123;&#23646;&#24615;&#36171;&#40664;&#35748;&#20540;&#65292;&#27604;&#22914;&#40664;&#35748;&#20351;&#29992;io&#27169;&#22411;&#65292;&#20063;&#23601;&#26159;use&#25351;&#20196;&#30340;&#40664;&#35748;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (m-&gt;init_conf) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rv = m-&gt;init_conf(cf-&gt;cycle, (*ctx)[ngx_modules[i]-&gt;ctx_index]);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rv != NGX_CONF_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return rv;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return NGX_CONF_OK;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1390271701198" MODIFIED="1390271718501" TEXT="/*ngx_connection_handler_pt*/">
<node CREATED="1389345958461" ID="ID_113471940" LINK="#ID_64737652" MODIFIED="1389448731059" TEXT="ngx_http_init_connection">
<node CREATED="1389450031541" FOLDED="true" MODIFIED="1389575211840" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389345975790" MODIFIED="1390526338210">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#25509;&#19979;&#26469;&#23601;&#26159;ngx_http_init_connection&#20989;&#25968;&#20102;&#65292;&#36825;&#20010;&#20989;&#25968;&#20027;&#35201;&#26159;&#35774;&#32622;&#24403;&#21069;&#21477;&#26564;&#30340;&#35835;handler&#65292;&#22914;&#26524;&#25968;&#25454;&#21487;&#35835;&#65292;&#21017;&#30452;&#25509;&#35843;&#29992;request handler&#65292;&#22914;&#26524;&#25968;&#25454;&#19981;&#21487;&#35835;&#65292;&#21017;&#35774;&#32622;&#23450;&#26102;&#22120;(&#36229;&#26102;&#23450;&#26102;&#22120;),&#24182;&#23558;&#36825;&#20010;&#21477;&#26564;&#25346;&#36733;&#21040;&#20107;&#20214;&#22788;&#29702;&#22120;&#19978;&#12290;
    </p>
    <p>
      &#36825;&#37324;&#26377;&#19968;&#20010;&#38656;&#35201;&#27880;&#24847;&#30340;&#22320;&#26041;&#65292;&#37027;&#23601;&#26159;&#22914;&#26524;&#20351;&#29992;&#20102;ngx_use_accept_mutex&#38145;&#30340;&#35805;&#65292;&#37027;&#20040;&#23601;&#19981;&#33021;&#22815;&#31435;&#21363;&#22788;&#29702;request&#65292;&#22240;&#20026;&#22788;&#29702;request&#26159;&#19968;&#20010;&#38750;&#24120;&#32791;&#26102;&#30340;&#25805;&#20316;&#65292;&#32780;&#29616;&#22312;&#22312;&#38145;&#37324;&#38754;&#65292;&#25152;&#20197;&#27492;&#26102;&#20043;&#38656;&#35201;&#23558;&#36825;&#20010;&#35835;&#20107;&#20214;&#25346;&#36733;&#21040;ngx_posted_events&#38431;&#21015;&#65292;&#31561;&#36864;&#20986;&#38145;&#20043;&#21518;&#20877;&#36827;&#34892;&#22788;&#29702;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#32780;&#19968;&#33324;&#26469;&#35828;&#40664;&#35748;&#37117;&#20250;&#20351;&#29992;mutex&#38145;&#65292;&#22240;&#27492;&#27492;&#26102;&#23601;&#23558;rev&#21152;&#21040;post_events&#38431;&#21015;&#20013;&#65292;&#28982;&#21518;&#30452;&#25509;&#36820;&#22238;&#65292;&#37027;&#20040;&#21487;&#33021;&#23601;&#35201;&#38382;&#20102;&#65292;&#20160;&#20040;&#26102;&#20505;&#20250;&#25226;&#20107;&#20214;&#25346;&#36733;&#21040;epoll&#20013;&#21602;&#65292;&#36825;&#20010;&#25105;&#20204;&#25509;&#19979;&#26469;&#20250;&#20998;&#26512;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ngx_http_init_connection(ngx_connection_t *c)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*rev;
    </p>
    <p>
      .....................................................
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;log_error = NGX_ERROR_INFO;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev = c-&gt;read;
    </p>
    <p>
      //&#35774;&#32622;&#35835;handler.
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev-&gt;handler = <font color="#f31010">ngx_http_wait_request_handler;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;write-&gt;handler = <font color="#f90101">ngx_http_empty_handler;</font>
    </p>
    <p>
      &#160;
    </p>
    <p>
      #if (NGX_STAT_STUB)
    </p>
    <p>
      &#160;&#160;&#160;&#160;(void) ngx_atomic_fetch_add(ngx_stat_reading, 1);
    </p>
    <p>
      #endif
    </p>
    <p>
      //&#22914;&#26524;&#25509;&#25910;&#20934;&#22791;&#22909;&#20102;&#65292;&#21017;&#30452;&#25509;&#35843;&#29992;ngx_http_init_request,&#22914;&#26524;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (rev-&gt;ready) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* the deferred accept(), rtsig, aio, iocp */
    </p>
    <p>
      //&#22914;&#26524;&#20351;&#29992;&#20102;mutex&#38145;&#65292;&#21017;post &#36825;&#20010;event&#65292;&#28982;&#21518;&#36820;&#22238;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_use_accept_mutex) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_post_event(rev, &amp;ngx_posted_events);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#fa0505">&#160;rev-&gt;handler</font>(rev);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      //&#28155;&#21152;&#23450;&#26102;&#22120;
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#f50606">ngx_add_timer</font>(rev, c-&gt;listening-&gt;post_accept_timeout);
    </p>
    <p>
      //&#23558;&#20107;&#20214;&#25346;&#36733;&#21040;&#20107;&#20214;&#22788;&#29702;&#22120;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_handle_read_event(rev, 0) != NGX_OK) {
    </p>
    <p>
      #if (NGX_STAT_STUB)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_http_close_connection(c);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391782482929" ID="ID_737417903" LINK="#ID_704646153" MODIFIED="1391782584692" TEXT="ngx_http_wait_request_handler">
<icon BUILTIN="back"/>
</node>
<node CREATED="1390526346894" MODIFIED="1390526348249" TEXT="ngx_add_timer"/>
</node>
</node>
<node CREATED="1390224455119" ID="ID_881684021" LINK="#ID_1961438373" MODIFIED="1391751211972" TEXT="/*ngx_event_handler_pt*/">
<node CREATED="1389084519801" FOLDED="true" ID="ID_1588041292" LINK="#ID_579592898" MODIFIED="1390015590436" TEXT="ngx_event_accept">
<node CREATED="1389084532642" MODIFIED="1389084539986">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#25105;&#20204;&#20808;&#20998;&#26512;&#19968;&#19979;&#30417;&#21548;&#22871;&#25509;&#21475;&#30340;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;ngx_event_accept&#12290;&#24403;&#30417;&#21548;&#22871;&#25509;&#21475;&#19978;&#21457;&#29983;&#35835;&#20107;&#20214;&#30340;&#26102;&#20505;&#65292;&#23601;&#20250;&#35843;&#29992; ngx_event_accept&#22788;&#29702;&#36825;&#20010;&#20107;&#20214;&#65292;&#36825;&#20010;&#20989;&#25968;&#35843;&#29992;accept&#33719;&#21462;&#24050;&#36830;&#25509;&#30340;&#25968;&#25454;&#22871;&#25509;&#21475;&#65292;&#20026;&#33719;&#24471;&#30340;&#22871;&#25509;&#21475;&#20998;&#37197;&#36830;&#25509;&#36164;&#28304;&#21644;&#35835;&#20889;&#20107;&#20214;&#36164;&#28304;&#65292;&#20026;&#27599;&#20010;&#26032; &#21019;&#24314;&#30340;&#36830;&#25509;&#36164;&#28304;&#21019;&#24314;&#19968;&#20010;&#20869;&#23384;&#27744;&#29992;&#20110;&#20043;&#21518;&#30340;&#25968;&#25454;&#22788;&#29702;&#65292;&#25509;&#19979;&#26469;&#21021;&#22987;&#21270;&#36830;&#25509;&#36164;&#28304;&#21644;&#35835;&#20889;&#20107;&#20214;&#36164;&#28304;&#30340;&#29366;&#24577;&#65292;&#26368;&#21518;&#35843;&#29992;add_conn&#38057;&#23376;&#28155;&#21152;&#23545;&#35835;&#20889;&#20107;&#20214;&#30340;&#30417;&#25511;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1389345764637" FOLDED="true" MODIFIED="1389447850946" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389345806379" MODIFIED="1389448000970">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      socklen = NGX_SOCKADDRLEN;
    </p>
    <p>
      //&#24320;&#22987;accept&#21477;&#26564;
    </p>
    <p>
      #if (NGX_HAVE_ACCEPT4)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s = accept4(lc-&gt;fd, (struct sockaddr *) sa, &amp;socklen, SOCK_NONBLOCK);
    </p>
    <p>
      #else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s = accept(lc-&gt;fd, (struct sockaddr *) sa, &amp;socklen);
    </p>
    <p>
      #endif
    </p>
    <p>
      
    </p>
    <p>
      &#25509;&#19979;&#26469;&#23601;&#26159;&#20174;&#36830;&#25509;&#27744;&#21462;&#24471;&#36830;&#25509;&#65292;&#28982;&#21518;&#21019;&#24314;&#36830;&#25509;&#37324;&#38754;&#21253;&#21547;&#30340;&#25968;&#25454;&#32467;&#26500;&#12290;
    </p>
    <p>
      &#160;c = ngx_get_connection(s, ev-&gt;log);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (c == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_close_socket(s) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, ev-&gt;log, ngx_socket_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_socket_n &quot; failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      #if (NGX_STAT_STUB)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(void) ngx_atomic_fetch_add(ngx_stat_active, 1);
    </p>
    <p>
      #endif
    </p>
    <p>
      //&#21019;&#24314;&#20869;&#23384;&#27744;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;pool = ngx_create_pool(ls-&gt;pool_size, ev-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (c-&gt;pool == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_accepted_connection(c);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      //&#20998;&#37197;&#23458;&#25143;&#31471;&#22320;&#22336;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;sockaddr = ngx_palloc(c-&gt;pool, socklen);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (c-&gt;sockaddr == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_accepted_connection(c);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_memcpy(c-&gt;sockaddr, sa, socklen);
    </p>
    <p>
      //&#20998;&#37197;log
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log = ngx_palloc(c-&gt;pool, sizeof(ngx_log_t));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (log == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_accepted_connection(c);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#25509;&#19979;&#26469;&#23601;&#26159;&#21021;&#22987;&#21270;&#20174;&#26469;&#36830;&#25509;&#27744;&#21462;&#20986;&#26469;&#30340;&#36830;&#25509;&#12290;&#20027;&#35201;&#26159;&#21457;&#36865;&#65292;&#25509;&#21463;&#22238;&#35843;&#65292;&#20197;&#21450;&#23458;&#25143;&#31471;&#22320;&#22336;&#31561;&#31561;&#12290;
    </p>
    <p>
      &#160;*log = ls-&gt;log;
    </p>
    <p>
      //&#35774;&#32622;&#35835;&#21462;&#30340;&#22238;&#35843;&#65292;&#36825;&#37324;&#20381;&#36182;&#20110;&#25805;&#20316;&#31995;&#32479;&#12290;&#20197;&#21518;&#20250;&#35814;&#32454;&#20171;&#32461;nginx&#30340;event&#26694;&#26550;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;recv = ngx_recv;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;send = ngx_send;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;recv_chain = ngx_recv_chain;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;send_chain = ngx_send_chain;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;log = log;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;pool-&gt;log = log;
    </p>
    <p>
      //&#35774;&#32622;client&#30340;ip&#22320;&#22336;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;socklen = socklen;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;listening = ls;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;local_sockaddr = ls-&gt;sockaddr;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;unexpected_eof = 1;
    </p>
    <p>
      &#160;
    </p>
    <p>
      #if (NGX_HAVE_UNIX_DOMAIN)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (c-&gt;sockaddr-&gt;sa_family == AF_UNIX) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;tcp_nopush = NGX_TCP_NOPUSH_DISABLED;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;tcp_nodelay = NGX_TCP_NODELAY_DISABLED;
    </p>
    <p>
      #if (NGX_SOLARIS)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Solaris's sendfilev() supports AF_NCA, AF_INET, and AF_INET6 */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;sendfile = 0;
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      #endif
    </p>
    <p>
      //&#20934;&#22791;&#35774;&#32622;&#35835;&#20889;&#30340;&#32467;&#26500;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev = c-&gt;read;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev = c-&gt;write;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev-&gt;ready = 1;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_event_flags &amp; (NGX_USE_AIO_EVENT|NGX_USE_RTSIG_EVENT)) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* rtsig, aio, iocp */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;ready = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ev-&gt;deferred_accept) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;ready = 1;
    </p>
    <p>
      #if (NGX_HAVE_KQUEUE)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;available = 1;
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      //&#35774;&#32622;log
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;log = log;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev-&gt;log = log;
    </p>
    <p>
      
    </p>
    <p>
      &#26368;&#21518;&#19968;&#37096;&#20998;&#23601;&#26159;&#26368;&#20851;&#38190;&#30340;&#19968;&#37096;&#20998;&#65292;&#21040;&#36798;&#36825;&#37324;&#35828;&#26126;&#36830;&#25509;&#24050;&#32463;&#21021;&#22987;&#21270;&#23436;&#27605;&#65292;&#21477;&#26564;&#24050;&#32463;&#21462;&#21040;&#65292;&#25353;&#29031;&#19968;&#33324;&#30340;&#24819;&#27861;&#65292;&#36825;&#20010;&#26102;&#20505;&#23601;&#38656;&#35201;&#23558;&#36830;&#25509;&#21152;&#20837;&#21040;&#20107;&#20214;&#39537;&#21160;&#22120;&#20013;&#65292;&#24182;&#19988;&#38656;&#35201;&#35774;&#32622;&#26032;&#30340;&#21477;&#26564;&#30340;&#19968;&#20123;&#22238;&#35843;&#22788;&#29702;&#20989;&#25968;&#12290;&#21487;&#26159;nginx&#24182;&#27809;&#26377;&#36825;&#20040;&#20570;&#65292;&#23427;&#21482;&#26159;&#20808;&#35774;&#32622;&#22238;&#35843;&#20989;&#25968;&#65292;&#21487;&#26159;&#24182;&#19981;&#21152;&#20107;&#20214;&#21040;epoll&#20013;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      <font color="#f81313">&#36825;&#37324;&#21487;&#20197;&#30475;&#21040;&#26159;&#35843;&#29992;ls-&gt;handler(c)&#65292;&#32780;&#36825;&#20010;handler &#21069;&#20004;&#31687;blog &#25105;&#20204;&#30693;&#36947;&#26159;&#34987;&#21021;&#22987;&#21270;&#20026;ngx_http_init_connection</font>&#65292;&#20063;&#23601;&#26159;&#26368;&#32456;&#20250;&#35843;&#29992;&#36825;&#20010;&#20989;&#25968;&#12290;
    </p>
    <p>
      //&#22914;&#26524;&#19981;&#26159;epoll&#30340;&#35805;&#65292;&#23601;&#35843;&#29992;add_conn
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_add_conn &amp;&amp; (ngx_event_flags &amp; NGX_USE_EPOLL_EVENT) == 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_add_conn(c) == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_close_accepted_connection(c);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log-&gt;data = NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log-&gt;handler = NULL;
    </p>
    <p>
      //&#35843;&#29992;&#22238;&#35843;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ls-&gt;handler(c);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_event_flags &amp; NGX_USE_KQUEUE_EVENT) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev-&gt;available--;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390271870169" LINK="#ID_113471940" MODIFIED="1391782390873" TEXT="ngx_http_init_connection">
<icon BUILTIN="back"/>
</node>
</node>
<node CREATED="1389103358419" FOLDED="true" ID="ID_1171672992" LINK="#ID_535744274" MODIFIED="1390379759115" TEXT="ngx_channel_handler">
<node CREATED="1389103381172" FOLDED="true" MODIFIED="1389106843180" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389103332523" MODIFIED="1390379277895">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_add_channel_event&#25226;&#21477;&#26564;ngx_channel(&#24403;&#21069;worker&#30340;channel[1])&#19978;&#24314;&#31435;&#30340;&#36830;&#25509;&#30340;&#21487;&#35835;&#20107;&#20214;&#21152;&#20837;&#20107;&#20214;&#30417;&#25511;&#38431;&#21015;&#65292;
    </p>
    <p>
      &#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#20026;ngx_channel_hanlder(ngx_event_t *ev)&#12290;
    </p>
    <p>
      &#24403;&#26377;&#21487;&#35835;&#20107;&#20214;&#30340;&#26102;&#20505;&#65292;ngx_channel_handler&#36127;&#36131;&#22788;&#29702;&#28040;&#24687;&#65292;&#36807;&#31243;&#22914;&#19979;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      static void
    </p>
    <p>
      ngx_channel_handler(<font color="#000000">ngx_event_t *ev</font>)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_channel_t&#160;&#160;&#160;&#160;&#160;&#160;ch;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_t&#160;&#160;*c;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ev-&gt;timedout) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ev-&gt;timedout = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;c = ev-&gt;data;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_debug0(NGX_LOG_DEBUG_CORE, ev-&gt;log, 0, &quot;channel handler&quot;);
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for ( ;; ) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20174;channel[1]&#20013;&#35835;&#21462;&#28040;&#24687;/*&#160;&#160;&#35835;&#20986;master&#36827;&#31243;&#21457;&#36865;&#32473;&#36807;&#26469;&#30340;&#25351;&#20196;&#25968;&#25454;, ngx_read_channel &#26159;&#21033;&#29992;recvmsg&#23454;&#29616;&#65292;&#35814;&#32454;&#20171;&#32461;&#35265;&#12298;unix&#32593;&#32476;&#32534;&#31243;&#12299; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n = <font color="#ef0000">ngx_read_channel</font>(c-&gt;fd, &amp;ch, sizeof(ngx_channel_t), ev-&gt;log);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_CORE, ev-&gt;log, 0, &quot;channel: %i&quot;, n);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (n == NGX_ERROR) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_event_flags &amp; NGX_USE_EPOLL_EVENT) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#fa0505">ngx_del_conn</font>(c, 0);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#fa0505">ngx_close_connection</font>(c);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_event_flags &amp; NGX_USE_EVENTPORT_EVENT) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_add_event(ev, NGX_READ_EVENT, 0) == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (n == NGX_AGAIN) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_CORE, ev-&gt;log, 0,&#160;&#160;&quot;channel command: %d&quot;, ch.command);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#22788;&#29702;&#28040;&#24687;&#21629;&#20196;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;switch (ch.command) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case NGX_CMD_QUIT:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_quit = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case NGX_CMD_TERMINATE:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_terminate = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case NGX_CMD_REOPEN:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_reopen = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case NGX_CMD_OPEN_CHANNEL:
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug3(NGX_LOG_DEBUG_CORE, ev-&gt;log, 0,&quot;get channel s:%i pid:%P fd:%d&quot;,ch.slot, ch.pid, ch.fd);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[ch.slot].pid = ch.pid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[ch.slot].channel[0] = ch.fd;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case NGX_CMD_CLOSE_CHANNEL:
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug4(NGX_LOG_DEBUG_CORE, ev-&gt;log, 0,&quot;close channel s:%i pid:%P our:%P fd:%d&quot;,ch.slot, ch.pid, ngx_processes[ch.slot].pid,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[ch.slot].channel[0]);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (close(ngx_processes[ch.slot].channel[0]) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, ev-&gt;log, ngx_errno,&#160;&quot;close() channel failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_processes[ch.slot].channel[0] = -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#65373;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389240434602" MODIFIED="1389450679727" TEXT="&#x5f53;master&#x8fdb;&#x7a0b;&#x53d1;&#x6765;&#x6307;&#x4ee4;&#x540e;&#xff0c;&#x5c31;&#x8c03;&#x7528;ngx_channel_handler&#x51fd;&#x6570;&#x8fdb;&#x884c;&#x4e8b;&#x4ef6;&#x7684;&#x54cd;&#x5e94;"/>
</node>
<node CREATED="1389346235797" FOLDED="true" ID="ID_704646153" LINK="#ID_737417903" MODIFIED="1391782592196">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_http_wait_request_handler
    </p>
    <p>
      (ngx_http_init_request)
    </p>
  </body>
</html></richcontent>
<node CREATED="1389575527314" MODIFIED="1389575579406" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389346241253" ID="ID_736255149" LINK="#ID_1066849236" MODIFIED="1389575335139">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#28982;&#21518;&#23601;&#26159;ngx_http_wait_request_handler(ngx_http_init_request)&#65292;&#36827;&#20837;&#36825;&#20010;&#20989;&#25968;&#65292;&#35828;&#26126;&#23458;&#25143;&#31471;&#26377;&#35831;&#27714;&#36807;&#26469;&#20102;&#65292;&#27492;&#26102;&#25105;&#20204;&#23601;&#38656;&#35201;&#36827;&#20837;http&#30340;&#21327;&#35758;&#35299;&#26512;&#37096;&#20998;&#20102;&#65292;&#22240;&#27492;&#22312;&#36825;&#20010;&#20989;&#25968;&#20027;&#35201;&#23601;&#26159;&#21021;&#22987;&#21270;request&#32467;&#26500;&#65292;&#21021;&#22987;&#21270;&#23436;&#27605;&#21518;&#36827;&#20837;&#35299;&#26512;&#22788;&#29702;
    </p>
    <p>
      static void
    </p>
    <p>
      ngx_http_init_request(ngx_event_t *rev)
    </p>
    <p>
      {
    </p>
    <p>
      ............................................
    </p>
    <p>
      //&#35774;&#32622;handler&#22238;&#35843;
    </p>
    <p>
      &#160;&#160;&#160;rev-&gt;handler = <font color="#f10a0a">ngx_http_process_request_line</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;r-&gt;read_event_handler = ngx_http_block_reading;
    </p>
    <p>
      ......................................................
    </p>
    <p>
      //&#36827;&#20837;&#35299;&#26512;request &#37096;&#20998;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev-&gt;handler(rev);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390224564364" LINK="#ID_1066849236" MODIFIED="1391782703021" TEXT="ngx_http_process_request_line">
<icon BUILTIN="back"/>
</node>
</node>
<node CREATED="1389346235797" FOLDED="true" ID="ID_1066849236" LINK="#ID_736255149" MODIFIED="1391782679400" TEXT="ngx_http_process_request_line">
<node CREATED="1389346805641" MODIFIED="1389447876150" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389346241253" MODIFIED="1389576209518">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26368;&#21518;&#26469;&#30475;ngx_http_process_request_line&#65292;&#36825;&#20010;&#20989;&#25968;&#23601;&#26159;&#23545;request line&#36827;&#34892;&#35299;&#26512;&#65292;&#32780;&#35299;&#26512;&#37096;&#20998;&#22312;&#25105;&#20197;&#21069;&#30340;blog&#24050;&#32463;&#20998;&#26512;&#36807;&#20102;&#65292;&#36825;&#37324;&#23601;&#19981;&#35814;&#32454;&#20998;&#26512;&#20102;&#12290;&#36825;&#37324;&#35201;&#27880;&#24847;&#19968;&#20010;&#22320;&#26041;&#12290; &#25105;&#20204;&#30693;&#36947;nginx &#20351;&#29992;&#30340;&#26159;epoll&#30340;ET&#27169;&#24335;&#65292;&#32780;et&#27169;&#24335;&#30340;&#35805;&#65292;&#23601;&#38656;&#35201;&#33021;&#22815;&#21028;&#26029;&#36825;&#27425;&#35835;&#21462;&#30340;&#25968;&#25454;&#26159;&#21542;&#35835;&#23436;&#65292;&#36825;&#37324;nginx&#26159;&#36825;&#26679;&#21028;&#26029;&#30340;&#65292;&#37027;&#23601;&#26159;&#26681;&#25454;&#21327;&#35758;&#26469;&#21028;&#26029;&#65292;&#20063;&#23601;&#26159;&#21327;&#35758;&#39537;&#21160;&#65292;&#30001;&#21327;&#35758;&#26469;&#21028;&#26029;&#26159;&#21542;&#26377;&#35835;&#21462;&#23436;&#27605;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#36825;&#37324;&#35201;&#27880;&#24847;&#65292;&#22914;&#26524;&#25105;&#20204;&#20351;&#29992;&#20102;mutex&#38145;&#65292;&#37027;&#20040;&#29616;&#22312;&#36827;&#20837;&#36825;&#20010;&#20989;&#25968;&#20043;&#21518;&#65292;&#25105;&#20204;&#20250;&#36890;&#36807;ngx_http_read_request_header&#20013;&#26469;&#25346;&#36733;&#35835;&#20107;&#20214;&#21040;epoll&#12290;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      ngx_http_process_request_line(){
    </p>
    <p>
      .....................................
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for ( ;; ) {
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rc == NGX_AGAIN) {
    </p>
    <p>
      //&#35835;&#21462;request.
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n = <font color="#f50202">ngx_http_read_request_header</font>(r);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (n == NGX_AGAIN || n == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      //&#28982;&#21518;&#24320;&#22987;parse
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rc = <font color="#f50606">ngx_http_parse_request_line</font>(r, r-&gt;header_in);
    </p>
    <p>
      .....................................
    </p>
    <p>
      &#28982;&#21518;&#24403;parse&#32467;&#26463;&#21518;&#36890;&#36807;rc&#26469;&#21028;&#26029;&#35299;&#26512;&#30340;&#32467;&#26524;&#65292;&#22914;&#26524;&#26159;NGX_OK&#21017;&#35828;&#26126;header&#35299;&#26512;&#23436;&#27605;&#65292;&#22914;&#26524;&#26159;NGX_AGAIN,&#21017;&#35828;&#26126;header&#21482;&#35299;&#26512;&#20102;&#19968;&#37096;&#20998;&#12290;&#25105;&#20204;&#36825;&#37324;&#20027;&#35201;&#26469;&#30475;NGX_OK&#30340;&#24773;&#20917;&#65292;&#23601;&#26159;&#24403;request line&#23436;&#20840;&#35299;&#26512;&#23436;&#27605;&#26102;&#65292;nginx&#20570;&#20160;&#20040;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      if (rc == NGX_OK) {
    </p>
    <p>
      ........................................
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;log-&gt;action = &quot;reading client request headers&quot;;
    </p>
    <p>
      //&#35774;&#32622;&#24182;&#35843;&#29992;ngx_http_process_request_headers&#25191;&#34892;&#21518;&#32493;&#25805;&#20316;(&#35299;&#26512;header)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;handler = ngx_http_process_request_headers;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#fa0505">ngx_http_process_request_headers</font>(rev);
    </p>
    <p>
      
    </p>
    <p>
      ngx_http_process_request_headers&#36825;&#20010;&#20989;&#25968;&#20027;&#35201;&#26159;&#35299;&#26512;http&#30340;request header&#65292;
    </p>
    <p>
      }
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389346235797" FOLDED="true" MODIFIED="1389447876151" TEXT="ngx_http_read_request_header">
<node CREATED="1389346805641" MODIFIED="1389576252167" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389346241253" MODIFIED="1389576252167">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      
    </p>
    <p>
      ngx_http_read_request_header(){
    </p>
    <p>
      ....
    </p>
    <p>
      if (rev-&gt;ready) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n = c-&gt;recv(c, r-&gt;header_in-&gt;last,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r-&gt;header_in-&gt;end - r-&gt;header_in-&gt;last);
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      //&#31532;&#19968;&#27425;&#36827;&#26469;&#35774;&#32622;n&#20026;again
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n = NGX_AGAIN;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (n == NGX_AGAIN) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!rev-&gt;timer_set) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_add_timer(rev, cscf-&gt;client_header_timeout);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      //&#28982;&#21518;&#25346;&#36733;&#35835;&#20107;&#20214;.
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_handle_read_event(rev, 0) != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      .....
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1390014422695" MODIFIED="1390014424148" TEXT="ngx_http_parse_request_line"/>
<node CREATED="1389346235797" MODIFIED="1389447876150" TEXT="ngx_http_process_request_headers">
<node CREATED="1389346805641" FOLDED="true" MODIFIED="1389575250108" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389346241253" MODIFIED="1389577507279">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      
    </p>
    <p>
      static void
    </p>
    <p>
      ngx_http_process_request_headers(ngx_event_t *rev)
    </p>
    <p>
      {
    </p>
    <p>
      ........................................................
    </p>
    <p>
      &#160;&#160;&#160;rc = NGX_AGAIN;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;for ( ;; ) {
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rc == NGX_AGAIN) {
    </p>
    <p>
      ..........................................
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n = <font color="#fb0808">ngx_http_read_request_header</font>(r);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (n == NGX_AGAIN || n == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rc =<font color="#fa0909">&#160; ngx_http_parse_header_line</font>(r, r-&gt;header_in,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cscf-&gt;underscores_in_headers);
    </p>
    <p>
      ...................................................
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rc == NGX_OK) {
    </p>
    <p>
      //&#36825;&#20010;&#21028;&#26029;&#37324;&#38754;&#20250;&#35774;&#32622;request&#20013;&#30340;&#39044;&#21046;header(cookie, id_modify_since&#31561;&#31561;)
    </p>
    <p>
      ....................................
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rc == NGX_HTTP_PARSE_HEADER_DONE) {
    </p>
    <p>
      //&#21040;&#36798;&#36825;&#37324;&#35828;&#26126;header&#35299;&#26512;&#23436;&#27605;.
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r-&gt;request_length += r-&gt;header_in-&gt;pos - r-&gt;header_in-&gt;start;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r-&gt;http_state = NGX_HTTP_PROCESS_REQUEST_STATE;
    </p>
    <p>
      //&#36825;&#37324;&#20027;&#35201;&#26159;&#36827;&#34892;&#19968;&#20123;&#22836;&#30340;&#26657;&#39564;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rc = <font color="#f50606">ngx_http_process_request_header</font>(r);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rc != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      //&#28982;&#21518;&#36827;&#20837;nginx&#30340;http&#22788;&#29702;(&#36827;&#20837;phase&#22788;&#29702;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f60505">ngx_http_process_request</font>(r);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      .........................
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390014500908" MODIFIED="1390014502127" TEXT="ngx_http_read_request_header"/>
<node CREATED="1390014512940" MODIFIED="1390014519500" TEXT="ngx_http_parse_header_line"/>
<node CREATED="1390014531957" MODIFIED="1390014533407" TEXT="ngx_http_process_request_header"/>
<node CREATED="1390014561580" FOLDED="true" MODIFIED="1390014603527" TEXT="ngx_http_process_request">
<node CREATED="1389346805641" MODIFIED="1389575250108" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389346241253" MODIFIED="1390015098462">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390015053509" FOLDED="true" MODIFIED="1390015054813" TEXT="ngx_http_handler">
<node CREATED="1390015194944" FOLDED="true" MODIFIED="1390015196426" TEXT="ngx_http_core_run_phases">
<node CREATED="1389346805641" FOLDED="true" MODIFIED="1389575250108" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389346241253" MODIFIED="1390015428443">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      void
    </p>
    <p>
      ngx_http_core_run_phases(ngx_http_request_t *r)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rc;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_phase_handler_t&#160;&#160;&#160;*ph;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_http_core_main_conf_t&#160;&#160;*cmcf;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ph = cmcf-&gt;phase_engine.handlers;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;while (ph[r-&gt;phase_handler].checker) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rc = ph[r-&gt;phase_handler].checker(r, &amp;ph[r-&gt;phase_handler]);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (rc == NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1390015078172" MODIFIED="1390015079509" TEXT="ngx_http_run_posted_requests"/>
</node>
</node>
</node>
<node CREATED="1390224549660" MODIFIED="1390224551153" TEXT="ngx_http_process_request_headers"/>
<node CREATED="1390015130947" MODIFIED="1390015133337" TEXT="ngx_http_request_handler"/>
<node CREATED="1390224592068" MODIFIED="1390224593399" TEXT="ngx_http_keepalive_handler"/>
</node>
<node CREATED="1390013233538" ID="ID_590008386" LINK="#ID_564489032" MODIFIED="1391751372013" TEXT="ngx_event_actions_t(epoll)">
<node CREATED="1391751836303" FOLDED="true" MODIFIED="1391751852811" TEXT="/*actions.init*/">
<node CREATED="1390008473155" ID="ID_656889216" LINK="#ID_1222451264" MODIFIED="1390524232648" TEXT="ngx_epoll_init">
<node CREATED="1390398057691" FOLDED="true" MODIFIED="1390398070344" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1390008477374" MODIFIED="1390523987966">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_int_t
    </p>
    <p>
      <font color="#f70808">ngx_epoll_init</font>(ngx_cycle_t *cycle, ngx_msec_t timer)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_epoll_conf_t&#160;&#160;*epcf;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;epcf = ngx_event_get_conf(cycle-&gt;conf_ctx, ngx_epoll_module);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#21019;&#24314;&#19968;&#20010;epoll&#21477;&#26564;&#65292;&#25351;&#23450;&#30417;&#21548;&#25968;&#30446;&#20026;cycle-&gt;connection_n / 2
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ep == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ep = epoll_create(cycle-&gt;connection_n / 2);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ep == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_EMERG, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;epoll_create() failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// event_list&#26159;&#34987;&#30417;&#21548;&#30340;&#21477;&#26564;&#30340;&#21015;&#34920;&#65292;&#40664;&#35748;&#26368;&#22823;&#20026;512&#20010;&#21477;&#26564;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (nevents &lt; epcf-&gt;events) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (event_list) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_free(event_list);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;event_list = ngx_alloc(sizeof(struct epoll_event) * epcf-&gt;events,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (event_list == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;nevents = epcf-&gt;events;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_io = ngx_os_io;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#21487;&#20197;&#20415;&#25463;&#30340;&#35775;&#38382;&#21040;&#20107;&#20214;&#22788;&#29702;&#27169;&#22359;&#30340;&#21508;&#31181;actions&#38057;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_actions = ngx_epoll_module_ctx.actions;
    </p>
    <p>
      
    </p>
    <p>
      #if (NGX_HAVE_CLEAR_EVENT)
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_flags = NGX_USE_CLEAR_EVENT
    </p>
    <p>
      #else
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_flags = NGX_USE_LEVEL_EVENT
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|NGX_USE_GREEDY_EVENT
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|NGX_USE_EPOLL_EVENT;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390398057691" FOLDED="true" ID="ID_402061381" MODIFIED="1390398070344" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1390008477374" ID="ID_517518143" MODIFIED="1390517746715">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_int_t
    </p>
    <p>
      ngx_epoll_init(ngx_cycle_t *cycle, ngx_msec_t timer)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;<font color="#ee0404">&#160;ep</font>&#160;= epoll_create(cycle-&gt;connection_n / 2);//&#160; ep&#23601;&#26159;epoll&#30340;&#21477;&#26564;&#65292;&#21021;&#20540;&#20026;-1&#65292;&#25152;&#20197;&#19968;&#21551;&#21160;nginx&#23601;&#26159;&#35843;&#29992;epoll_create&#21019;&#24314;&#21477;&#26564;&#65292;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (nevents &lt; epcf-&gt;events) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (event_list) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_free(event_list);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f30c0c">&#160; //&#21021;&#22987;&#21270;nevents&#21644;event_list&#65292;epcf-&gt;events&#26159;&#30001;ngx_epoll_module&#30340;epoll_events&#25351;&#20196;&#35774;&#32622;&#30340;&#12290;nevents&#21644;event_list&#26159;&#35201;&#20256;&#32473;epoll_wait&#30340;&#21442;&#25968;&#65292;nevents&#26159;&#35201;&#30417;&#21548;&#30340;&#20107;&#20214;&#30340;&#26368;&#22823;&#20010;&#25968;&#65292;event_list&#29992;&#20110;&#23384;&#25918;epoll&#36820;&#22238;&#30340;&#20107;&#20214;</font>&#12290;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f10a0a">event_list</font>&#160;= ngx_alloc(sizeof(struct epoll_event) * epcf-&gt;events,ycle-&gt;log);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f40707">nevents</font>&#160;= epcf-&gt;events;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f50202">&#160;ngx_event_actions</font>&#160;= ngx_epoll_module_ctx.actions; //&#20026;&#25277;&#35937;&#20107;&#20214;&#27169;&#22411;&#36171;&#20540;,&#160;ngx_event_actions&#20026;&#20840;&#23616;&#21464;&#37327;
    </p>
    <p>
      
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390398057691" FOLDED="true" ID="ID_449834385" LINK="http://blog.csdn.net/marcky/article/details/6069958" MODIFIED="1391736616837" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1390398079402" MODIFIED="1390517990187">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ngx_epoll_init&#20027;&#35201;&#26159;&#23436;&#25104;epoll&#30340;&#30456;&#20851;&#21021;&#22987;&#21270;&#24037;&#20316;&#65292;&#20195;&#30721;&#20998;&#26512;&#22914;&#19979;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      static ngx_int_t ngx_epoll_init(ngx_cycle_t *cycle, ngx_msec_t timer)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_epoll_conf_t&#160;&#160;*epcf;
    </p>
    <p>
      /*&#21462;&#24471;epoll&#27169;&#22359;&#30340;&#37197;&#32622;&#32467;&#26500;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;epcf = ngx_event_get_conf(cycle-&gt;conf_ctx, ngx_epoll_module);
    </p>
    <p>
      /*ep&#26159;epoll&#27169;&#22359;&#23450;&#20041;&#30340;&#19968;&#20010;&#20840;&#23616;&#21464;&#37327;&#65292;&#21021;&#22987;&#21270;&#20026;-1*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ep == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160; <font color="#f20909">/*&#21019;&#19968;&#20010;epoll&#23545;&#35937;&#65292;&#23481;&#37327;&#20026;&#24635;&#36830;&#25509;&#25968;&#30340;&#19968;&#21322;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f10a0a">ep</font>&#160;= epoll_create(cycle-&gt;connection_n / 2);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ep == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_EMERG, cycle-&gt;log, ngx_errno, &#160;&quot;epoll_create() failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      /*nevents&#20063;&#26159;epoll&#27169;&#22359;&#23450;&#20041;&#30340;&#19968;&#20010;&#20840;&#23616;&#21464;&#37327;&#65292;&#21021;&#22987;&#21270;&#20026;0*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (nevents &lt; epcf-&gt;events) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (event_list) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_free(event_list);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      /*event_list&#23384;&#20648;&#20135;&#29983;&#20107;&#20214;&#30340;&#25968;&#32452;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#f71010">event_list</font>&#160;= ngx_alloc(sizeof(struct epoll_event) * epcf-&gt;events, cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (event_list == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#f30404">nevents </font>= epcf-&gt;events;
    </p>
    <p>
      /*&#21021;&#22987;&#21270;&#20840;&#23616;&#21464;&#37327;ngx_io, ngx_os_is&#23450;&#20041;&#20026;&#65306;
    </p>
    <p>
      ngx_os_io_t ngx_os_io = {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;ngx_unix_recv,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;ngx_readv_chain,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;ngx_udp_unix_recv,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;ngx_unix_send,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;ngx_writev_chain,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;0
    </p>
    <p>
      };&#65288;&#20301;&#20110;src/os/unix/ngx_posix_init.c&#65289;
    </p>
    <p>
      */
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_io = ngx_os_io;
    </p>
    <p>
      /*&#36825;&#37324;&#23601;&#26159;&#23558;epoll&#30340;&#20855;&#20307;&#25509;&#21475;&#20989;&#25968;&#27880;&#20876;&#21040;&#20107;&#20214;&#25277;&#35937;&#23618;&#25509;&#21475;ngx_event_actions&#19978;&#12290;
    </p>
    <p>
      &#20855;&#20307;&#26159;&#19978;&#25991;&#25552;&#21040;&#30340;ngx_epoll_module_ctx&#20013;&#23553;&#35013;&#30340;&#22914;&#19979;&#20960;&#20010;&#20989;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_add_event,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_del_event,&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_add_event,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_del_event,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_add_connection,&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_del_connection,&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_process_events,&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_init,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_epoll_done,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      */
    </p>
    <p>
      &#160;&#160;&#160; <font color="#f50606">ngx_event_actions = ngx_epoll_module_ctx.actions;</font>
    </p>
    <p>
      #if (NGX_HAVE_CLEAR_EVENT)
    </p>
    <p>
      /*epoll&#23558;&#28155;&#21152;&#36825;&#20010;&#26631;&#24535;,&#20027;&#35201;&#20026;&#20102;&#23454;&#29616;&#36793;&#32536;&#35302;&#21457;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_flags = NGX_USE_CLEAR_EVENT
    </p>
    <p>
      #else
    </p>
    <p>
      /*&#27700;&#24179;&#35302;&#21457;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#ee0d0d">ngx_event_flags</font>&#160;= NGX_USE_LEVEL_EVENT
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|NGX_USE_GREEDY_EVENT /*io&#30340;&#26102;&#20505;&#65292;&#30452;&#21040;EAGAIN&#20026;&#27490;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|NGX_USE_EPOLL_EVENT; /*epoll&#26631;&#24535;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1390254743733" ID="ID_476761845" MODIFIED="1390381235131" TEXT="/*ngx_process_events*/">
<node CREATED="1390254756383" ID="ID_1142358092" LINK="#ID_356705254" MODIFIED="1390381220999" TEXT="ngx_epoll_process_events">
<node CREATED="1390380649717" FOLDED="true" MODIFIED="1390380669723" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1390008477374" MODIFIED="1390378757972">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_int_t
    </p>
    <p>
      ngx_epoll_process_events(ngx_cycle_t *cycle, ngx_msec_t timer, ngx_uint_t flags)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;events = epoll_wait(<font color="#f10202">ep</font>, <font color="#f80707">event_list</font>, (int) <font color="#f80707">nevents</font>, timer);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;err = (events == -1) ? ngx_errno : 0;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (flags &amp; NGX_UPDATE_TIME || ngx_event_timer_alarm) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_time_update();
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#35843;&#29992;epoll_wait&#20989;&#25968;,&#26681;&#25454;flag&#26631;&#31614;&#26356;&#26032;&#26102;&#38388;.
    </p>
    <p>
      for (i = 0; i &lt; events; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c = event_list[i].data.ptr;//&#20107;&#20214;&#23545;&#24212;&#30340;&#36830;&#25509;&#20449;&#24687;ngx_connection_t
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;instance = (uintptr_t) c &amp; 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c = (ngx_connection_t *) ((uintptr_t) c &amp; (uintptr_t) ~1);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev = c-&gt;read;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;revents = event_list[i].events; //&#21457;&#29983;&#30340;&#20107;&#20214;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#22788;&#29702;&#35835;&#20107;&#20214;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((revents &amp; EPOLLIN) &amp;&amp; rev-&gt;active) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((flags &amp; NGX_POST_THREAD_EVENTS) &amp;&amp; !rev-&gt;accept) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;posted_ready = 1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;ready = 1;//epoll&#35774;&#32622;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (flags &amp; NGX_POST_EVENTS)&#160;
    </p>
    <p>
      &#160;&#160;&#160;// * &#20351;&#29992;accept&#38145;&#65292;&#27492;&#22788;&#20250;&#23558;&#20107;&#20214;&#28155;&#21152;&#21040;&#38431;&#21015;&#20013;&#12290; &#36825;&#37324;&#26681;&#25454;&#26159;&#19981;&#26159;&#30417;&#21548;socket&#25918;&#21040;&#19981;&#21516;&#30340;&#38431;&#21015;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;queue = (ngx_event_t **) (rev-&gt;accept ?&#160; &amp;ngx_posted_accept_events : &amp;ngx_posted_events);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#28155;&#21152;&#21040;&#38431;&#21015;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_locked_post_event(rev, queue);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {&#160;&#160;//&#22914;&#26524;&#27809;&#26377;&#20351;&#29992;accept&#38145;&#30340;&#35805;&#65292;&#21017;&#30452;&#25509;&#20351;&#29992;&#22238;&#35843;&#20989;&#25968;.
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;handler(rev);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev = c-&gt;write;
    </p>
    <p>
      if ((revents &amp; EPOLLOUT) &amp;&amp; wev-&gt;active) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (c-&gt;fd == -1 || wev-&gt;instance != instance) {
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* the stale event from a file descriptor
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* that was just closed in this iteration
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0,&#160;&quot;epoll: stale event %p&quot;, c);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (flags &amp; NGX_POST_THREAD_EVENTS) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev-&gt;posted_ready = 1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev-&gt;ready = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (flags &amp; NGX_POST_EVENTS) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_locked_post_event(wev, &amp;ngx_posted_events);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev-&gt;handler(wev);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390380649717" FOLDED="true" LINK="http://blog.csdn.net/marcky/article/details/6069958" MODIFIED="1391736922292" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1390008477374" ID="ID_62070090" MODIFIED="1390528299505">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_int_t
    </p>
    <p>
      ngx_epoll_process_events(ngx_cycle_t *cycle, ngx_msec_t timer, ngx_uint_t flags)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;int&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;events;
    </p>
    <p>
      &#160;&#160;&#160;&#160;uint32_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;revents;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;instance, i;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_uint_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;level;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_err_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;err;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*log;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;*rev, *wev, **queue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_t&#160;&#160;*c;
    </p>
    <p>
      /*&#19968;&#24320;&#22987;&#23601;&#26159;&#31561;&#24453;&#20107;&#20214;&#65292;&#26368;&#38271;&#31561;&#24453;&#26102;&#38388;&#20026;timer&#65307;nginx&#20026;&#20107;&#20214;
    </p>
    <p>
      &#19987;&#38376;&#29992;&#32418;&#40657;&#26641;&#32500;&#25252;&#20102;&#19968;&#20010;&#35745;&#26102;&#22120;&#12290;&#21518;&#32493;&#23545;&#36825;&#20010;timer&#21333;&#29420;&#20998;&#26512;&#12290;
    </p>
    <p>
      */
    </p>
    <p>
      &#160;&#160;&#160;&#160;events = epoll_wait(ep, event_list, (int) nevents, timer);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (events == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;err = ngx_errno;
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;err = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (flags &amp; NGX_UPDATE_TIME || <font color="#f50e0e">ngx_event_timer_alarm</font>) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*&#25191;&#34892;&#19968;&#27425;&#26102;&#38388;&#26356;&#26032;, nginx&#23558;&#26102;&#38388;&#32531;&#23384;&#21040;&#20102;&#19968;&#32452;&#20840;&#23616;&#21464;&#37327;&#20013;&#65292;&#26041;&#20415;&#31243;&#24207;&#39640;&#25928;&#30340;&#33719;&#21462;&#20107;&#20214;&#12290;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_time_update();
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      /*&#22788;&#29702;wait&#38169;&#35823;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (err) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (err == NGX_EINTR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#fb0808">ngx_event_timer_alarm</font>) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_timer_alarm = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;level = NGX_LOG_INFO;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;level = NGX_LOG_ALERT;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(level, cycle-&gt;log, err, &quot;epoll_wait() failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      /*wait&#36820;&#22238;&#20107;&#20214;&#25968;0&#65292;&#21487;&#33021;&#26159;timeout&#36820;&#22238;&#65292;&#20063;&#21487;&#33021;&#26159;&#38750;timeout&#36820;&#22238;&#65307;&#38750;timeout&#36820;&#22238;&#21017;&#26159;error*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (events == 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (timer != NGX_TIMER_INFINITE) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;epoll_wait() returned no events without timeout&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;log = cycle-&gt;log;
    </p>
    <p>
      /*for&#24490;&#29615;&#24320;&#22987;&#22788;&#29702;&#25910;&#21040;&#30340;&#25152;&#26377;&#20107;&#20214;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; i read;
    </p>
    <p>
      &#12290;&#12290;&#12290;&#12290;&#12290;&#12290;&#12290;&#12290;&#12290;&#12290;&#12290;&#12290;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      /*&#21462;&#24471;&#21457;&#29983;&#19968;&#20010;&#20107;&#20214;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;revents = event_list[i].events;
    </p>
    <p>
      
    </p>
    <p>
      /*&#35760;&#24405;wait&#30340;&#38169;&#35823;&#36820;&#22238;&#29366;&#24577;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (revents &amp; (EPOLLERR|EPOLLHUP)) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_debug2(NGX_LOG_DEBUG_EVENT, log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;epoll_wait() error on fd:%d ev:%04XD&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;fd, revents);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((revents &amp; (EPOLLERR|EPOLLHUP))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&amp; (revents &amp; (EPOLLIN|EPOLLOUT)) == 0)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* if the error events were returned without EPOLLIN or EPOLLOUT,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* then add these flags to handle the events at least in one
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* active handler
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;revents |= EPOLLIN|EPOLLOUT;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      /*&#35813;&#20107;&#20214;&#26159;&#19968;&#20010;&#35835;&#20107;&#20214;&#65292;&#24182;&#35813;&#36830;&#25509;&#19978;&#27880;&#20876;&#30340;&#35835;&#20107;&#20214;&#26159;active&#30340;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((revents &amp; EPOLLIN) &amp;&amp; rev-&gt;active) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((flags &amp; NGX_POST_THREAD_EVENTS) &amp;&amp; !rev-&gt;accept) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;posted_ready = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;ready = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      /*&#20107;&#20214;&#25918;&#20837;&#30456;&#24212;&#30340;&#38431;&#21015;&#20013;&#65307;&#20851;&#20110;&#27492;&#22788;&#30340;&#20808;&#20837;&#38431;&#20877;&#22788;&#29702;&#65292;&#22312;&#21069;&#38754;&#30340;&#25991;&#31456;&#20013;&#24050;&#32463;&#20171;&#32461;&#36807;&#20102;&#12290;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (flags &amp; NGX_POST_EVENTS) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;queue = (ngx_event_t **) (rev-&gt;accept ?
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;ngx_posted_accept_events : &amp;ngx_posted_events);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_locked_post_event(rev, queue); /*&#20837;&#38431;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;handler(rev);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev = c-&gt;write;
    </p>
    <p>
      /*&#21457;&#29983;&#30340;&#26159;&#19968;&#20010;&#20889;&#20107;&#20214;&#65292;&#21644;&#35835;&#20107;&#20214;&#23436;&#20840;&#19968;&#26679;&#30340;&#36923;&#36753;&#36807;&#31243;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((revents &amp; EPOLLOUT) &amp;&amp; wev-&gt;active) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (flags &amp; NGX_POST_THREAD_EVENTS) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev-&gt;posted_ready = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev-&gt;ready = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      /*&#20808;&#20837;&#38431;&#20877;&#22788;&#29702;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (flags &amp; NGX_POST_EVENTS) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_locked_post_event(wev, &amp;ngx_posted_events);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev-&gt;handler(wev);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391751182004" ID="ID_1961438373" LINK="#ID_881684021" MODIFIED="1391751199355" TEXT="ngx_event_handler_pt"/>
</node>
</node>
<node CREATED="1391751523917" MODIFIED="1391751550997" TEXT="/*ngx_add_conn*/">
<node CREATED="1390400353189" MODIFIED="1390400380705" TEXT="ngx_epoll_add_connection">
<node CREATED="1390400148171" FOLDED="true" MODIFIED="1390400156458" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1390400161955" MODIFIED="1390400308840">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_int_t
    </p>
    <p>
      ngx_epoll_add_connection(ngx_connection_t *c)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct epoll_event&#160;&#160;ee;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ee.events = EPOLLIN|EPOLLOUT|EPOLLET;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ee.data.ptr = (void *) ((uintptr_t) c | c-&gt;read-&gt;instance);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_debug2(NGX_LOG_DEBUG_EVENT, c-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;epoll add connection: fd:%d ev:%08XD&quot;, c-&gt;fd, ee.events);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (epoll_ctl(ep, EPOLL_CTL_ADD, c-&gt;fd, &amp;ee) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno,&#160; &quot;epoll_ctl(EPOLL_CTL_ADD, %d) failed&quot;, c-&gt;fd);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      <font color="#ea1111">&#160;&#160;&#160;&#160;c-&gt;read-&gt;active = 1; </font>
    </p>
    <p>
      <font color="#ea1111">&#160;&#160;&#160;&#160;c-&gt;write-&gt;active = 1;</font>
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1391751529662" MODIFIED="1391751558835" TEXT="/*ngx_del_conn*/">
<node CREATED="1390400764204" MODIFIED="1390400788681" TEXT="ngx_epoll_del_connection">
<node CREATED="1390400148171" FOLDED="true" MODIFIED="1390400156458" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1390400161955" MODIFIED="1390400838193">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_int_t
    </p>
    <p>
      ngx_epoll_del_connection(ngx_connection_t *c, ngx_uint_t flags)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;int&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;op;
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct epoll_event&#160;&#160;ee;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/*
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* when the file descriptor is closed the epoll automatically deletes
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* it from its queue so we do not need to delete explicitly the event
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* before the closing the file descriptor
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (flags &amp; NGX_CLOSE_EVENT) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;read-&gt;active = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;write-&gt;active = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c-&gt;log, 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;epoll del connection: fd:%d&quot;, c-&gt;fd);
    </p>
    <p>
      
    </p>
    <p>
      <font color="#f60505">&#160;&#160;&#160;&#160;op = EPOLL_CTL_DEL; </font>
    </p>
    <p>
      <font color="#f60505">&#160;&#160;&#160;&#160;ee.events = 0; </font>
    </p>
    <p>
      <font color="#f60505">&#160;&#160;&#160;&#160;ee.data.ptr = NULL;</font>
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (epoll_ctl(ep, op, c-&gt;fd, &amp;ee) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno, &#160;&quot;epoll_ctl(%d, %d) failed&quot;, op, c-&gt;fd);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;read-&gt;active = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;c-&gt;write-&gt;active = 0;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return NGX_OK;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1390524629717" LINK="#ID_552558133" MODIFIED="1390526139686" TEXT="ngx_module_t">
<node CREATED="1389594444537" ID="ID_721758468" MODIFIED="1389594479348" TEXT="/*init_process*/">
<node CREATED="1389151285281" ID="ID_579592898" LINK="#ID_440555041" MODIFIED="1389591857479" TEXT="ngx_event_process_init">
<node CREATED="1389345764637" FOLDED="true" LINK="http://www.pagefault.info/?p=201" MODIFIED="1389595382350" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389345806379" ID="ID_1712714867" MODIFIED="1390526549650">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19979;&#38754;&#36825;&#19968;&#27573;&#26159;&#21028;&#26029;&#26159;&#21542;&#20351;&#29992;mutex&#38145;&#65292;&#20027;&#35201;&#26159;&#20026;&#20102;&#25511;&#21046;&#36127;&#36733;&#22343;&#34913;&#65292;nginx&#22810;&#36827;&#31243;&#30340;&#36127;&#36733;&#22343;&#34913;&#25105;&#21069;&#38754;&#30340;blog&#26377;&#20171;&#32461;&#36807;&#12290;&#36825;&#37324;&#35201;&#27880;&#24847;&#36825;&#20010;&#21464;&#37327;&#65292;&#22240;&#20026;&#19979;&#38754;&#36824;&#20250;&#29992;&#21040;&#12290;
    </p>
    <p>
      if (ccf-&gt;master &amp;&amp; ccf-&gt;worker_processes &gt; 1 &amp;&amp; ecf-&gt;accept_mutex) {
    </p>
    <p>
      //&#20351;&#29992;mutex&#25511;&#21046;&#36827;&#31243;&#30340;&#36127;&#36733;&#22343;&#34913;.
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_use_accept_mutex = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_accept_mutex_held = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_accept_mutex_delay = ecf-&gt;accept_mutex_delay;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_use_accept_mutex = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#19979;&#38754;&#36825;&#27573;&#26159;&#21021;&#22987;&#21270;&#23450;&#26102;&#22120;&#20197;&#21450;event module(epoll etc).
    </p>
    <p>
      //&#23450;&#26102;&#22120;&#21021;&#22987;&#21270;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (<font color="#f70808">ngx_event_timer_init</font>(cycle-&gt;log) == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      //event module&#30340;&#21021;&#22987;&#21270;.
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (m = 0; ngx_modules[m]; m++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[m]-&gt;type != NGX_EVENT_MODULE) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_modules[m]-&gt;ctx_index != ecf-&gt;use) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;module = ngx_modules[m]-&gt;ctx;
    </p>
    <p>
      //&#21021;&#22987;&#21270;&#27169;&#22359;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (module-&gt;<font color="#f10505">actions.init</font>(cycle, ngx_timer_resolution) != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* fatal */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit(2);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#19979;&#38754;&#36825;&#27573;&#26159;&#21021;&#22987;&#21270;&#36830;&#25509;&#27744;&#65292;&#20197;&#21450;&#23545;&#24212;&#30340;&#35835;&#20889;&#20107;&#20214;&#30340;&#21021;&#22987;&#21270;&#12290;
    </p>
    <p>
      <font color="#150af0">//&#21019;&#24314;&#36830;&#25509;&#27744;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;cycle-&gt;connections = ngx_alloc(sizeof(ngx_connection_t) * cycle-&gt;connection_n, cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (cycle-&gt;connections == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;c = cycle-&gt;connections;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      <font color="#0515f6">//&#21019;&#24314;&#25152;&#26377;&#35835;&#20107;&#20214;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;cycle-&gt;read_events = ngx_alloc(sizeof(ngx_event_t) * cycle-&gt;connection_n,&#160;&#160;cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (cycle-&gt;read_events == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;rev = cycle-&gt;read_events;
    </p>
    <p>
      <font color="#0f17f0">//&#21021;&#22987;&#21270;&#35835;&#20107;&#20214;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; i &lt; cycle-&gt;connection_n; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev[i].closed = 1;// &#21021;&#22987;&#21270;&#26159;&#20851;&#38381;&#30340;&#36830;&#25509;
    </p>
    <p>
      //&#38450;&#27490;stale event
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev[i].instance = 1;
    </p>
    <p>
      #if (NGX_THREADS)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev[i].lock = &amp;c[i].lock;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev[i].own_lock = &amp;c[i].lock;
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      <font color="#0f13f1">//&#21019;&#24314;&#20889;&#20107;&#20214;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;cycle-&gt;write_events = ngx_alloc(sizeof(ngx_event_t) * cycle-&gt;connection_n,&#160;&#160;&#160;cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (cycle-&gt;write_events == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;wev = cycle-&gt;write_events;
    </p>
    <p>
      <font color="#0716f0">//&#21021;&#22987;&#21270;&#20889;&#20107;&#20214;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; i &lt; cycle-&gt;connection_n; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev[i].closed = 1;
    </p>
    <p>
      #if (NGX_THREADS)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev[i].lock = &amp;c[i].lock;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wev[i].own_lock = &amp;c[i].lock;
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      
    </p>
    <p>
      <font color="#100dee">//&#21021;&#22987;&#21270;&#36830;&#25509;&#27744;</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;i = cycle-&gt;connection_n;
    </p>
    <p>
      &#160;&#160;&#160;&#160;next = NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;do {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i--;
    </p>
    <p>
      //&#38142;&#34920;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c[i].<font color="#f20909">data</font>&#160;= next;
    </p>
    <p>
      //&#27599;&#19968;&#20010;&#36830;&#25509;&#30340;&#35835;&#20889;&#20107;&#20214;&#23545;&#24212;cycle&#30340;&#35835;&#20889;&#20107;&#20214;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c[i].<font color="#fa0e0e">read</font>&#160;= &amp;cycle-&gt;read_events[i];
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c[i].<font color="#fa0e0e">write</font>&#160;= &amp;cycle-&gt;write_events[i];
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c[i].<font color="#f50606">fd</font>&#160;= (ngx_socket_t) -1;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;next = &amp;c[i];
    </p>
    <p>
      &#160;
    </p>
    <p>
      #if (NGX_THREADS)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c[i].lock = 0;
    </p>
    <p>
      #endif
    </p>
    <p>
      &#160;&#160;&#160;&#160;} while (i);
    </p>
    <p>
      //&#35774;&#32622;free &#36830;&#25509;
    </p>
    <p>
      &#160;&#160;&#160;&#160;cycle-&gt;free_connections = next;
    </p>
    <p>
      &#160;&#160;&#160;&#160;cycle-&gt;free_connection_n = cycle-&gt;connection_n;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#19979;&#38754;&#36825;&#27573;&#21021;&#22987;&#21270;listen &#20107;&#20214; &#65292;&#21019;&#24314;socket&#21477;&#26564;&#65292;&#32465;&#23450;&#20107;&#20214;&#22238;&#35843;&#65292;&#28982;&#21518;&#21152;&#20837;&#21040;&#20107;&#20214;&#39537;&#21160;&#20013;&#65292;&#36825;&#37324;&#27604;&#36739;&#20851;&#38190;&#30340;&#23601;&#26159;&#22914;&#26524;&#20351;&#29992;&#20102;ngx_use_accept_mutex&#65292;&#21017;&#29616;&#22312;&#19981;&#20250;&#23558;&#20107;&#20214;&#21152;&#20837;&#21040;epoll&#20013;&#65292;&#32780;&#26159;&#31561;&#21040;&#22312;ngx_process_events_and_timers&#20013;&#23558;&#21477;&#26564;&#21152;&#20837;&#65292;&#36825;&#26159;&#22240;&#20026;nginx&#20026;&#20102;&#38450;&#27490;&#24778;&#32676;&#65292;&#37319;&#21462;&#20102;&#20018;&#34892;&#21270;&#22788;&#29702;accpet&#65292;&#20063;&#23601;&#26159;&#21516;&#26102;&#21482;&#26377;&#19968;&#20010;listen&#21477;&#26564;&#20250;&#20241;&#30496;&#22312;epoll_wait&#19978;&#31561;&#24453;&#36830;&#25509;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      ls = cycle-&gt;listening.elts;
    </p>
    <p>
      //&#24320;&#22987;&#36941;&#21382;listen
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; i &lt; cycle-&gt;listening.nelts; i++) {
    </p>
    <p>
      //&#20174;&#36830;&#25509;&#27744;&#21462;&#24471;&#36830;&#25509;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c = ngx_get_connection(ls[i].fd, cycle-&gt;log);
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (c == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;log = &amp;ls[i].log;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;listening = &amp;ls[i];
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ls[i].connection = c;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev = c-&gt;read;
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;log = c-&gt;log;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;accept = 1;// &#23558;&#36830;&#25509;&#30340;accept&#35774;&#32622;&#25104;1&#65292;&#34920;&#31034;&#21487;&#20197;&#25509;&#21463;&#36830;&#25509;&#35831;&#27714;
    </p>
    <p>
      .....................................
    </p>
    <p>
      //&#35774;&#32622;listen&#21477;&#26564;&#30340;&#20107;&#20214;&#22238;&#35843;&#65292;&#36825;&#20010;&#22238;&#35843;&#37324;&#38754;&#20250;accept&#65292;&#28982;&#21518;&#36827;&#34892;&#21518;&#32493;&#22788;&#29702;&#65292;&#36825;&#20010;&#20989;&#25968;&#26159;nginx&#20107;&#20214;&#39537;&#21160;&#30340;&#31532;&#19968;&#20010;&#20989;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rev-&gt;handler = <font color="#fc1010">ngx_event_accept</font>;
    </p>
    <p>
      //&#22914;&#26524;&#40664;&#35748;&#20351;&#29992;mutex&#65292;&#21017;&#20250;&#32487;&#32493;&#19979;&#38754;&#25805;&#20316;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_use_accept_mutex) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_event_flags &amp; NGX_USE_RTSIG_EVENT) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f60505">ngx_add_conn</font>(c) == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      //&#21152;&#21487;&#35835;&#20107;&#20214;&#21040;&#20107;&#20214;&#22788;&#29702;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (<font color="#f40707">ngx_add_event</font>(rev, NGX_READ_EVENT, 0) == NGX_ERROR) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389595074949" FOLDED="true" ID="ID_1648342452" MODIFIED="1389595090765" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;2">
<node CREATED="1389151295667" ID="ID_435219623" MODIFIED="1390607094244">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22312;&#27599;&#20010;worker&#21021;&#22987;&#21270;&#30340;&#26102;&#20505;&#65292;&#20250;&#35843;&#29992;&#21040;ngx_event_core_module&#30340;init_process&#38057;&#23376;ngx_event_process_init&#65292;&#36825;&#20010;&#20989;&#25968;&#20250;&#35774;&#32622;cycle&#30340;&#22823;&#37096;&#20998;&#37197;&#32622;&#65292;&#22788;&#29702;&#36807;&#31243;&#22914;&#19979;&#65306;
    </p>
    <p>
      
    </p>
    <p>
      1&#12289;&#35774;&#32622;accpet mutex&#30456;&#20851;&#30340;&#20840;&#23616;&#21464;&#37327;&#65306;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ccf-&gt;master &amp;&amp; ccf-&gt;worker_processes &gt; 1 &amp;&amp; ecf-&gt;accept_mutex) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_use_accept_mutex = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_accept_mutex_held = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_accept_mutex_delay = ecf-&gt;accept_mutex_delay;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_use_accept_mutex = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      2&#12289;&#35843;&#29992;<font color="#f60101">ngx_event_timer_init</font>(cycle-&gt;log)&#65292;&#21021;&#22987;&#21270;&#20107;&#20214;&#30340;&#35745;&#26102;&#26426;&#21046;&#65292;&#36825;&#37324;&#29992;&#21040;&#20102;&#32418;&#40657;&#26641;&#65292;&#35814;&#32454;&#20998;&#26512;&#30041;&#24453;&#20197;&#21518;&#65307;
    </p>
    <p>
      
    </p>
    <p>
      3&#12289;&#35843;&#29992;&#34987;use&#30340;&#20107;&#20214;&#22788;&#29702;&#26426;&#21046;&#27169;&#22359;&#30340;actions.init&#38057;&#23376;&#65292;linux&#19978;&#20351;&#29992;&#30340;&#26159;ngx_epoll_module&#65292;&#20854;actions.init&#38057;&#23376;&#20026;ngx_epoll_init&#65306;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      4&#12289;&#35745;&#26102;&#22120;&#21019;&#24314;&#21644;&#21021;&#22987;&#21270;&#65306;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_timer_resolution &amp;&amp; !(ngx_event_flags &amp; NGX_USE_TIMER_EVENT)) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;struct sigaction&#160;&#160;sa;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;struct itimerval&#160;&#160;itv;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_memzero(&amp;sa, sizeof(struct sigaction));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sa.sa_handler = <font color="#f80b0b">ngx_timer_signal_handler</font>;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sigemptyset(&amp;sa.sa_mask);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#35774;&#32622;SIGALRM&#30340;&#20449;&#21495;&#22788;&#29702;&#20989;&#25968;&#65292;&#36825;&#20010;&#20449;&#21495;&#21021;&#22987;&#20989;&#25968;&#35843;&#29992;ngx_time_update(0, 0)&#65288;&#35843;&#29992;gettimeofday&#65289;&#20462;&#25913;&#26102;&#38388;cache
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (sigaction(SIGALRM, &amp;sa, NULL) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;sigaction(SIGALRM) failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_interval.tv_sec = <font color="#f00707">ngx_timer_resolution</font>&#160; / 1000;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_interval.tv_usec = (ngx_timer_resolution % 1000) * 1000;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_value.tv_sec = ngx_timer_resolution / 1000;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;itv.it_value.tv_usec = (ngx_timer_resolution % 1000 ) * 1000;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#35774;&#32622;&#23450;&#26102;&#22120;&#65292;&#38388;&#38548;&#19968;&#23450;&#26102;&#38388;&#21457;&#36865;SIGALRM&#20449;&#21495;&#65292;&#21487;&#20197;&#21442;&#32771;settimer&#31995;&#32479;&#35843;&#29992;&#30340;&#25163;&#20876;&#39029;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (setitimer(ITIMER_REAL, &amp;itv, NULL) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;setitimer() failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      5&#12289;&#23545;poll,/dev/poll,rtsig&#19977;&#20010;&#20107;&#20214;&#22788;&#29702;&#27169;&#22359;&#30340;&#29305;&#27530;&#22788;&#29702;&#65292;&#19981;&#28145;&#31350;&#65306;
    </p>
    <p>
      if (ngx_event_flags &amp; NGX_USE_FD_EVENT) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;struct rlimit&#160;&#160;rlmt;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (getrlimit(RLIMIT_NOFILE, &amp;rlmt) == -1) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;getrlimit(RLIMIT_NOFILE) failed&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle-&gt;files_n = (ngx_uint_t) rlmt.rlim_cur;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle-&gt;files = ngx_calloc(sizeof(ngx_connection_t *) * cycle-&gt;files_n,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle-&gt;log);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (cycle-&gt;files == NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;
    </p>
    <p>
      
    </p>
    <p>
      6&#12289;&#21019;&#24314;cycle-&gt;connection_n&#20010;ngx_connection_t&#32467;&#26500;&#21464;&#37327;&#65292;&#35753;cycle-&gt;connections&#25351;&#21521;&#23427;&#65307;
    </p>
    <p>
      
    </p>
    <p>
      7&#12289;&#20998;&#21035;&#21019;&#24314;cycle-&gt;connection_n&#20010;&#35835;&#21644;&#20889;&#20107;&#20214;&#32467;&#26500;&#21464;&#37327;&#65288;ngx_event_t&#65289;&#24182;&#21021;&#22987;&#21270;&#20854;&#29366;&#24577;&#65292;&#35753;cycle-&gt;read_events&#21644;cycle-&gt;write_events&#25351;&#21521;&#23427;&#20204;&#65307;
    </p>
    <p>
      
    </p>
    <p>
      8&#12289;&#25226;cycle-&gt;connections&#20013;&#21508;&#20010;&#20803;&#32032;&#20018;&#25104;&#19968;&#20010;&#38142;&#34920;(&#29992;ngx_connection_t.data&#25351;&#21521;&#19979;&#19968;&#20010;)&#65292;&#24182;&#35753;cycle-&gt;free_connections&#25351;&#21521;&#22836;&#37096;&#31532;&#19968;&#20010;&#20803;&#32032;&#65292;&#21363;&#65306;
    </p>
    <p>
      cycle-&gt;free_connections = &amp;cycle-&gt;connections[0],cycle-&gt;free_connection_n = cycle-&gt;connection_n,&#36825;&#26679;&#23601;&#26500;&#24314;&#20102;&#19968;&#26465;&#31354;&#38386;&#30340;&#36830;&#25509;&#38142;&#34920;&#65307;
    </p>
    <p>
      
    </p>
    <p>
      9&#12289;&#20026;cycle-&gt;listening&#20013;&#30340;&#27599;&#20010;&#30417;&#21548;&#22871;&#25509;&#23383;&#35774;&#32622;&#21021;&#22987;&#30340;&#36830;&#25509;&#20197;&#21450;&#20107;&#20214;&#36164;&#28304;&#12290;
    </p>
    <p>
      &#160;&#160;rev-&gt;handle = ngx_event_accept;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390526604318" FOLDED="true" MODIFIED="1390526644912" TEXT="ngx_timer_signal_handle">
<icon BUILTIN="back"/>
<node CREATED="1389595074949" MODIFIED="1390527688599" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389151295667" ID="ID_332607311" MODIFIED="1390526706966">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static void&#160;
    </p>
    <p>
      ngx_timer_signal_handler(int signo)&#160;
    </p>
    <p>
      {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_timer_alarm = 1;&#160;
    </p>
    <p>
      &#160;
    </p>
    <p>
      #if 1&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_log_debug0(NGX_LOG_DEBUG_EVENT, ngx_cycle-&gt;log, 0, &quot;timer signal&quot;);&#160;
    </p>
    <p>
      #endif&#160;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      &#21487;&#20197;&#30475;&#20986;&#23427;&#20165;&#20165;&#26159;&#23558;&#26631;&#24535;&#21464;&#37327;ngx_event_timer_alarm &#35774;&#32622;&#20026;1.
    </p>
    <p>
      &#21482;&#26377;&#22312;ngx_event_timer_alarm &#20026;1 &#30340;&#24773;&#20917;&#19979;&#65292;&#24037;&#20316;&#36827;&#31243;&#25165;&#20250;&#26356;&#26032;&#26102;&#38388;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1390523798393" FOLDED="true" MODIFIED="1390523839249" TEXT="ngx_event_timer_init">
<node CREATED="1390523804557" MODIFIED="1390523833522">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;&#160;&#160;&#160;/*
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* the event timer rbtree may contain the duplicate keys, however,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* it should not be a problem, because we use the rbtree to find
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* a minimum timer value only
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;*/&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_int_t&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_event_timer_init(ngx_log_t *log)&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;{&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#32418;&#40657;&#26641;&#21021;&#22987;&#21270;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_rbtree_init(&amp;ngx_event_timer_rbtree, &amp;ngx_event_timer_sentinel,&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_rbtree_insert_timer_value);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#22810;&#32447;&#31243;&#22788;&#29702;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;#if (NGX_THREADS)&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_event_timer_mutex) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_timer_mutex-&gt;log = log;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_OK;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ngx_event_timer_mutex = ngx_mutex_init(log, 0);&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ngx_event_timer_mutex == NULL) {&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;#endif&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_OK;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391781276980" LINK="#ID_1588041292" MODIFIED="1391781918163" TEXT="ngx_event_accept">
<icon BUILTIN="back"/>
</node>
<node CREATED="1390523995877" ID="ID_1222451264" LINK="#ID_1213533210" MODIFIED="1390524184519" TEXT="module-&gt;actions.init">
<icon BUILTIN="back"/>
</node>
</node>
</node>
<node CREATED="1389602808826" MODIFIED="1390526006344" TEXT="/*init_module*/">
<node CREATED="1389602813283" LINK="#ID_1428001477" MODIFIED="1390526011242" TEXT="ngx_event_module_init">
<node CREATED="1390381180874" FOLDED="true" MODIFIED="1390381192024" TEXT="&#x6e90;&#x7801;&#x5206;&#x6790;">
<node CREATED="1389602818626" MODIFIED="1389602851896">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static ngx_int_t
    </p>
    <p>
      ngx_event_module_init(ngx_cycle_t *cycle)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;.......
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;cl = 128;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;size = cl&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* ngx_accept_mutex */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;+ cl&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* ngx_connection_counter */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;+ cl;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* ngx_temp_number */
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;shm.size = size;
    </p>
    <p>
      &#160;&#160;&#160;&#160;shm.name.len = sizeof(&quot;nginx_shared_zone&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;shm.name.data = (u_char *) &quot;nginx_shared_zone&quot;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;shm.log = cycle-&gt;log;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;if (ngx_shm_alloc(&amp;shm) != NGX_OK) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;shared = shm.addr;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_accept_mutex_ptr = (ngx_atomic_t *) shared;
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_accept_mutex.spin = (ngx_uint_t) -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#160;&#160;&#23558;accept&#38145;&#25918;&#20837;&#20849;&#20139;&#20869;&#23384;&#65292;&#24182;&#23558;&#20854;&#21021;&#22987;&#21270;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (ngx_shmtx_create(&amp;ngx_accept_mutex, (ngx_shmtx_sh_t *) shared,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle-&gt;lock_file.data)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!= NGX_OK)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NGX_ERROR;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;ngx_connection_counter = (ngx_atomic_t *) (shared + 1 * cl);//&#25509;&#30528;&#25918;&#20837;&#36830;&#25509;&#35745;&#25968;&#22120;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1389238745504" FOLDED="true" MODIFIED="1389447897451" POSITION="left" TEXT="&#x547d;&#x540d;&#x89c4;&#x5219;">
<node CREATED="1389238793279" MODIFIED="1389447908156">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ls&#34920;&#31034;ngx_listening_t&#30340;&#19968;&#20010;&#21464;&#37327;&#65292;
    </p>
    <p>
      c&#34920;&#31034;ngx_connection_t&#30340;&#19968;&#20010;&#21464;&#37327;&#65292;
    </p>
    <p>
      r&#34920;&#31034;ngx_http_request_t&#30340;&#19968;&#20010;&#21464;&#37327;&#65292;
    </p>
    <p>
      ev&#34920;&#31034;ngx_event_t&#30340;&#19968;&#20010;&#21464;&#37327;&#65292;
    </p>
    <p>
      rev&#21017;&#26159;&#22788;&#29702;read&#20107;&#20214;&#30340;ev&#65292;
    </p>
    <p>
      wev&#21017;&#26159;&#22788;&#29702;write&#20107;&#20214;&#30340;ev&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</map>
